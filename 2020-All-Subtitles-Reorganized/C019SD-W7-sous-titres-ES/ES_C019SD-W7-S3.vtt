WEBVTT

00:00:00.480 --> 00:00:03.880 align:middle
Hola, este es un curso muy avanzado.

00:00:04.720 --> 00:00:08.040 align:middle
Nos centraremos en
como Pharo organiza clases

00:00:08.760 --> 00:00:11.840 align:middle
y relaciones de instancia
entre clases

00:00:12.400 --> 00:00:15.720 align:middle
Está realmente dirigido a los entusiastas.

00:00:16.520 --> 00:00:21.600 align:middle
No es esencial dominar,
ya que ya usas a Pharo sin él.

00:00:22.000 --> 00:00:26.200 align:middle
Puedes usar Pharo para programar
sin saber cómo funciona.

00:00:26.400 --> 00:00:31.840 align:middle
Pero puede estar insatisfecho si el curso
No explicó cómo funciona.

00:00:32.000 --> 00:00:34.640 align:middle
Como explicar dónde se define "nuevo"

00:00:34.800 --> 00:00:37.400 align:middle
o cuál es la clase de una metaclase.

00:00:37.920 --> 00:00:40.840 align:middle
Este video explicará todo esto.

00:00:41.040 --> 00:00:45.320 align:middle
No importa
Si no entiendes inmediatamente.

00:00:45.400 --> 00:00:47.920 align:middle
Pero si realmente te interesa,

00:00:48.680 --> 00:00:50.840 align:middle
Puedes verlo varias veces.

00:00:51.720 --> 00:00:54.320 align:middle
Hay una clave fundamental aquí.

00:00:54.760 --> 00:00:59.400 align:middle
Es un aspecto divertido,
que esta transparencia debería explicar.

00:00:59.680 --> 00:01:00.680 align:middle
La idea básica,

00:01:00.840 --> 00:01:04.080 align:middle
que seguimos reiterando en este MOOC,

00:01:04.200 --> 00:01:09.360 align:middle
Es que, como debe saber,
cuando enviamos un mensaje a un objeto,

00:01:09.640 --> 00:01:13.560 align:middle
buscamos en la clase del objeto
a través del enlace de instanciación.

00:01:13.760 --> 00:01:17.200 align:middle
Si no está allí,
Seguimos la cadena de herencia.

00:01:17.400 --> 00:01:21.920 align:middle
Siempre comenzamos en la clase,
luego sigue la cadena de la herencia.

00:01:22.400 --> 00:01:26.520 align:middle
Esta regla debe seguirse
sistemáticamente.

00:01:26.920 --> 00:01:29.400 align:middle
Para explicar metaclases,

00:01:29.600 --> 00:01:34.840 align:middle
los resumimos en siete puntos,
que son relativamente simples

00:01:35.760 --> 00:01:38.600 align:middle
Cada objeto es una instancia de una clase.

00:01:40.160 --> 00:01:43.080 align:middle
¡Eso es difícil!
Mira este ejemplo.

00:01:43.320 --> 00:01:47.200 align:middle
El objeto OrderedCollection
Es una instancia de esta clase.

00:01:47.600 --> 00:01:49.160 align:middle
Hasta ahora, está claro.

00:01:50.080 --> 00:01:55.200 align:middle
El segundo punto es que cada clase
hereda de la clase Object.

00:01:57.080 --> 00:01:58.720 align:middle
Como vemos aquí,

00:01:59.080 --> 00:02:03.840 align:middle
Colección ordenada y hacia arriba
Heredar en última instancia de Object.

00:02:04.640 --> 00:02:07.040 align:middle
Solo una nota para los francófonos,

00:02:07.200 --> 00:02:09.640 align:middle
"Eventualmente" significa "en última instancia".

00:02:10.520 --> 00:02:11.560 align:middle
Es confuso.

00:02:11.800 --> 00:02:12.840 align:middle
Asi que,

00:02:13.400 --> 00:02:18.040 align:middle
tenemos nuestro gráfico de herencia
eso inevitablemente conduce a objeto.

00:02:20.080 --> 00:02:25.000 align:middle
¿Cuál es la responsabilidad de Object?
Representa el comportamiento del objeto

00:02:25.200 --> 00:02:28.560 align:middle
común a todos los objetos,
como el manejo de errores,

00:02:28.720 --> 00:02:31.080 align:middle
insertando un alto y anuncios.

00:02:31.680 --> 00:02:34.760 align:middle
El objeto es la raíz
del árbol de la herencia.

00:02:35.360 --> 00:02:38.520 align:middle
Su responsabilidad clave
es el comportamiento mínimo

00:02:39.800 --> 00:02:44.200 align:middle
Volviendo a nuestra lista, cada clase
Es una instancia de una metaclase.

00:02:45.800 --> 00:02:48.520 align:middle
Lo explicamos en un curso anterior.

00:02:49.080 --> 00:02:53.520 align:middle
Una clase X es la única instancia
de la metaclase denominada clase X.

00:02:53.680 --> 00:02:56.400 align:middle
Vemos que la clase OrderedCollection

00:02:56.560 --> 00:03:00.040 align:middle
es una instancia de la clase
Clase OrderedCollection.

00:03:00.560 --> 00:03:05.040 align:middle
Funciona de la misma manera
para la clase SequenceableCollection,

00:03:05.560 --> 00:03:08.840 align:middle
y la clase de objeto
con la clase clase de objeto.

00:03:09.080 --> 00:03:12.560 align:middle
Todas las clases son instancias
de otra metaclase,

00:03:12.840 --> 00:03:16.280 align:middle
que lleva el mismo nombre
seguido de "clase".

00:03:18.920 --> 00:03:20.640 align:middle
Metaclasses se crean

00:03:20.840 --> 00:03:23.400 align:middle
automáticamente cuando creamos una clase.

00:03:23.600 --> 00:03:28.320 align:middle
Enviamos un mensaje "nuevo"
a la metaclase para crear la clase.

00:03:30.080 --> 00:03:31.200 align:middle
El siguiente punto

00:03:31.920 --> 00:03:35.400 align:middle
Jerarquía de Metaclass
paralela a la jerarquía de clases.

00:03:36.200 --> 00:03:39.160 align:middle
Anteriormente, explicamos eso

00:03:39.920 --> 00:03:43.200 align:middle
OrderedCollection
es una instancia de su clase,

00:03:43.400 --> 00:03:46.400 align:middle
y del mismo modo para SequenceableCollection.

00:03:46.640 --> 00:03:51.080 align:middle
Ahora tenemos que especificar
La relación entre los dos.

00:03:51.280 --> 00:03:56.040 align:middle
Ya que hay una herencia
relación aquí, también hay una aquí.

00:03:56.920 --> 00:03:57.920 align:middle
En todos los casos.

00:03:58.840 --> 00:04:03.400 align:middle
Es por eso que decimos
Son dos jerarquías paralelas.

00:04:04.080 --> 00:04:06.320 align:middle
¿Cuándo usamos esta jerarquía?

00:04:06.400 --> 00:04:10.080 align:middle
Si envío el mensaje "nuevo"
a OrderedCollection,

00:04:10.520 --> 00:04:13.080 align:middle
donde busco
En la clase.

00:04:13.360 --> 00:04:18.920 align:middle
Busco en cada clase
si se ha definido o no "nuevo".

00:04:19.200 --> 00:04:23.080 align:middle
Al moverse hacia arriba, ¿se ha definido como "nuevo"?
Si o no.

00:04:23.320 --> 00:04:28.400 align:middle
Aquí utilizamos la clave
Lo mencioné al principio.

00:04:28.840 --> 00:04:34.640 align:middle
Para enviar un mensaje, comience con la clase
luego sigue la cadena de la herencia.

00:04:35.360 --> 00:04:37.400 align:middle
Hasta este punto,

00:04:37.640 --> 00:04:41.400 align:middle
Puede parecer claro,
pero ahora surgen otras preguntas.

00:04:41.600 --> 00:04:44.360 align:middle
¿De qué clase de objeto es una instancia?

00:04:45.200 --> 00:04:46.400 align:middle
Quizás te preguntes.

00:04:46.840 --> 00:04:50.200 align:middle
¿Y qué es la superclase?
de la clase objeto?

00:04:51.000 --> 00:04:54.680 align:middle
Funciona
¿Si enviamos un mensaje a una metaclase?

00:04:56.160 --> 00:04:59.400 align:middle
O si enviamos un mensaje
a lo que sea aquí?

00:05:00.000 --> 00:05:01.600 align:middle
Echemos un vistazo.

00:05:02.680 --> 00:05:07.800 align:middle
El sistema dice que cada metaclase
hereda de clase,

00:05:08.280 --> 00:05:10.080 align:middle
hasta el comportamiento.

00:05:11.000 --> 00:05:14.680 align:middle
Veamos eso,
y responde la primera pregunta.

00:05:14.840 --> 00:05:18.800 align:middle
La clase de objeto es una clase,
por lo tanto, hereda de clase.

00:05:19.560 --> 00:05:23.320 align:middle
Clase hereda
de ClassDescription and Behavior.

00:05:24.160 --> 00:05:28.040 align:middle
A diferencia de Pharo,
en otros sistemas como Lisp

00:05:28.560 --> 00:05:31.200 align:middle
estos dos elementos son de una sola clase.

00:05:31.680 --> 00:05:33.640 align:middle
Pharo los divide para su reutilización.

00:05:33.840 --> 00:05:36.920 align:middle
Metaclass se puede adjuntar
a descripción de clase

00:05:37.080 --> 00:05:39.920 align:middle
utilizar ClassDescription
en dos casos

00:05:40.080 --> 00:05:44.400 align:middle
Vemos ese Comportamiento,
que representa la esencia de una clase,

00:05:44.600 --> 00:05:46.720 align:middle
hereda de objeto.

00:05:49.920 --> 00:05:53.000 align:middle
Entonces, si envío un mensaje aquí,

00:05:53.360 --> 00:05:56.040 align:middle
viajará todo el camino hasta aquí.

00:05:57.280 --> 00:06:00.840 align:middle
Sigue el árbol de herencia
desde el nivel de clase.

00:06:03.080 --> 00:06:06.200 align:middle
Ahora queremos saber
donde se define "nuevo".

00:06:06.840 --> 00:06:10.840 align:middle
El método para crear instancias
se define en Comportamiento.

00:06:11.920 --> 00:06:17.680 align:middle
Cuando envío el mensaje "nuevo"
a OrderedCollection, ¿qué sucede?

00:06:18.080 --> 00:06:20.400 align:middle
Primero, busco en la clase.

00:06:21.080 --> 00:06:24.920 align:middle
Supongamos que "nuevo" no se redefine
en la herencia,

00:06:25.080 --> 00:06:28.000 align:middle
entonces busco todas las superclases

00:06:28.360 --> 00:06:29.760 align:middle
hasta que encontremos "nuevo".

00:06:29.920 --> 00:06:34.600 align:middle
En una búsqueda, buscamos un método
y ejecutarlo en el receptor.

00:06:34.840 --> 00:06:39.000 align:middle
Entonces, encuentro el método "nuevo"
y ejecutarlo en el receptor,

00:06:39.200 --> 00:06:44.200 align:middle
la clase OrderedCollection,
que crea una nueva instancia

00:06:44.360 --> 00:06:46.840 align:middle
que nombraremos 3 4, por ejemplo.

00:06:47.720 --> 00:06:48.720 align:middle
¿Bueno?

00:06:49.400 --> 00:06:52.320 align:middle
Estamos usando la clave de la que hablé.

00:06:52.560 --> 00:06:57.840 align:middle
Buscamos en la cadena de herencias,
comenzando con la clase del receptor.

00:06:58.840 --> 00:07:01.920 align:middle
En una palabra,
¿Qué representa el comportamiento?

00:07:02.160 --> 00:07:05.840 align:middle
Es la esencia de un objeto.
eso puede tener instancias

00:07:06.800 --> 00:07:08.520 align:middle
Objetos con instancias

00:07:09.760 --> 00:07:12.760 align:middle
debe incluir un enlace de superclase,

00:07:13.000 --> 00:07:16.920 align:middle
diccionario de método
y descripción de instancias (formato).

00:07:17.080 --> 00:07:22.840 align:middle
Los métodos que se muestran aquí incluyen
ejemplos como nuevo, básico, nuevo y nuevo :.

00:07:23.400 --> 00:07:26.520 align:middle
La diferencia entre el nuevo y el básico.

00:07:26.680 --> 00:07:29.800 align:middle
es que nunca debes
redefinir basicNew.

00:07:30.080 --> 00:07:33.000 align:middle
Como explicamos
en el curso de métodos,

00:07:33.200 --> 00:07:38.760 align:middle
Si redefine un método que comienza
con "básico", el método es inaccesible.

00:07:39.600 --> 00:07:40.920 align:middle
El método original

00:07:41.080 --> 00:07:46.320 align:middle
Hay otras formas de acceder
los métodos compilados, como se muestra aquí.

00:07:46.680 --> 00:07:49.080 align:middle
El comportamiento es la esencia de una clase.

00:07:50.280 --> 00:07:52.040 align:middle
¿Qué es ClassDescription?

00:07:52.400 --> 00:07:56.600 align:middle
Es una superclase abstracta
compartido por Class y Metaclass.

00:07:56.800 --> 00:07:59.800 align:middle
Añade facilidades a Comportamiento,

00:08:00.000 --> 00:08:04.920 align:middle
como nombrar variables de instancia,
ya que la ejecución de clases puede ser automática.

00:08:05.080 --> 00:08:07.520 align:middle
ClassDescription agrega estas cosas.

00:08:07.720 --> 00:08:13.080 align:middle
La organización de categoría se refiere a los métodos.
en su navegador mostrando los protocolos.

00:08:13.320 --> 00:08:17.680 align:middle
Por ejemplo, un método se puede almacenar
en el protocolo de impresión.

00:08:18.200 --> 00:08:20.000 align:middle
Además, la noción de un nombre.

00:08:20.200 --> 00:08:25.840 align:middle
Además del mantenimiento de los conjuntos de cambios
y el guardado de los cambios en los archivos.

00:08:26.280 --> 00:08:28.520 align:middle
Puedes verlo tú mismo.

00:08:28.760 --> 00:08:34.080 align:middle
Esta categorización existe porque
Class y Metaclass comparten el uso.

00:08:35.000 --> 00:08:38.600 align:middle
La responsabilidad de la clase

00:08:38.840 --> 00:08:42.080 align:middle
es representar las clases
Empleamos en Pharo.

00:08:42.320 --> 00:08:46.320 align:middle
Esto incluye representación
para classVariable names

00:08:46.600 --> 00:08:50.080 align:middle
y una mejor forma de nombrar
y compilar elementos.

00:08:50.560 --> 00:08:52.680 align:middle
Una vez más, consulte el código.

00:08:54.400 --> 00:08:57.320 align:middle
Las clases son instancias de metaclases.

00:08:57.560 --> 00:09:03.080 align:middle
Si el objeto es una instancia
de una clase denominada clase de objeto,

00:09:03.280 --> 00:09:06.400 align:middle
y del mismo modo para OrderedCollection,

00:09:06.680 --> 00:09:11.080 align:middle
lo mismo se aplica a la clase,
Descripción de la clase y Comportamiento.

00:09:11.680 --> 00:09:14.400 align:middle
Entonces, Class es una instancia de Class class

00:09:14.600 --> 00:09:19.800 align:middle
y ClassDescription es una instancia
de la clase ClassDescription.

00:09:20.400 --> 00:09:22.360 align:middle
Lo mismo se aplica al comportamiento.

00:09:22.560 --> 00:09:25.920 align:middle
También debemos mirar
la cadena de herencias

00:09:26.160 --> 00:09:30.840 align:middle
Si hay una relación de herencia
entre estos dos elementos,

00:09:31.040 --> 00:09:34.440 align:middle
existe la misma relación
aquí a la derecha

00:09:34.720 --> 00:09:38.400 align:middle
Como ves aquí,
podemos rastrear la cadena de herencia.

00:09:39.280 --> 00:09:43.760 align:middle
La clase de comportamiento hereda por lo tanto
desde la clase de objetos.

00:09:44.280 --> 00:09:46.400 align:middle
Ahora por el segundo último punto.

00:09:46.760 --> 00:09:51.400 align:middle
Como cada clase es una instancia
de una metaclase, surge una pregunta.

00:09:52.360 --> 00:09:56.400 align:middle
Qué es la clase OrderedCollection
una instancia de?

00:09:56.920 --> 00:09:59.600 align:middle
Ya que todo es un objeto en Pharo.

00:10:00.400 --> 00:10:04.720 align:middle
Clase OrderedCollection
es por lo tanto una instancia de Metaclass.

00:10:06.200 --> 00:10:10.320 align:middle
Clase de objeto y clase de clase
son instancias de Metaclass.

00:10:10.600 --> 00:10:16.080 align:middle
Todas las metaclases en el sistema
son instancias de Metaclass.

00:10:17.400 --> 00:10:21.400 align:middle
Además, Metaclass hereda
de ClassDescription.

00:10:21.600 --> 00:10:25.400 align:middle
Es una clase inusual
porque solo tiene una instancia.

00:10:26.000 --> 00:10:31.200 align:middle
Y no puedes nombrarlo porque su nombre
está definido por su instancia.

00:10:31.400 --> 00:10:33.200 align:middle
Eso puede parecer bárbaro.

00:10:33.640 --> 00:10:36.160 align:middle
Entonces, vemos que OrderedCollection

00:10:36.400 --> 00:10:41.080 align:middle
es una instancia de OrderedCollection
clase, que toma su nombre.

00:10:41.400 --> 00:10:44.840 align:middle
Todos los metaclases
son instancias de Metaclass.

00:10:45.160 --> 00:10:49.720 align:middle
En el codigo,
la principal responsabilidad de Metaclass

00:10:50.200 --> 00:10:55.720 align:middle
es crear e inicializar
una sola instancia de sí misma.

00:10:56.080 --> 00:10:59.920 align:middle
Solo hay una pregunta
a la izquierda para contestar

00:11:01.080 --> 00:11:04.400 align:middle
¿De qué se trata Metaclass?

00:11:04.760 --> 00:11:10.640 align:middle
Porque Metaclass es una clase,
como OrderedCollection,

00:11:11.000 --> 00:11:14.320 align:middle
es una instancia
de la clase clase Metaclass.

00:11:14.920 --> 00:11:20.280 align:middle
Verás que Metaclass
hereda de ClassDescription,

00:11:21.200 --> 00:11:26.080 align:middle
por lo tanto, clase Metaclass
hereda de la clase ClassDescription.

00:11:26.840 --> 00:11:30.840 align:middle
Clase OrderedCollection
hereda de clase de objeto

00:11:31.000 --> 00:11:33.920 align:middle
como ordenada colección
hereda de objeto.

00:11:34.080 --> 00:11:38.840 align:middle
Entonces, Metaclass es una instancia
de la clase Metaclass.

00:11:39.280 --> 00:11:43.360 align:middle
OrderedCollection es una instancia
de la clase OrderedCollection.

00:11:43.640 --> 00:11:48.280 align:middle
Y clase Metaclass
es una instancia de Metaclass,

00:11:48.440 --> 00:11:55.200 align:middle
solo como clase de clase y clase de objeto
son instancias de Metaclass.

00:11:55.640 --> 00:12:00.640 align:middle
Este ciclo puede parecer extraño,
pero tiene sentido en contexto.

00:12:00.920 --> 00:12:06.400 align:middle
No necesitas esto para usar Pharo,
así que siéntete libre de pasarlo por alto.

00:12:06.760 --> 00:12:08.680 align:middle
Pero como muestra este gráfico,

00:12:08.840 --> 00:12:12.200 align:middle
la clave de la que hablamos antes
funciona perfectamente.

00:12:12.400 --> 00:12:16.680 align:middle
Cada vez que enviamos un mensaje
a un objeto, vemos su clase

00:12:16.840 --> 00:12:20.400 align:middle
y su árbol de herencia,
como se muestra en estos ejemplos.

00:12:20.760 --> 00:12:25.760 align:middle
Si envío un mensaje a esta instancia,
me lleva a objeto.

00:12:26.760 --> 00:12:29.920 align:middle
Si envío un mensaje a la clase,

00:12:30.840 --> 00:12:34.400 align:middle
Voy a la metaclase
y sigue la herencia.

00:12:36.200 --> 00:12:40.600 align:middle
Si envío un mensaje a una metaclase,
¿Dónde debo mirar?

00:12:41.560 --> 00:12:47.160 align:middle
En Metaclass, ya que la metaclase
Es una instancia de Metaclass.

00:12:47.560 --> 00:12:50.920 align:middle
Sigo el enlace de instanciación
hasta el final.

00:12:51.600 --> 00:12:57.080 align:middle
Esto es cuando un mensaje no se entiende
o un método solo se define en Objeto.

00:12:57.600 --> 00:13:02.600 align:middle
Ahora, ¿qué pasa si envío un mensaje?
a Metaclass mismo?

00:13:02.840 --> 00:13:05.080 align:middle
¿Dónde busco?

00:13:05.400 --> 00:13:10.200 align:middle
Primero en la clase Metaclass,
luego sigo la cadena de herencia.

00:13:11.400 --> 00:13:13.400 align:middle
Entonces ... ¡vaya!

00:13:13.920 --> 00:13:17.520 align:middle
Aquí se vuelve más complicado.

00:13:19.520 --> 00:13:23.680 align:middle
De manera similar, si envío un mensaje
a la clase Metaclass,

00:13:23.840 --> 00:13:26.520 align:middle
o a la clase OrderedCollection,

00:13:26.840 --> 00:13:29.160 align:middle
Miro en la instancia

00:13:30.080 --> 00:13:33.040 align:middle
de la clase Metaclass, que es Metaclass.

00:13:33.200 --> 00:13:36.920 align:middle
Al igual que para la clase OrderedCollection,
Sigo este camino

00:13:37.200 --> 00:13:40.840 align:middle
Ya verás
que este gráfico es completamente lógico.

00:13:41.560 --> 00:13:44.920 align:middle
No podemos tener un gráfico inconsistente

00:13:45.360 --> 00:13:48.520 align:middle
ya que la máquina virtual
solo hace una cosa

00:13:48.680 --> 00:13:53.400 align:middle
Busca mensajes en la clase
y sigue la cadena de herencia.

00:13:53.560 --> 00:13:58.360 align:middle
Este gráfico completo
es consistente con ese proceso.

00:13:59.040 --> 00:14:03.520 align:middle
Encuentro esto emocionante porque
Me lo pregunté yo mismo.

00:14:03.840 --> 00:14:08.280 align:middle
Entonces, para resumir, las clases son objetos
y puede recibir mensajes

00:14:08.600 --> 00:14:12.200 align:middle
El procedimiento es el mismo
para todos los objetos,

00:14:12.400 --> 00:14:16.840 align:middle
incluso si hay metaclases
con una sola instancia,

00:14:17.040 --> 00:14:19.080 align:middle
que no son explícitamente nombrados.

00:14:19.400 --> 00:14:22.080 align:middle
Pero no es esencial saber eso.

