WEBVTT

00:00:00.640 --> 00:00:03.600 align:middle
このセッションでは
Pharo でのループについてお話します。

00:00:03.760 --> 00:00:08.320 align:middle
Pharo では
ループはオブジェクトへのメッセージです。

00:00:08.480 --> 00:00:10.680 align:middle
ループには様々な種類がありますが

00:00:11.320 --> 00:00:14.680 align:middle
それらは数やコレクションや

00:00:14.840 --> 00:00:16.360 align:middle
ブロックへのメッセージです。

00:00:16.520 --> 00:00:21.040 align:middle
コレクションの要素を数え上げる
イテレータの場合もあります。

00:00:22.080 --> 00:00:23.600 align:middle
これがその例です。

00:00:23.760 --> 00:00:27.240 align:middle
timesRepeat: メッセージを

00:00:27.400 --> 00:00:29.000 align:middle
整数 4 へ送ります。

00:00:29.160 --> 00:00:31.640 align:middle
引数としてブロックを渡します。

00:00:31.800 --> 00:00:34.480 align:middle
ブロックについては
前のセッションで学びました。

00:00:34.640 --> 00:00:38.400 align:middle
ブロックはここから始まってここで終わります。

00:00:39.080 --> 00:00:43.520 align:middle
このメッセージはこのブロックを

00:00:44.120 --> 00:00:46.960 align:middle
何回か、この場合は4回、評価します。

00:00:47.120 --> 00:00:48.840 align:middle
レシーバが 4 だからです。

00:00:50.720 --> 00:00:54.080 align:middle
ループを作るメッセージは他にもあります。

00:00:54.240 --> 00:00:57.000 align:middle
この例では
to:do: です。

00:00:57.160 --> 00:01:00.360 align:middle
to:do: メッセージは
Numberクラスで定義されています。

00:01:01.520 --> 00:01:04.360 align:middle
この場合も引数としてブロックを渡します。

00:01:04.520 --> 00:01:06.400 align:middle
このメッセージの最後の引数としてです。

00:01:06.560 --> 00:01:09.440 align:middle
このブロックは何回か

00:01:09.600 --> 00:01:13.640 align:middle
ループ変数を伴って評価されます。
ループ変数はレシーバーから

00:01:13.800 --> 00:01:16.320 align:middle
メッセージの第一引数の値までの値を取ります。

00:01:17.800 --> 00:01:19.960 align:middle
例えば

00:01:20.120 --> 00:01:23.080 align:middle
丁度こんな例題があります。

00:01:23.240 --> 00:01:26.360 align:middle
整数 1 に to:do: メッセージを送ります。

00:01:27.160 --> 00:01:31.840 align:middle
ブロックの中では
ブロックの引数を表示します。

00:01:32.000 --> 00:01:34.080 align:middle
ループでの各 i の値です。

00:01:34.240 --> 00:01:39.200 align:middle
Transcript に
1から100までの全ての整数が表示されます。

00:01:42.000 --> 00:01:47.120 align:middle
他にもループを作るメッセージがあります。

00:01:47.280 --> 00:01:50.280 align:middle
例えば to:by:do: メッセージです。

00:01:50.440 --> 00:01:52.440 align:middle
1以外の増分でループすることができます。

00:01:52.600 --> 00:01:55.680 align:middle
増分の大きさを制御することができるのです。

00:01:55.840 --> 00:01:58.040 align:middle
この例ではループするごとに 3 ずつ増えていきます。

00:01:58.200 --> 00:02:02.160 align:middle
i は 3 ずつの増分の値を取ります。

00:02:03.920 --> 00:02:08.080 align:middle
このコード片を実行した時に
何が起こるでしょうか。

00:02:08.240 --> 00:02:12.040 align:middle
i が 1 から 100 まで

00:02:12.200 --> 00:02:14.400 align:middle
3 ずつの増分で進むのがわかるでしょう。

00:02:15.880 --> 00:02:18.920 align:middle
イテレーターもループを作ります。

00:02:19.080 --> 00:02:23.360 align:middle
コレクションのイテレーターはコレクションに送られるメッセージです。

00:02:23.520 --> 00:02:25.000 align:middle
あらゆる種類のコレクションにあります。

00:02:25.160 --> 00:02:28.440 align:middle
色々な種類のイテレーターがあります。
例えば do: です。

00:02:28.600 --> 00:02:31.880 align:middle
do: はコレクションの各要素を数え上げます。

00:02:32.040 --> 00:02:35.400 align:middle
collect: もコレクションの要素を数え上げますが

00:02:35.560 --> 00:02:39.040 align:middle
結果を集めて

00:02:39.200 --> 00:02:41.040 align:middle
新しいコレクションとします。

00:02:41.200 --> 00:02:45.560 align:middle
select: はコレクションの中から
マッチする要素を選択します。

00:02:45.720 --> 00:02:48.720 align:middle
選択された要素からなる
新しいコレクションを作ります。

00:02:48.880 --> 00:02:53.280 align:middle
reject: はコレクションの要素から
必要ないものを取り除いたコレクションを作ります。

00:02:53.440 --> 00:02:56.320 align:middle
detect: はコレクションの中に
特定の要素が存在するかどうかを

00:02:56.480 --> 00:03:00.120 align:middle
見定める等のことに使われます。

00:03:00.280 --> 00:03:03.360 align:middle
次のスライドで
これらのうちいくつかを学びましょう。

00:03:04.200 --> 00:03:08.440 align:middle
例えば do: は最も一般的なメッセージです。

00:03:08.600 --> 00:03:13.000 align:middle
コレクションに do: メッセージを
ブロックを引数として送ります。

00:03:13.160 --> 00:03:16.240 align:middle
各ループでは

00:03:16.400 --> 00:03:19.160 align:middle
ブロックの引数 each は

00:03:19.320 --> 00:03:22.200 align:middle
コレクションの最初の要素を受け取り

00:03:22.360 --> 00:03:26.000 align:middle
次に2番目の要素、という具合に
最後の要素まで繰り返していきます。

00:03:28.280 --> 00:03:31.680 align:middle
これが例です。
コレクションが定義されています。

00:03:31.840 --> 00:03:34.200 align:middle
構文の復習です。

00:03:34.360 --> 00:03:37.080 align:middle
#( から ) の部分はコレクションのリテラルです。

00:03:37.240 --> 00:03:42.120 align:middle
このコレクションは4つの整数を格納しています。
15、10、19 そして 68 です。

00:03:42.280 --> 00:03:46.320 align:middle
do: メッセージをコレクションに
ブロックを引数として送ります。

00:03:46.480 --> 00:03:51.000 align:middle
i はブロックの引数で

00:03:51.160 --> 00:03:53.560 align:middle
最初はまず 15 を

00:03:53.720 --> 00:03:56.120 align:middle
次に 10、19、そして68 を受け取ります。

00:03:59.040 --> 00:04:01.680 align:middle
また別のメッセージもあります。 whileTrue: です。

00:04:01.840 --> 00:04:04.680 align:middle
whileTrue: もループを作ります。

00:04:04.840 --> 00:04:07.640 align:middle
ただしブロックに送るメッセージです。

00:04:07.800 --> 00:04:09.800 align:middle
Blockクラスで定義されています。

00:04:09.960 --> 00:04:12.480 align:middle
これがレシーバーのブロックです。

00:04:12.640 --> 00:04:14.720 align:middle
こちらには引数のブロックがあります。

00:04:15.320 --> 00:04:19.320 align:middle
Colorクラスからの実例をお見せします。

00:04:19.480 --> 00:04:22.120 align:middle
これが whileTrue: です。

00:04:22.760 --> 00:04:25.800 align:middle
レシーバーのブロックには
条件が書かれています。

00:04:25.960 --> 00:04:28.560 align:middle
このブロックを評価すると
true または false になります。

00:04:28.720 --> 00:04:32.200 align:middle
レシーバーである最初のブロックの評価結果に応じて

00:04:32.360 --> 00:04:34.800 align:middle
引数である2番目のブロックを

00:04:34.960 --> 00:04:38.600 align:middle
実行するかどうかが決まります。

00:04:39.520 --> 00:04:42.080 align:middle
これは別の whileTrue です。

00:04:42.240 --> 00:04:46.480 align:middle
この whileTrue は引数なしのメソッドです。

00:04:46.640 --> 00:04:50.280 align:middle
この whileTrue はレシーバーのブロックを評価して

00:04:50.440 --> 00:04:52.920 align:middle
true または false に応じて

00:04:53.080 --> 00:04:55.800 align:middle
また評価するかどうかを決めます。

00:04:55.960 --> 00:04:59.240 align:middle
評価結果が true であり続ける限りずっと
ブロックが再評価されます。

00:05:00.840 --> 00:05:04.960 align:middle
whileTrue の双子のメッセージに
whuileFalse があります。

00:05:05.120 --> 00:05:07.440 align:middle
それぞれ引数のあるものと
ないものがあります。

00:05:07.600 --> 00:05:12.120 align:middle
クラスやブロックによって
様々なバリエーションがあります。

00:05:14.160 --> 00:05:16.640 align:middle
まとめると
このコースでは

00:05:16.800 --> 00:05:20.840 align:middle
Pharo ではループが通常のメッセージとして
表現されることを見てきました。

00:05:21.000 --> 00:05:22.440 align:middle
それらのメッセージはオブジェクトに送られます。

00:05:22.600 --> 00:05:27.560 align:middle
整数はコレクションやブロックなど。

00:05:28.280 --> 00:05:32.400 align:middle
それらを使って実に様々なループを
作ることができます。

00:05:32.560 --> 00:05:34.680 align:middle
その気になれば
あなたが新しいループを追加することもできます。

