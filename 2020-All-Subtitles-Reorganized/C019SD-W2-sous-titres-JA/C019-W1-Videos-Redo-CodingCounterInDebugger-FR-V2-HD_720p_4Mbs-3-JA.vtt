WEBVTT

00:00:01.220 --> 00:00:02.580 align:middle
このセッションでは
デバッガを使って

00:00:02.747 --> 00:00:05.220 align:middle
プログラミングする方法を
示します。

00:00:05.760 --> 00:00:09.330 align:middle
カウンターのアプリケーションを
再び実装しますが

00:00:09.497 --> 00:00:14.190 align:middle
前回とは違う方法で
より対話的な流れでの開発になります。

00:00:16.940 --> 00:00:18.290 align:middle
まずは前回同様

00:00:18.457 --> 00:00:20.840 align:middle
新規にMyCounterパッケージを作ります。

00:00:26.050 --> 00:00:28.810 align:middle
フィルタして
表示される要素を減らします。

00:00:29.270 --> 00:00:33.240 align:middle
MyCounter では

00:00:34.960 --> 00:00:37.100 align:middle
まずはテストを定義します。
テストクラスです。

00:00:37.267 --> 00:00:39.090 align:middle
テストクラスは TestCase を継承します。

00:00:40.260 --> 00:00:41.650 align:middle
「CounterTest」と呼ぶことにしましょう。

00:00:42.790 --> 00:00:44.870 align:middle
コンパイルします。
メニューを使って、そして

00:00:45.037 --> 00:00:46.340 align:middle
コメントも同様です。

00:00:46.507 --> 00:00:47.830 align:middle
テストクラスを作りました。

00:00:48.260 --> 00:00:51.610 align:middle
このテストクラスにテストメソッドを書いていきます。

00:00:53.260 --> 00:00:56.150 align:middle
テストメソッドの名前は test で始まります。

00:01:02.260 --> 00:01:04.160 align:middle
何をしましょうか?

00:01:04.520 --> 00:01:07.820 align:middle
前回同様、ローカル変数を定義します。

00:01:08.000 --> 00:01:12.570 align:middle
ローカル変数には

00:01:12.737 --> 00:01:15.150 align:middle
Counter クラスのインスタンスを置きます。

00:01:16.770 --> 00:01:21.130 align:middle
カウンタの値を初期化します。

00:01:21.297 --> 00:01:25.500 align:middle
そしてカウンタの値が正しいかどうか
検査します。

00:01:31.450 --> 00:01:32.083 align:middle
コンパイルします。

00:01:33.320 --> 00:01:36.070 align:middle
ここでシステムが
「警告です。

00:01:36.237 --> 00:01:38.250 align:middle
Counter が何かわかりません」
と言ってきます。これは既に

00:01:38.417 --> 00:01:39.670 align:middle
イタリック体で表示されている
ことからもわかります。

00:01:40.030 --> 00:01:42.460 align:middle
そこでシステムは提案してきます。
「新しいクラスを定義しましょうか？

00:01:42.627 --> 00:01:44.040 align:middle
新しいグローバル変数ですか？
それともクラス変数ですか？」

00:01:44.207 --> 00:01:45.000 align:middle
ここでは、新しいクラスです。

00:01:45.137 --> 00:01:48.260 align:middle
クラス定義を提案してきます。
そこで私は答えます。

00:01:48.427 --> 00:01:50.790 align:middle
「OK、それで正しいです。
パッケージも正しくて、

00:01:50.957 --> 00:01:51.590 align:middle
Objectを継承します。
はい、これでいいです」

00:01:51.757 --> 00:01:55.160 align:middle
それで空のクラスが作られます。

00:01:56.050 --> 00:01:58.520 align:middle
そこでこれを変形していきます。

00:02:00.520 --> 00:02:04.260 align:middle
見ての通り
MyCounter クラスは空です。

00:02:04.610 --> 00:02:07.130 align:middle
テストを実行したら、レッドです。

00:02:07.297 --> 00:02:08.820 align:middle
なぜレッドなのでしょう？

00:02:09.000 --> 00:02:09.860 align:middle
エラーがあるからです。

00:02:10.290 --> 00:02:11.760 align:middle
そこで、このメッセージをどう読んだら
いいのでしょうか？

00:02:11.927 --> 00:02:13.470 align:middle
2分かけてやってみましょう。

00:02:14.630 --> 00:02:19.590 align:middle
システムが言ってきます。
「count:メッセージが

00:02:19.757 --> 00:02:23.440 align:middle
Counterクラスのインスタンスに
送られています。

00:02:23.607 --> 00:02:28.240 align:middle
そしてそれに対応するメソッドが
見つかりません。」

00:02:31.590 --> 00:02:32.360 align:middle
見てみましょう。
デバッガを開きます。

00:02:32.760 --> 00:02:36.050 align:middle
デバッガは実行スタックを表示します。

00:02:36.217 --> 00:02:39.760 align:middle
それでメッセージが
理解されていないことがわかります。

00:02:39.927 --> 00:02:42.960 align:middle
そしてそのメッセージが
どこで発生したかがわかります。

00:02:43.760 --> 00:02:46.020 align:middle
そこに行って見てみると

00:02:46.187 --> 00:02:50.770 align:middle
変数があります。cを見ると

00:02:50.937 --> 00:02:55.010 align:middle
それはテンポラリ変数で
値はカウンターです。

00:02:55.177 --> 00:02:56.920 align:middle
とりあえず例えばcのクラスは

00:02:57.830 --> 00:03:00.730 align:middle
「self class」として
Counterクラスです。

00:03:03.790 --> 00:03:08.230 align:middle
これは明らかです。今の所
このクラスにはメソッドは何も定義されていません。

00:03:08.397 --> 00:03:12.620 align:middle
そこでシステムにメソッドを作るようにお願いします。

00:03:12.787 --> 00:03:13.590 align:middle
「Create」です。

00:03:14.290 --> 00:03:15.630 align:middle
システムはいくつかクラスを提案してきます。

00:03:15.797 --> 00:03:17.370 align:middle
Counter クラスを選択して

00:03:17.537 --> 00:03:18.670 align:middle
作ってみましょう。

00:03:18.837 --> 00:03:20.330 align:middle
「accessing」に作ります。

00:03:21.780 --> 00:03:23.620 align:middle
これでシステムは

00:03:25.930 --> 00:03:29.200 align:middle
メソッドを正しいシグネチャで
自動的にコンパイルします。

00:03:30.310 --> 00:03:31.850 align:middle
メソッドの本体については
システムはどうしたらいいのかわからないので

00:03:32.017 --> 00:03:36.010 align:middle
「ShouldBeImplemented」としています。
これは何をするのでしょう？

00:03:36.177 --> 00:03:40.360 align:middle
実行すると例外を挙げます。

00:03:40.527 --> 00:03:41.630 align:middle
これで実行し直してみると

00:03:41.797 --> 00:03:44.140 align:middle
今度は新しいエラーが出ます。

00:03:44.570 --> 00:03:46.680 align:middle
メソッドの本体を実装しなければなりません。

00:03:48.090 --> 00:03:49.950 align:middle
私はcountメッセージがわかります、と。
私は何をしたらいいでしょう？

00:03:50.117 --> 00:03:53.020 align:middle
私はこの値をインスタンス変数に代入したいです。

00:03:53.187 --> 00:03:55.450 align:middle
すると赤い文字で
表示されています。

00:03:58.180 --> 00:04:02.600 align:middle
なぜなら今のところこのクラスは
このインスタンス変数を持たないからです。

00:04:02.860 --> 00:04:04.170 align:middle
コンパイルします。

00:04:05.130 --> 00:04:07.360 align:middle
システムが提案してきます。
「一時変数が必要でしょうか？

00:04:07.527 --> 00:04:09.140 align:middle
それともインスタンス変数でしょうか？」

00:04:09.307 --> 00:04:11.350 align:middle
必要なのはインスタンス変数です。

00:04:14.330 --> 00:04:19.040 align:middle
そこでそうします。
Countクラスを見れば

00:04:19.207 --> 00:04:21.640 align:middle
インスタンス変数 count が作られて

00:04:21.807 --> 00:04:26.650 align:middle
値をセットするセッターメソッドも

00:04:26.817 --> 00:04:27.450 align:middle
定義されます。

00:04:29.790 --> 00:04:31.390 align:middle
これが完了したら
デバッガに継続するように指示します。

00:04:31.557 --> 00:04:34.550 align:middle
「Proceed」は
実行を継続するという意味です。

00:04:34.717 --> 00:04:37.610 align:middle
あたかも何事もなかった
かのように継続します。

00:04:38.470 --> 00:04:39.103 align:middle
さあ何が起こるでしょう？

00:04:39.270 --> 00:04:40.020 align:middle
まだエラーが出ます。

00:04:41.310 --> 00:04:44.600 align:middle
システムは
「Counter クラスのインスタンスが

00:04:44.767 --> 00:04:47.000 align:middle
count メッセージを受け取った
そして

00:04:47.167 --> 00:04:50.360 align:middle
適切なメソッドが見つからなかった」
と言ってきます。

00:04:50.527 --> 00:04:54.250 align:middle
それはそうでしょう。
c は確かに 7 を値とするカウンタを

00:04:55.680 --> 00:05:00.420 align:middle
持っていて
7はその変数 count に保持されています。

00:05:00.587 --> 00:05:01.850 align:middle
しかし
count というメソッドはありません。

00:05:02.250 --> 00:05:03.080 align:middle
作りましょう。

00:05:03.247 --> 00:05:05.360 align:middle
「Create」をします。
どのクラスに作りましょうか？

00:05:05.527 --> 00:05:09.000 align:middle
これも Counter クラスの
accessing プロトコルに作ります。

00:05:09.460 --> 00:05:14.310 align:middle
アクセサーなので。

00:05:14.477 --> 00:05:18.260 align:middle
ここで
このシステムの賢さがわかります。

00:05:18.427 --> 00:05:21.680 align:middle
システムは count という
インスタンス変数があることに気付き

00:05:21.847 --> 00:05:26.000 align:middle
count というメソッドを作りたいことから

00:05:27.120 --> 00:05:29.240 align:middle
アクセサーを提案します。

00:05:29.410 --> 00:05:30.140 align:middle
私が欲しいのはこの通りのものです。

00:05:30.307 --> 00:05:31.050 align:middle
これで Proceed できます。

00:05:32.440 --> 00:05:33.350 align:middle
どうでしょう？

00:05:33.517 --> 00:05:37.750 align:middle
テストはグリーンです。
テストがグリーンで

00:05:37.917 --> 00:05:42.050 align:middle
私のクラスに2つのメソッドが作られました。

00:05:44.240 --> 00:05:45.470 align:middle
同じことを increment についても
行います。

00:05:49.640 --> 00:05:51.100 align:middle
実際、私は

00:05:51.267 --> 00:05:54.490 align:middle
メソッドが何をしなければならないか
仕様を示して

00:05:54.657 --> 00:05:56.240 align:middle
実際にそうなるかを検査します。

00:05:58.360 --> 00:06:03.090 align:middle
ここで 9 になるはずです。
コンパイルして実行します。

00:06:03.300 --> 00:06:07.730 align:middle
するとシステムが言ってきます。
「increment メソッドがわかりません」

00:06:07.897 --> 00:06:12.490 align:middle
はい、それが正常です。
Create をします。operation。

00:06:15.960 --> 00:06:19.950 align:middle
incrementでは
count

00:06:20.750 --> 00:06:25.230 align:middle
:= count + 1
コンパイルします。

00:06:27.080 --> 00:06:29.570 align:middle
Proceed します。
テストができました。

00:06:30.370 --> 00:06:31.760 align:middle
このまま decrement を作ります.

00:06:31.927 --> 00:06:36.050 align:middle
実践してください。

00:06:39.520 --> 00:06:43.120 align:middle
ここで 5 になるはずです。
テストを定義します。

00:06:45.460 --> 00:06:46.750 align:middle
メソッドを定義します。

00:06:51.480 --> 00:06:55.000 align:middle
OK。お分かりでしょう
count := count - 1

00:07:00.330 --> 00:07:01.660 align:middle
デバッガの中でコンパイルします。

00:07:01.827 --> 00:07:05.640 align:middle
Proceed をクリックすると
テストはグリーンです。

00:07:05.807 --> 00:07:10.060 align:middle
これで2つの操作が定義されました。
increment と decrement です。

00:07:10.420 --> 00:07:11.770 align:middle
保存しましょう。

00:07:12.010 --> 00:07:14.500 align:middle
前にお見せしたのと同じように
保存します。

00:07:15.280 --> 00:07:19.180 align:middle
Save をクリックして

00:07:20.040 --> 00:07:20.760 align:middle
書きます。
「アクセサーと

00:07:25.740 --> 00:07:29.430 align:middle
decrement と increment
テストはグリーン」

00:07:29.597 --> 00:07:34.000 align:middle
これでできました。
保存しました。

00:07:47.250 --> 00:07:47.883 align:middle
これで良しと。

00:07:49.100 --> 00:07:52.860 align:middle
このレッスンで
覚えておくべき重要なことは

00:07:53.390 --> 00:07:58.250 align:middle
デバッガーがオブジェクトの状態への
アクセスを提供すること

00:07:58.417 --> 00:08:02.340 align:middle
デバッガーが呼び出しコンテキストの
正しい位置にあなたを据えて

00:08:02.507 --> 00:08:04.460 align:middle
その呼び出しコンテキストを使って
必要な情報を得ること。

00:08:04.627 --> 00:08:07.390 align:middle
コードを書くために必要な情報です。

00:08:07.557 --> 00:08:08.690 align:middle
そして、この方法が本当にとても
パワフルだということです。

