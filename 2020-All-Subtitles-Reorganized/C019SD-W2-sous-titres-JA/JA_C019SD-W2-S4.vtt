WEBVTT

00:00:00.120 --> 00:00:02.360 align:middle
このセッションでは
2つのことをお教えします。

00:00:02.520 --> 00:00:06.840 align:middle
シーケンスとカスケードです。
どちらも Pharo ではよく使われています。

00:00:07.520 --> 00:00:13.000 align:middle
一連のメッセージを書くことがよくあります。

00:00:13.160 --> 00:00:14.640 align:middle
それらのメッセージには区切りが必要です。

00:00:14.800 --> 00:00:17.800 align:middle
例にあるように
ピリオドで区切ります。

00:00:17.960 --> 00:00:22.600 align:middle
ここにあるように
Transcript cr.

00:00:22.760 --> 00:00:27.760 align:middle
トランスクリプト(Transcript)は
メッセージを記録する簡単なツールです。

00:00:27.920 --> 00:00:31.400 align:middle
改行したい。
1というオブジェクトを表示したい。

00:00:32.320 --> 00:00:36.360 align:middle
2を表示したい。
ピリオドを使います。

00:00:37.040 --> 00:00:39.800 align:middle
表現式はピリオドで区切ります。

00:00:41.600 --> 00:00:44.160 align:middle
別の例を見てみましょう。

00:00:44.320 --> 00:00:47.320 align:middle
2つのローカル変数を定義しました。

00:00:47.960 --> 00:00:51.640 align:middle
ワークステーションを定義しました。
ネットワークシミュレータです。

00:00:51.800 --> 00:00:55.600 align:middle
この表現式の末尾にピリオドを書きます。

00:00:55.760 --> 00:00:59.600 align:middle
そして次の表現式が続きます。
ここでピリオドを使うこともできます。

00:00:59.760 --> 00:01:03.520 align:middle
説明した通り、ピリオドは区切りです。
終末記号ではありません。

00:01:03.680 --> 00:01:06.560 align:middle
Javaでは必ずセミコロンをつけなければなりません。

00:01:06.720 --> 00:01:08.480 align:middle
Pharoでは必ずしもピリオドは必要ありません。

00:01:09.840 --> 00:01:14.680 align:middle
初心者はちょっと戸惑うかもしれませんが

00:01:14.840 --> 00:01:19.280 align:middle
パイプ(縦棒)はローカル変数の定義です。

00:01:19.440 --> 00:01:21.320 align:middle
これについては別のレッスンで説明します。

00:01:21.480 --> 00:01:23.880 align:middle
ここではピリオドは使いません。

00:01:24.040 --> 00:01:27.480 align:middle
通常、まずはローカル変数を定義してから
表現式が始まります。

00:01:27.640 --> 00:01:30.400 align:middle
最初の表現式の後で
ピリオドを使います。

00:01:30.560 --> 00:01:32.680 align:middle
それとは別に

00:01:32.840 --> 00:01:37.320 align:middle
同じオブジェクトにいくつかのメッセージを
送りたいことがしばしばあります。

00:01:37.480 --> 00:01:41.000 align:middle
億劫なので
レシーバーを何度も繰り返したくはありません。

00:01:41.160 --> 00:01:42.600 align:middle
これを見てください。

00:01:42.760 --> 00:01:46.280 align:middle
Transcript cr. 続いて
Transcript show: Transcript...

00:01:46.440 --> 00:01:49.720 align:middle
もう3回も Transcript と言いました。

00:01:49.880 --> 00:01:52.600 align:middle
そこでカスケードを使うことができます。
セミコロンを使います。

00:01:52.760 --> 00:01:54.720 align:middle
Transcript cr;
と書いて

00:01:54.880 --> 00:01:58.000 align:middle
トランスクリプトに cr メッセージを送ります。

00:01:58.160 --> 00:01:59.480 align:middle
カスケードは

00:01:59.640 --> 00:02:04.120 align:middle
「ここから、全てのメッセージは最初のメッセージの
レシーバーと同じオブジェクトに送られます」という意味です。

00:02:04.280 --> 00:02:07.120 align:middle
Transcript に show: 1 が送られ

00:02:07.280 --> 00:02:08.920 align:middle
そして show: 2 が Transcript に送られます。

00:02:09.560 --> 00:02:12.640 align:middle
ややこしい部分なので
もう一度説明します。

00:02:14.320 --> 00:02:17.400 align:middle
最初のメッセージを通常通りに送ります。

00:02:17.560 --> 00:02:21.520 align:middle
ピリオドの代わりにセミコロンを使います。

00:02:21.680 --> 00:02:25.280 align:middle
セミコロンはそれぞれのメッセージが最初と同じ
レシーバーに送られることを意味します。

00:02:25.440 --> 00:02:27.280 align:middle
show: 1 が同じレシーバーに送られます。

00:02:27.440 --> 00:02:30.600 align:middle
セミコロンは
show: 2 が同じレシーバーに送られるという意味です。

00:02:32.240 --> 00:02:36.520 align:middle
別の例です。
コレクションを作りたいとします。

00:02:36.680 --> 00:02:40.720 align:middle
コレクションが手元にあって
変数 c を定義します。

00:02:40.880 --> 00:02:44.480 align:middle
c のコレクションに書き込みます。
ここにピリオドがありますね？

00:02:44.640 --> 00:02:47.240 align:middle
1 と 2 をコレクションに追加(add)します。

00:02:47.400 --> 00:02:49.960 align:middle
これら2つの式は同じ形をしています。

00:02:50.120 --> 00:02:52.920 align:middle
つまり
OrderedCollection new

00:02:53.080 --> 00:02:57.240 align:middle
としてコレクションを作って、それから最初のメッセージ
add: 1 を送って要素を追加します。

00:02:57.400 --> 00:03:01.360 align:middle
セミコロンがあるので
このメッセージはこのコレクションに送られます。

00:03:01.520 --> 00:03:04.080 align:middle
Pharo 初心者の皆さんへのアドバイスですが

00:03:04.240 --> 00:03:07.080 align:middle
無理にカスケードを使わないでください。

00:03:07.240 --> 00:03:10.240 align:middle
カスケードを説明するのは
あなたがきっとコードを読むからです。

00:03:10.400 --> 00:03:12.120 align:middle
カスケードはコードの中で使われています。

00:03:12.280 --> 00:03:16.360 align:middle
もしこの構文やピリオドに違和感なく
気持ちよく付き合えるようになったら

00:03:16.520 --> 00:03:20.320 align:middle
もっと柔軟になって

00:03:20.480 --> 00:03:23.640 align:middle
カスケードを使うことを考えるようになるでしょう。
私もそうやって学びました。

00:03:23.800 --> 00:03:27.160 align:middle
1歩ずつ進んでいきましょう。

00:03:27.320 --> 00:03:29.160 align:middle
今回、何を学んだでしょう？

00:03:29.320 --> 00:03:33.360 align:middle
. は区切り記号です。
およそ Java の ; のようなものです。

00:03:33.520 --> 00:03:38.840 align:middle
; はカスケードです。
同じレシーバーを繰り返し書くことを避けるのに有効です。

00:03:39.000 --> 00:03:43.640 align:middle
カスケードの値は
最後に送られたメッセージの返り値です。

