WEBVTT

00:00:00.440 --> 00:00:01.520 align:middle
みなさん
こんにちは。

00:00:01.680 --> 00:00:06.040 align:middle
このクラスでは

00:00:06.200 --> 00:00:11.880 align:middle
Pharo を別の OOP 言語である Java と
対比します。

00:00:12.520 --> 00:00:16.040 align:middle
Pharo では
オブジェクトのみを操作します。

00:00:16.200 --> 00:00:20.200 align:middle
メッセージと

00:00:20.360 --> 00:00:22.640 align:middle
変数への代入だけを行います。

00:00:23.280 --> 00:00:27.440 align:middle
これからお見せするスライドでは
Java と Pharo の等価なものをいくつか見せします。

00:00:27.600 --> 00:00:30.720 align:middle
そこから違いと類似点を理解していただきます。

00:00:30.880 --> 00:00:32.360 align:middle
そこでは

00:00:33.080 --> 00:00:35.840 align:middle
Java で文字列を格納したコレクションを

00:00:36.000 --> 00:00:38.840 align:middle
つくります。

00:00:39.000 --> 00:00:43.560 align:middle
このコレクションは
stringsと呼ばれる変数に代入されます。

00:00:44.920 --> 00:00:46.560 align:middle
Pharo も同じです。

00:00:46.720 --> 00:00:49.240 align:middle
コレクションを管理するクラスは

00:00:49.400 --> 00:00:52.120 align:middle
OrderedCollection と呼ばれるもので
ArrayList ではありません。

00:00:52.280 --> 00:00:54.240 align:middle
しかし振る舞いは同じです。

00:00:54.400 --> 00:00:56.640 align:middle
幾つか気付くべき点を挙げます。

00:00:57.560 --> 00:01:02.960 align:middle
第1に Pharo では
new はクラスに送られるメッセージです。

00:01:03.120 --> 00:01:06.280 align:middle
new メッセージが
OrderedCollection クラスに送られ

00:01:06.440 --> 00:01:09.000 align:middle
そのコレクションの
新しいインスタンスが生成されます。

00:01:09.160 --> 00:01:11.440 align:middle
Java では先に new が現れます。

00:01:11.600 --> 00:01:14.320 align:middle
この構文は Java での

00:01:15.280 --> 00:01:18.360 align:middle
オブジェクト生成に特有のものです。

00:01:18.520 --> 00:01:21.640 align:middle
一方で Pharo では
標準的なメッセージ送信で行われます。

00:01:22.920 --> 00:01:26.960 align:middle
Pharo には静的型付けがありません。

00:01:27.120 --> 00:01:31.840 align:middle
Java で必要とされる多くのことが
Pharo では使われません。

00:01:32.000 --> 00:01:36.280 align:middle
コレクションが格納するのが文字列であることを
指定する必要はありません。

00:01:36.440 --> 00:01:40.360 align:middle
そして strings はコレクションではありません。

00:01:41.120 --> 00:01:46.480 align:middle
もう1つ等価な式があります。
子プロセスの生成です。

00:01:47.080 --> 00:01:50.960 align:middle
このコード片を別のプロセスで

00:01:51.120 --> 00:01:52.720 align:middle
実行します。

00:01:52.880 --> 00:01:56.000 align:middle
Java では
Thread クラスの新しいインスタンスを

00:01:56.160 --> 00:01:59.400 align:middle
生成する必要があります。

00:01:59.560 --> 00:02:01.920 align:middle
Runnable()を引数として与えて。

00:02:02.760 --> 00:02:04.680 align:middle
new Runnable()と書きます。

00:02:04.840 --> 00:02:09.960 align:middle
Runnable() は抽象クラスなので
未実装のメソッドを定義しなければなりません。

00:02:10.800 --> 00:02:13.160 align:middle
このメソッドは run() と呼ばれます。

00:02:13.320 --> 00:02:17.440 align:middle
そのメソッドが
子プロセスとして実行したいコードを保持します。

00:02:17.600 --> 00:02:19.640 align:middle
this.doSomething() です。

00:02:20.960 --> 00:02:25.520 align:middle
doSomething メソッドはそのコードと

00:02:25.680 --> 00:02:27.680 align:middle
同じクラスに属します。

00:02:28.400 --> 00:02:31.520 align:middle
Pharo では
ずっと簡単な構文です。

00:02:32.680 --> 00:02:37.720 align:middle
同じことをするコードがこれです。

00:02:39.160 --> 00:02:41.440 align:middle
末尾の

00:02:42.360 --> 00:02:46.880 align:middle
この start で子プロセスを立ち上げます。

00:02:47.040 --> 00:02:50.680 align:middle
これを fork というメッセージを

00:02:50.840 --> 00:02:53.440 align:middle
このブロックに送ることで実行します。

00:02:54.320 --> 00:02:58.760 align:middle
Java の最新版である Java 8 からは

00:02:58.920 --> 00:03:02.080 align:middle
Java の構文がずいぶんと改善されました。

00:03:02.240 --> 00:03:05.480 align:middle
見ての通り
Java のコードがずいぶん明瞭になりました。

00:03:06.280 --> 00:03:10.200 align:middle
このブロックと等価なのが

00:03:10.360 --> 00:03:14.280 align:middle
ここにあるレキシカルクロージャです。

00:03:15.200 --> 00:03:19.080 align:middle
残りは前のスライドと同じです。

00:03:19.240 --> 00:03:22.080 align:middle
Pharo では
3種類のメッセージがあります。

00:03:22.240 --> 00:03:23.760 align:middle
単項メッセージは

00:03:23.920 --> 00:03:27.840 align:middle
引数なしでレシーバーに適用されます。

00:03:28.000 --> 00:03:32.040 align:middle
前に出た factorial メソッドや

00:03:32.800 --> 00:03:35.880 align:middle
コンソールに空行を表示する

00:03:36.040 --> 00:03:40.160 align:middle
cr 等です。

00:03:41.120 --> 00:03:45.400 align:middle
二項メッセージは
1つの値を引数として

00:03:45.560 --> 00:03:48.240 align:middle
レシーバーに適用されます。

00:03:48.400 --> 00:03:51.600 align:middle
例えば
演算子です。

00:03:51.760 --> 00:03:54.320 align:middle
3と4を足す「+」のような。

00:03:54.480 --> 00:03:58.560 align:middle
-> はキーと値のペアを生成する
ために使われます。

00:03:58.720 --> 00:04:02.560 align:middle
5->10 は 5 と 10 のペアを作ります。

00:04:04.200 --> 00:04:06.840 align:middle
3種類目のメッセージは
キーワードです。

00:04:07.000 --> 00:04:10.520 align:middle
キーワードメッセージは1つ、2つ、3つ
あるいはそれ以上の数の引数を取ります。

00:04:11.160 --> 00:04:13.320 align:middle
キーワードはコロンで区切られます。

00:04:14.600 --> 00:04:18.920 align:middle
ここにキーワードメッセージ show: があります。
Transcript オブジェクトに送られて

00:04:19.080 --> 00:04:22.240 align:middle
コンソールに表示する文字列を
引数として取ります。

00:04:22.800 --> 00:04:26.240 align:middle
2つ目の例は
between:and: メッセージです。

00:04:26.400 --> 00:04:29.360 align:middle
これは2つのキーワードに分けられた
1つのメッセージです。

00:04:29.520 --> 00:04:34.000 align:middle
2つの引数を取って
1つのレシーバーに適用されます。

00:04:34.160 --> 00:04:38.520 align:middle
between:and: メッセージは
オブジェクト「2」に適用されます。

00:04:38.680 --> 00:04:40.920 align:middle
そして0と5を引数として取ります。

00:04:41.960 --> 00:04:44.320 align:middle
Java と比較すると

00:04:44.480 --> 00:04:48.120 align:middle
特にキーワードメッセージについては

00:04:48.280 --> 00:04:51.840 align:middle
Java とはとても違っています。

00:04:52.800 --> 00:04:56.960 align:middle
Java では1つのレシーバーがあり、
1つのピリオドがあり

80 align:middle
00:04:57,720 --> 00:05:00,560
オブジェクトに送られるメッセージ
の名前があり

00:05:00.720 --> 00:05:04.200 align:middle
そして括弧に囲まれてコンマで区切られた
引数があります。

00:05:05.440 --> 00:05:07.800 align:middle
Pharoでは同じことを表現するために

00:05:09.560 --> 00:05:14.120 align:middle
メソッドの名前から
キーワードを区切って

00:05:14.280 --> 00:05:16.720 align:middle
引数をその中に置きます。

00:05:16.880 --> 00:05:18.520 align:middle
例えば

00:05:19.600 --> 00:05:24.040 align:middle
手紙(mail)を受取人(recipient)へ送るために

00:05:24.200 --> 00:05:27.840 align:middle
郵便屋さん(postman)に send メッセージを送ります。

00:05:28.000 --> 00:05:30.200 align:middle
これが Java の構文です。

00:05:30.360 --> 00:05:34.040 align:middle
これを徐々に分解していって
最終的に Pharo の構文にします。

00:05:34.200 --> 00:05:35.640 align:middle
1ステップ目:

00:05:35.800 --> 00:05:40.320 align:middle
Java 構文に属する部分を抽出します。

00:05:41.120 --> 00:05:45.320 align:middle
ピリオド、括弧、コンマ
そしてセミコロンです。

00:05:46.680 --> 00:05:48.000 align:middle
それらを取り払いましょう。

00:05:48.160 --> 00:05:51.360 align:middle
するとこうなります。
postman send mail recipient

00:05:51.520 --> 00:05:54.600 align:middle
これを読みやすいように
1つの英文にします。

00:05:54.760 --> 00:05:59.120 align:middle
postman send mail to recipient
読みやすくなりました。

00:05:59.280 --> 00:06:02.440 align:middle
Pharo の構文として正しくなるように
コロンを追加します。

00:06:04.640 --> 00:06:08.680 align:middle
メッセージは1つ。
send:to: で、postmanに適用されます。

00:06:08.840 --> 00:06:14.320 align:middle
このメッセージは引数を2つ取ります。
mail と recipient です。

00:06:14.480 --> 00:06:18.560 align:middle
if や else などの条件分岐や

00:06:18.720 --> 00:06:22.280 align:middle
do や for 等のループは

00:06:22.440 --> 00:06:26.560 align:middle
Java ではキーワードです。
Pharo ではそうではありません。

00:06:26.720 --> 00:06:31.800 align:middle
それらは言語やコンパイラが定義する
特定の単語ではありません。

00:06:31.960 --> 00:06:36.760 align:middle
それらは単にメソッドであり
ある種のオブジェクトに送られるメッセージです。

00:06:36.920 --> 00:06:41.240 align:middle
Pharo では、例えば
if を実行するためには

00:06:41.880 --> 00:06:44.160 align:middle
ifTrue:ifFalse: メッセージを送ります。

00:06:44.320 --> 00:06:47.600 align:middle
これは1つの真偽値(Boolean)に
送られるメッセージです。

00:06:47.760 --> 00:06:51.840 align:middle
2つのブロックを引数として取ります。
1つはもし真偽値がtrueの時に実行されて

00:06:52.000 --> 00:06:54.320 align:middle
もう1つは真偽値がfalseの時に実行されます。

00:06:54.920 --> 00:06:58.800 align:middle
同様に、ループは単にある種のオブジェクトに
送られるメソッドに過ぎません。

00:06:58.960 --> 00:07:00.640 align:middle
1つ目の例では

00:07:02.080 --> 00:07:03.560 align:middle
4 は数値オブジェクトです。

00:07:03.720 --> 00:07:07.320 align:middle
timesRepeat:メッセージを
ブロックを引数として送ることができます。

00:07:08.040 --> 00:07:12.520 align:middle
対応するメソッドがブロックを

00:07:13.920 --> 00:07:17.280 align:middle
レシーバが表す通りの回数だけ実行します。

00:07:17.840 --> 00:07:22.200 align:middle
4 timesRepeat: は
何かを4回実行します。

00:07:23.320 --> 00:07:27.280 align:middle
同様に、to:do: は
数に送られるメッセージです。

00:07:27.440 --> 00:07:29.960 align:middle
1つの数と1つのブロックを
引数として取ります。

00:07:30.120 --> 00:07:34.760 align:middle
ブロックの引数である i は

00:07:34.920 --> 00:07:37.440 align:middle
0から100までの各値を取ります。

00:07:38.840 --> 00:07:40.080 align:middle
同様に

00:07:41.120 --> 00:07:43.000 align:middle
to:by:do: メッセージは

00:07:44.320 --> 00:07:49.120 align:middle
0から100までの3の倍数を

00:07:49.280 --> 00:07:53.080 align:middle
値として選びます。
0、3、6、9、等。

00:07:55.480 --> 00:07:58.600 align:middle
最後に
do: はコレクションに送られるメッセージで

00:07:58.760 --> 00:08:02.160 align:middle
Java の foreachループと同じです。

00:08:02.320 --> 00:08:06.760 align:middle
do: メッセージはコレクションの
各要素についてブロックを実行します。

00:08:07.680 --> 00:08:10.920 align:middle
変数 each は

00:08:11.080 --> 00:08:14.480 align:middle
最初にコレクションの

00:08:14.640 --> 00:08:16.320 align:middle
1番目の値を取ります。

00:08:16.480 --> 00:08:19.640 align:middle
ブロックが
このeachの値を使って実行されて

00:08:19.800 --> 00:08:23.360 align:middle
それから each は
コレクションの2番目の要素を取ります。

00:08:23.520 --> 00:08:27.880 align:middle
この値でブロックが実行されて
コレクションの最後まで繰り返されます。

00:08:28.480 --> 00:08:31.560 align:middle
まとめると
3種類のメッセージがあります。

00:08:31.720 --> 00:08:34.600 align:middle
単項メッセージ、二項メッセージ
そしてキーワードメッセージ。

00:08:35.160 --> 00:08:37.400 align:middle
優先順位は

00:08:37.560 --> 00:08:40.280 align:middle
最初に括弧の中が実行されます。

00:08:40.440 --> 00:08:44.800 align:middle
そして単項メッセージ
そして二項メッセージ、そしてキーワード。

00:08:45.840 --> 00:08:47.600 align:middle
条件分岐やループは

00:08:47.760 --> 00:08:51.200 align:middle
ある種のオブジェクトへのメッセージです。

00:08:51.360 --> 00:08:54.240 align:middle
Java 等の他の言語では

00:08:54.400 --> 00:08:56.800 align:middle
それらは言語の特殊なキーワードで

00:08:56.960 --> 00:09:00.480 align:middle
コンパイラへの特定の指示ですが

00:09:00.640 --> 00:09:03.760 align:middle
Pharo では、それらは
特定のオブジェクトへのメッセージです。

