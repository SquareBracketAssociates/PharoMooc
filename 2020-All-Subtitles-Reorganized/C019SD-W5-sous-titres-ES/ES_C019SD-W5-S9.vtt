WEBVTT

00:00:00.720 --> 00:00:05.440 align:middle
Hola, en este curso te mostraré
Cómo perfilar una aplicación en Pharo.

00:00:05.600 --> 00:00:08.640 align:middle
Eso significa medir
la ejecución de expresiones

00:00:08.800 --> 00:00:11.320 align:middle
para ver si podemos reemplazar
ellos con otros para ganar tiempo,

00:00:11.480 --> 00:00:13.520 align:middle
durante la ejecución de un programa.

00:00:14.560 --> 00:00:18.360 align:middle
Básicamente, lo que dice la gente es,
si nunca has perfilado

00:00:18.520 --> 00:00:22.920 align:middle
una aplicación que podrías
aumentar las velocidades en un 40-50%.

00:00:23.080 --> 00:00:26.240 align:middle
No estoy convencido.
No lo sé, no tengo pruebas.

00:00:26.400 --> 00:00:29.160 align:middle
Pero puedo mostrarte las herramientas en Pharo

00:00:29.320 --> 00:00:32.160 align:middle
por hacer este perfil.

00:00:32.320 --> 00:00:35.800 align:middle
La primera expresión en Pharo
es "timeToRun".

00:00:35.960 --> 00:00:38.320 align:middle
Es un mensaje que enviamos a un bloque,

00:00:38.480 --> 00:00:40.720 align:middle
que nos dará el tiempo de ejecución
de una expresion

00:00:40.880 --> 00:00:43.680 align:middle
Entonces, aquí en "1000 factorial",

00:00:43.840 --> 00:00:48.120 align:middle
Quiero medir el tiempo de ejecución.
de "1000 factorial", lo puse en un bloque

00:00:48.280 --> 00:00:50.600 align:middle
y envío el mensaje,
"Hora de correr".

00:00:50.760 --> 00:00:55.120 align:middle
Ahora que tenemos 'timeToRun'
es fácil comparar 2 ejecuciones.

00:00:55.280 --> 00:00:57.520 align:middle
Aquí hay un pequeño ejercicio:

00:00:57.680 --> 00:01:00.720 align:middle
Si hago "select" seguido de "collect",

00:01:00.880 --> 00:01:05.280 align:middle
¿Es más lento que "select:thenCollect",

00:01:05.440 --> 00:01:08.400 align:middle
sabiendo que esto implica dos pases

00:01:08.560 --> 00:01:10.600 align:middle
en el primer caso
y uno en el segundo.

00:01:10.760 --> 00:01:14.120 align:middle
Entonces, creo que llevará más tiempo,
pero vamos a verificar.

00:01:14.840 --> 00:01:17.560 align:middle
¿Qué debo hacer?
Yo creo mi colección en ambos casos,

00:01:17.720 --> 00:01:21.920 align:middle
Estoy buscando, creo mi colección
con 10 elementos, una pequeña colección,

00:01:22.080 --> 00:01:26.200 align:middle
y lo que haré es crear
un cierto número de veces,

00:01:27.360 --> 00:01:31.000 align:middle
Voy a hacer un bucle para que pueda correr
Las expresiones varias veces.

00:01:31.160 --> 00:01:32.960 align:middle
Puedes ver, en la primera parte,

00:01:33.120 --> 00:01:38.000 align:middle
Tengo mi colección,
Selecciono cada elemento mayor de 5,

00:01:38.160 --> 00:01:41.920 align:middle
y luego cuadraré
los elementos que he seleccionado,

00:01:42.080 --> 00:01:45.960 align:middle
y en la segunda expresión, diré,
¿Qué quiero seleccionar?

00:01:46.120 --> 00:01:49.840 align:middle
Todo más grande que 5,
y los cuadraré.

00:01:50.000 --> 00:01:53.360 align:middle
Vemos que el sistema me dice
eso es 500 milisegundos,

00:01:53.520 --> 00:01:57.320 align:middle
y eso es 300 milisegundos.
La segunda expresión es mejor.

00:01:57.480 --> 00:01:59.960 align:middle
Ves cómo funciona,
Depende de ti hacerlo.

00:02:00.120 --> 00:02:05.800 align:middle
Tenga en cuenta que a veces estamos obligados
para poner bucles muy grandes dentro,

00:02:06.560 --> 00:02:11.600 align:middle
para amplificar la medición,
para ambos casos, por supuesto.

00:02:12.080 --> 00:02:16.800 align:middle
De lo contrario, hay otra operación,
otro mensaje llamado "banco".

00:02:16.960 --> 00:02:20.520 align:middle
"Bench" nos dirá
¿Cuántas veces el código,

00:02:20.680 --> 00:02:26.240 align:middle
que se está estudiando,
se ejecuta durante 5 segundos.

00:02:27.560 --> 00:02:31.560 align:middle
Tomo mi "banco factorial 1000"
ejemplo de nuevo, y puedo ejecutarlo

00:02:31.720 --> 00:02:33.840 align:middle
610,000 veces por segundo.

00:02:34.000 --> 00:02:37.000 align:middle
En este caso, si así lo deseamos,
también podemos hacerlo

00:02:37.160 --> 00:02:39.320 align:middle
que la cifra sea lo más alta posible.

00:02:39.480 --> 00:02:42.680 align:middle
También hay una variante
de banco, "benchFor"

00:02:42.840 --> 00:02:46.800 align:middle
donde puede especificar el tamaño.
Lo que es interesante ver

00:02:46.960 --> 00:02:50.000 align:middle
es que "2 segundos",
es realmente el "segundo" mensaje,

00:02:50.160 --> 00:02:54.920 align:middle
que se envía al mensaje 2,
que nos dará una duración,

00:02:55.080 --> 00:02:57.480 align:middle
una instancia de la clase Duración

00:02:58.120 --> 00:03:01.080 align:middle
y que controlará
cuánto tiempo funciona el sistema

00:03:01.240 --> 00:03:04.960 align:middle
Esto te muestra una vez más
que todo es un objeto en Pharo.

00:03:05.120 --> 00:03:09.240 align:middle
Configuré los segundos en 2 segundos.
Envío el mensaje "segundo" al objeto 2.

00:03:10.600 --> 00:03:15.080 align:middle
Lo que tienes a continuación,
También hay lo que llamamos un "perfilador",

00:03:15.240 --> 00:03:16.880 align:middle
que se basa en el muestreo.

00:03:17.040 --> 00:03:20.520 align:middle
Lo que sucederá es,
ejecutarás tu programa,

00:03:20.680 --> 00:03:23.880 align:middle
y se realizará a intervalos regulares

00:03:24.040 --> 00:03:26.400 align:middle
para inspeccionar la pila de ejecución,

00:03:26.560 --> 00:03:29.040 align:middle
mira lo que hay en la pila
y recopilar información.

00:03:29.200 --> 00:03:33.760 align:middle
Entonces, ¿cómo lo mencionamos?
Hacemos "timeProfiler, spyOn"

00:03:33.920 --> 00:03:37.800 align:middle
y lo pasaremos un bloque.
Quiero repetir 20 veces

00:03:37.960 --> 00:03:39.680 align:middle
que mostraré en la transcripción,

00:03:39.840 --> 00:03:42.000 align:middle
"1000 factorial",

00:03:42.160 --> 00:03:45.920 align:middle
que convierto en una cuerda,
que generalmente cuesta más.

00:03:46.080 --> 00:03:50.480 align:middle
Después de eso, el profiler nos dará
este tipo de resultado,

00:03:50.640 --> 00:03:55.080 align:middle
con un árbol que nos muestra las ramas
entre los cuales hemos pasado la mayor parte del tiempo.

00:03:55.240 --> 00:04:00.000 align:middle
Nos muestra que pasamos el 63% de las veces.
en el método "printOn:base".

00:04:01.040 --> 00:04:03.240 align:middle
Es solo para mostrarte que está ahí.

00:04:03.400 --> 00:04:06.960 align:middle
Hay un perfilador con el que puedes jugar
si te interesa

00:04:07.960 --> 00:04:09.240 align:middle
Entonces, para resumir,

00:04:09.480 --> 00:04:10.640 align:middle
para empezar,

00:04:10.800 --> 00:04:14.600 align:middle
Puedes usar "timeToRun",
"banco" y el perfilador.

00:04:14.760 --> 00:04:19.280 align:middle
Hay un capítulo en el libro
"En lo profundo de Pharo" mostrando este tipo

00:04:19.440 --> 00:04:22.560 align:middle
de la técnica de optimización.

00:04:22.720 --> 00:04:26.240 align:middle
Solo quería señalar,
como ves en estos 3 ejemplos,

00:04:26.400 --> 00:04:30.440 align:middle
siempre usamos bloques.
Este es un bloque ...

00:04:30.600 --> 00:04:33.400 align:middle
Este es un bloque también ... ¿Por qué?

00:04:33.560 --> 00:04:36.680 align:middle
Lo viste en el curso
en bloques que te permiten

00:04:36.840 --> 00:04:39.520 align:middle
para congelar la expresión,
la definición del bloque

00:04:39.680 --> 00:04:42.560 align:middle
no ejecuta y da "banco"
la posibilidad

00:04:42.720 --> 00:04:44.920 align:middle
de controlar
la cantidad de ejecuciones

00:04:45.080 --> 00:04:48.080 align:middle
o decidir cuándo se ejecuta
del programa comenzará.

00:04:48.240 --> 00:04:50.080 align:middle
La otra cosa que diría es:

00:04:50.240 --> 00:04:54.680 align:middle
descubra cómo "timeToRun"
y "banco" están implementados.

00:04:54.840 --> 00:04:57.520 align:middle
Para hacer eso, haz clic en Expresión

00:04:57.680 --> 00:05:00.840 align:middle
y hacer "navegar" o "implementar"
y verás el código.

