WEBVTT

00:00:00.520 --> 00:00:04.840 align:middle
Hola, en esta secuencia miraremos
en el marco de prueba SUnit en Pharo,

00:00:05.000 --> 00:00:08.720 align:middle
que nos permiten escribir pruebas unitarias,
como vas a ver

00:00:08.880 --> 00:00:13.200 align:middle
Se utiliza un marco de prueba
para apoyar el desarrollo ágil.

00:00:13.360 --> 00:00:16.560 align:middle
La idea es hacer incremental
desarrollo y prueba

00:00:16.720 --> 00:00:18.720 align:middle
su código regularmente para verificar

00:00:18.880 --> 00:00:23.240 align:middle
que al modificarlo no hemos roto
una propiedad o invariante en el código.

00:00:23.400 --> 00:00:25.240 align:middle
Queremos estar preparados para los cambios.

00:00:25.400 --> 00:00:28.160 align:middle
Escribimos pruebas y luego modificamos nuestros códigos.

00:00:28.320 --> 00:00:30.520 align:middle
entonces podemos volver a ejecutar las pruebas

00:00:30.680 --> 00:00:33.680 align:middle
para verificar que no hemos roto o modificado
todo lo que no deberíamos tener

00:00:33.880 --> 00:00:38.520 align:middle
Las pruebas automáticas son muy importantes.
en el apoyo a este tipo de programación.

00:00:38.680 --> 00:00:42.680 align:middle
El marco SUnit es
Un marco especial para escribir pruebas.

00:00:42.840 --> 00:00:46.400 align:middle
Los hace más fáciles de escribir.
Está en 4 clases, es muy simple.

00:00:46.560 --> 00:00:48.960 align:middle
Fue originalmente
desarrollado por Kent Beck,

00:00:49.120 --> 00:00:52.960 align:middle
y ha inspirado numerosas pruebas
en otros idiomas,

00:00:53.120 --> 00:00:55.040 align:middle
como JUnit, por ejemplo.

00:00:55.840 --> 00:00:57.440 align:middle
Entonces, ¿qué es una prueba?

00:00:57.600 --> 00:01:00.080 align:middle
Hay 3 pasos para escribir una prueba:

00:01:00.240 --> 00:01:04.960 align:middle
Primer paso, creamos un contexto,
por ejemplo, un conjunto vacío.

00:01:05.120 --> 00:01:07.480 align:middle
Paso dos, creo un estímulo,

00:01:07.640 --> 00:01:11.960 align:middle
aquí, así que trato de insertar
un elemento dos veces

00:01:12.120 --> 00:01:14.840 align:middle
en el conjunto que acabo de crear,

00:01:15.000 --> 00:01:18.760 align:middle
y el paso tres,
Probar el resultado que obtengo,

00:01:18.920 --> 00:01:23.160 align:middle
lo que significa que espero hasta
el conjunto solo contiene un elemento.

00:01:23.320 --> 00:01:26.960 align:middle
Un objeto conjunto solo puede contener
un elemento una vez

00:01:27.120 --> 00:01:28.680 align:middle
No puede contenerlo dos veces.

00:01:28.840 --> 00:01:32.520 align:middle
Luego pruebo el resultado,
esperando que la variante no se rompa.

00:01:33.120 --> 00:01:35.320 align:middle
Aquí hay un ejemplo.
Para escribir una prueba ...

00:01:35.480 --> 00:01:40.760 align:middle
Debo escribir una subclase de TestCase.
Llamaré a este "SetTestCase".

00:01:40.920 --> 00:01:44.480 align:middle
Es para probar los sets.
Defino el método, "testAdd".

00:01:44.640 --> 00:01:47.240 align:middle
Todos los métodos comienzan con "prueba".

00:01:47.400 --> 00:01:48.960 align:middle
Luego configuré el contexto,

00:01:49.120 --> 00:01:52.200 align:middle
Creo una instancia
de la clase Establecer, que está vacía,

00:01:52.360 --> 00:01:55.840 align:middle
Agrego 2 elementos,
el mismo elemento dos veces ...

00:01:56.000 --> 00:01:59.240 align:middle
Intento agregar el mismo elemento dos veces

00:01:59.400 --> 00:02:03.360 align:middle
al paquete,
así que 5 dos veces, aquí y aquí.

00:02:03.520 --> 00:02:06.000 align:middle
Entonces lo pruebo, he "verificado" aquí,

00:02:06.160 --> 00:02:08.600 align:middle
Utilizo "assert" para hacer esto,

00:02:09.920 --> 00:02:12.840 align:middle
donde verifico que el tamaño de mi set

00:02:13.000 --> 00:02:16.480 align:middle
es 1, que he tenido éxito
en solo agregar el elemento una vez.

00:02:16.640 --> 00:02:19.320 align:middle
Puedo comenzar la prueba gracias a esto ...

00:02:20.720 --> 00:02:24.280 align:middle
Gracias a esta expresion,
entonces mi prueba revelará

00:02:24.440 --> 00:02:28.760 align:middle
Si la varianza, si "asevera",
La expresión pasada aquí es verdadera.

00:02:29.560 --> 00:02:30.880 align:middle
Todos los métodos que comienzan

00:02:31.080 --> 00:02:34.960 align:middle
con la cadena "prueba" representan una prueba,

00:02:35.120 --> 00:02:39.640 align:middle
y se ejecutará automáticamente
por la herramienta de prueba corredor.

00:02:40.440 --> 00:02:44.480 align:middle
Veremos que todos los resultados,
todas las ejecuciones del método de prueba

00:02:44.640 --> 00:02:48.040 align:middle
producir un resultado
Todos estos resultados se recopilan,

00:02:48.200 --> 00:02:52.560 align:middle
y se recogen en
un objeto de instancia de clase, TestResult.

00:02:54.120 --> 00:02:55.760 align:middle
Te daré otro ejemplo.

00:02:55.920 --> 00:02:59.920 align:middle
En este ejemplo, tenemos el método de prueba,
su nombre comienza con "prueba"

00:03:00.080 --> 00:03:03.560 align:middle
en minúscula, y esto
es el nombre de este método,

00:03:03.720 --> 00:03:07.240 align:middle
"AdjacentRunsWithEquals
AtributosAreMerged "

00:03:07.400 --> 00:03:12.960 align:middle
Entonces tenemos el contexto aquí,
Hemos creado un objeto.

00:03:13.120 --> 00:03:14.720 align:middle
Aquí tenemos un estímulo.

00:03:14.880 --> 00:03:18.640 align:middle
Hemos intentado enviar el mensaje
"addLast times"

00:03:18.800 --> 00:03:22.760 align:middle
a este objeto 3 veces,
la primera vez con

00:03:22.920 --> 00:03:26.880 align:middle
la configuración aquí,
y una segunda vez, la misma configuración

00:03:27.040 --> 00:03:28.640 align:middle
la segunda y la tercera vez

00:03:28.800 --> 00:03:31.560 align:middle
Probamos aquí, es el cheque,

00:03:31.720 --> 00:03:35.760 align:middle
que este elemento es el tamaño 2.
¿Todo bien?

00:03:35.960 --> 00:03:40.960 align:middle
No pudimos agregar el mismo
elemento varias veces de forma adyacente.

00:03:41.720 --> 00:03:46.320 align:middle
En la ejecución de una prueba,
pueden ocurrir varios escenarios.

00:03:46.640 --> 00:03:50.720 align:middle
Un escenario es lo que llamamos
una "falla", lo que significa que

00:03:50.880 --> 00:03:53.720 align:middle
una de las aserciones,
una variante que pensamos que era cierta,

00:03:53.880 --> 00:03:56.560 align:middle
lo que debería ser cierto es falso,
en ese caso

00:03:56.720 --> 00:04:01.560 align:middle
La prueba que contiene "falla"

00:04:01.720 --> 00:04:03.600 align:middle
es un problema anticipado

00:04:03.760 --> 00:04:09.240 align:middle
Esperamos que, potencialmente,
este error estaría presente

00:04:09.600 --> 00:04:13.160 align:middle
Después de eso, un error es una condición
No lo comprobamos.

00:04:13.320 --> 00:04:17.240 align:middle
Es algo que sucede,
una excepción que se plantea,

00:04:17.400 --> 00:04:20.480 align:middle
que no esperábamos
al escribir la prueba.

00:04:20.640 --> 00:04:22.480 align:middle
Son 2 casos muy diferentes.

00:04:23.120 --> 00:04:27.640 align:middle
¿Qué hacemos en una prueba?
cuando queremos verificar

00:04:28.480 --> 00:04:32.000 align:middle
que un poco de código
¿plantea una excepción?

00:04:32.160 --> 00:04:36.680 align:middle
Por ejemplo, quiero verificar
que "establecer nuevo eliminar:1"

00:04:36.840 --> 00:04:40.120 align:middle
este trozo de código,
levantará la excepción "NotFound".

00:04:40.280 --> 00:04:42.520 align:middle
Si hago "Establecer nuevo", es un conjunto vacío.

00:04:42.680 --> 00:04:44.640 align:middle
Estoy tratando de tomar un elemento
de un conjunto vacío.

00:04:44.800 --> 00:04:47.600 align:middle
No tiene sentido
Planteará la excepción "No encontrado"

00:04:47.760 --> 00:04:50.800 align:middle
y en mi prueba utilizo "should raise".

00:04:50.960 --> 00:04:53.600 align:middle
Paso un bloque
y en mi evaluación del bloque,

00:04:53.760 --> 00:04:55.240 align:middle
si se levanta una excepción,

00:04:55.400 --> 00:04:59.440 align:middle
y la excepción es Not Found,
la prueba será verde, estará bien.

00:05:00.920 --> 00:05:02.280 align:middle
También puedo probar lo contrario,

00:05:02.440 --> 00:05:04.680 align:middle
que un poco de código no
plantear una excepción

00:05:04.840 --> 00:05:08.440 align:middle
Aquí uso el método
"Yo no debería criar".

00:05:08.600 --> 00:05:12.880 align:middle
Entonces este bit de código no debería
levante la excepción "NotFound".

00:05:14.000 --> 00:05:16.960 align:middle
Podríamos, al escribir muchas pruebas,

00:05:17.120 --> 00:05:19.480 align:middle
darse cuenta de que hay duplicados

00:05:19.640 --> 00:05:21.600 align:middle
al escribir el contexto de la prueba.

00:05:21.920 --> 00:05:23.880 align:middle
Por ejemplo,
aquí he escrito otra prueba

00:05:24.040 --> 00:05:26.120 align:middle
para los conjuntos, una "prueba de las incidencias".

00:05:26.280 --> 00:05:31.800 align:middle
Vemos que aquí, en el contexto,
Voy a recrear un nuevo set vacío.

00:05:31.960 --> 00:05:35.120 align:middle
Cada vez que escribo una prueba, abro un conjunto,

00:05:35.280 --> 00:05:37.880 align:middle
y cada vez que lo hago
"Establecer nuevo" en el contexto.

00:05:38.040 --> 00:05:41.920 align:middle
Nos gustaría no repetir esta línea.
cada vez en todas nuestras pruebas.

00:05:42.080 --> 00:05:45.120 align:middle
Para no tener que repetirlos,
para poder factorizarlo

00:05:45.280 --> 00:05:48.080 align:middle
en otro lugar, tenemos una solución.

00:05:48.240 --> 00:05:52.280 align:middle
La solución SUnit
es usar el método "setUp"

00:05:52.440 --> 00:05:57.160 align:middle
para factorizar todas las inicializaciones
antes de la ejecución de una prueba.

00:05:57.320 --> 00:05:59.680 align:middle
Entonces, lo que realmente sucede es,

00:05:59.840 --> 00:06:02.280 align:middle
En el momento en que se ejecuta una prueba,
justo antes de una prueba,

00:06:02.440 --> 00:06:05.560 align:middle
por lo tanto, un método que comienza
con la cadena de prueba, se ejecuta,

00:06:05.720 --> 00:06:08.760 align:middle
lanzaremos la ejecución
del método "setUp",

00:06:08.960 --> 00:06:11.200 align:middle
y especifique el contexto.

00:06:11.360 --> 00:06:15.320 align:middle
Durante la prueba usaremos los estímulos

00:06:15.480 --> 00:06:17.280 align:middle
y el cheque, las aserciones,

00:06:17.440 --> 00:06:20.200 align:middle
Y al final
de la ejecución de la prueba

00:06:20.360 --> 00:06:22.360 align:middle
si falla o no,

00:06:22.520 --> 00:06:24.880 align:middle
ejecutaremos el método "tearDown",

00:06:25.040 --> 00:06:26.960 align:middle
que nos permitirá limpiar

00:06:27.120 --> 00:06:29.520 align:middle
todos los recursos que
debe ser lanzado

00:06:29.680 --> 00:06:33.360 align:middle
Si miramos la ejecución
de varios métodos de prueba, es fácil,

00:06:33.520 --> 00:06:35.400 align:middle
tendremos la ejecución de "setUp"

00:06:35.560 --> 00:06:37.720 align:middle
el primer método de prueba ejecutado aquí,

00:06:37.880 --> 00:06:41.360 align:middle
la ejecución de "tearDown" para limpiar,
una nueva ejecución de "setUp"

00:06:41.520 --> 00:06:44.720 align:middle
la ejecución de una nueva prueba,
"tearDown", "setUp",

00:06:44.880 --> 00:06:47.760 align:middle
la ejecución de una prueba
y "tearDown".

00:06:47.920 --> 00:06:50.960 align:middle
Esto nos permite factorizar
implementación del contexto,

00:06:51.120 --> 00:06:55.040 align:middle
y limpiar los recursos en dos métodos,
"setUp" y "tearDown".

00:06:56.240 --> 00:06:58.560 align:middle
Cómo se ve?

00:06:58.720 --> 00:07:01.440 align:middle
En nuestro ejemplo,
si tomo "SetTestCase"

00:07:01.600 --> 00:07:04.640 align:middle
Puedo poner en mi lugar
"definir método setUp",

00:07:04.800 --> 00:07:07.320 align:middle
en el que escribo,
"vacío:= Establecer nuevo",

00:07:07.480 --> 00:07:11.840 align:middle
por lo que "vacío" se convierte en una instancia
variable de "SetTestCase",

00:07:12.520 --> 00:07:14.560 align:middle
y luego en mi prueba,
en mi método de prueba,

00:07:14.720 --> 00:07:18.080 align:middle
Puedo usar directamente
la variable de instancia "vacía",

00:07:18.240 --> 00:07:21.880 align:middle
que se inicializó correctamente,
porque antes de la ejecución

00:07:22.040 --> 00:07:26.800 align:middle
de "testOccurence"
Se ejecutó el método "setUp".

00:07:29.680 --> 00:07:33.040 align:middle
Si miramos a la organización
de las clases

00:07:33.200 --> 00:07:37.600 align:middle
dentro del núcleo de SUnit,
como dije, solo hay 4 clases:

00:07:37.760 --> 00:07:41.440 align:middle
por lo que un caso de prueba,
que no es más ni menos

00:07:41.600 --> 00:07:43.560 align:middle
que una prueba que verifica
que ciertas condiciones,

00:07:43.720 --> 00:07:47.000 align:middle
son ciertas en un contexto dado,
por lo que un caso de prueba tiene

00:07:47.960 --> 00:07:50.280 align:middle
un método "setUp"
un método "teardown"

00:07:50.440 --> 00:07:52.840 align:middle
y luego un grupo de métodos de prueba.

00:07:53.000 --> 00:07:57.480 align:middle
Escribimos un "nuevo" todo el tiempo,
las subclases del caso de prueba.

00:07:57.640 --> 00:08:00.520 align:middle
Estos casos de prueba se combinan

00:08:00.680 --> 00:08:05.080 align:middle
en un "TestSuite"

00:08:05.240 --> 00:08:08.560 align:middle
y podemos lanzar la ejecución
de una suite completa.

00:08:08.720 --> 00:08:11.640 align:middle
Cuando ejecutamos la ejecución
de una suite obtenemos un resultado,

00:08:11.800 --> 00:08:16.040 align:middle
y este resultado es una instancia
de "testResult" aquí,

00:08:16.200 --> 00:08:19.120 align:middle
que nos dice
cuantas pruebas han pasado,

00:08:19.280 --> 00:08:22.800 align:middle
cuantas pruebas se han ejecutado,
cuantos tienen potencialmente

00:08:23.480 --> 00:08:26.240 align:middle
Se encontró con fallas y errores.

00:08:27.160 --> 00:08:29.560 align:middle
También tenemos la noción
de "TestResource"

00:08:29.720 --> 00:08:33.960 align:middle
que nos permite definir
los TestResources para una suite completa.

00:08:36.040 --> 00:08:39.760 align:middle
Un TestCase, como dije,
representa una prueba

00:08:39.920 --> 00:08:44.040 align:middle
Es un método que comienza con "prueba"
definido en una subclase, TestCase.

00:08:45.360 --> 00:08:47.360 align:middle
Un TestSuite es un grupo de pruebas.

00:08:47.520 --> 00:08:52.320 align:middle
Son todos los métodos TestCase.
definido en una o varias clases.

00:08:52.480 --> 00:08:56.880 align:middle
Y un TestResult será un resultado.
de varias ejecuciones de prueba.

00:08:58.160 --> 00:09:02.040 align:middle
Un TestResource
es un objeto que habilitará

00:09:02.600 --> 00:09:05.120 align:middle
la inicialización
de un grupo de recursos,

00:09:05.280 --> 00:09:07.520 align:middle
que son costosas
para inicializar en tiempo normal,

00:09:07.680 --> 00:09:10.280 align:middle
y que solo queremos
inicialice una vez para un grupo de pruebas.

00:09:10.440 --> 00:09:14.400 align:middle
Configuramos un TestResource, inicializamos
Una vez y ejecutar muchas pruebas,

00:09:14.560 --> 00:09:17.440 align:middle
y luego podemos lanzarlo al final.

00:09:17.640 --> 00:09:20.320 align:middle
Lo que deberías saber

00:09:20.800 --> 00:09:24.520 align:middle
es como escribir pruebas.
Escribir pruebas es extremadamente simple,

00:09:24.680 --> 00:09:27.480 align:middle
solo tienes que escribir una subclase
de la clase TestCase,

00:09:27.640 --> 00:09:31.240 align:middle
definir los métodos en él
que comienzan con "prueba",

00:09:31.400 --> 00:09:33.440 align:middle
y luego configurar un contexto dentro de él,

00:09:33.600 --> 00:09:36.960 align:middle
envía los estímulos y prueba
Las afirmaciones, que deberían ser ciertas.

00:09:37.800 --> 00:09:39.720 align:middle
Reutilizamos los contextos,

00:09:39.880 --> 00:09:42.240 align:middle
para que pueda reutilizar los contextos
a través de varios métodos de prueba,

00:09:42.400 --> 00:09:45.640 align:middle
al factorizarlos
en un método SetUp, por ejemplo.

00:09:47.000 --> 00:09:52.080 align:middle
En resumen, en esta secuencia
hemos visto el marco de prueba SUnit,

00:09:52.240 --> 00:09:54.360 align:middle
que es extremadamente simple de usar,

00:09:54.520 --> 00:09:57.560 align:middle
y extremadamente eficiente
para configurar desarrollos ágiles.

00:09:57.720 --> 00:10:01.520 align:middle
Les recomiendo encarecidamente que los usen,
Definir pruebas es muy fácil.

00:10:01.680 --> 00:10:04.840 align:middle
La gran ventaja es que cuando
has creado una prueba

00:10:05.000 --> 00:10:10.400 align:middle
Puedes ejecutarlo un millón de veces.
y es muy útil para asegurarte

00:10:10.560 --> 00:10:13.360 align:middle
que su código sigue funcionando,
incluso si has cambiado cosas,

00:10:13.520 --> 00:10:16.640 align:middle
y se han producido efectos de borde,
puedes detectarlos

00:10:16.800 --> 00:10:20.720 align:middle
si has estado actualizado
suficiente en las pruebas que has escrito.

00:10:20.880 --> 00:10:25.320 align:middle
Puedes ir más allá creando pruebas.
mediante el uso de marcos de punto,

00:10:25.480 --> 00:10:28.640 align:middle
típicamente marcos falsos
como BabyMock, etc ...

00:10:28.840 --> 00:10:33.440 align:middle
tener diferente
estilos de prueba y prueba de escritura.

00:10:34.480 --> 00:10:38.720 align:middle
Lo invito a usar y crear
muchas pruebas en tu programa

