WEBVTT

00:00:00.400 --> 00:00:03.560 align:middle
Hola. En esta secuencia
vamos a ver la reflexión,

00:00:03.720 --> 00:00:08.640 align:middle
la capacidad de introspección
en Pharo y por qué es útil.

00:00:09.600 --> 00:00:11.880 align:middle
Un sistema reflexivo,

00:00:12.040 --> 00:00:15.960 align:middle
la reflexión se divide
en 2 familias principales,

00:00:16.120 --> 00:00:18.000 align:middle
Introspección

00:00:18.160 --> 00:00:21.240 align:middle
es la habilidad de un programa
para observar su propio estado,

00:00:21.400 --> 00:00:25.880 align:middle
La intercesión es la habilidad de un programa.
para modificarse.

00:00:26.040 --> 00:00:29.040 align:middle
Para modificar su propio estado
o interpretación

00:00:30.640 --> 00:00:34.560 align:middle
La reificación es un concepto que consiste

00:00:34.720 --> 00:00:39.760 align:middle
de hacer cosas (objetos) explícitas
que normalmente son implícitas.

00:00:39.920 --> 00:00:43.920 align:middle
Por ejemplo, la pila de ejecución

00:00:44.080 --> 00:00:49.400 align:middle
en Pharo es explícito,
pero se puede obtener como un objeto clásico.

00:00:49.920 --> 00:00:55.280 align:middle
Más clásico, una clase en Pharo
Es un objeto totalmente clásico.

00:00:55.480 --> 00:00:58.960 align:middle
En otros idiomas,
Las clases no son objetos.

00:01:00.040 --> 00:01:02.160 align:middle
Un sistema reflexivo, como dije,

00:01:02.320 --> 00:01:06.600 align:middle
tiene su propia representación de sí mismo.

00:01:06.760 --> 00:01:09.600 align:middle
Es capaz de representarse a sí mismo,

00:01:09.760 --> 00:01:14.840 align:middle
y puede actuar en esta representación
para modificarse,

00:01:15.000 --> 00:01:19.600 align:middle
y cuando se modifica a sí mismo
cambia su estado y representación.

00:01:19.760 --> 00:01:22.600 align:middle
Lo llamamos una "conexión causal"

00:01:22.760 --> 00:01:25.520 align:middle
entre su representación
y su estado

00:01:25.680 --> 00:01:27.720 align:middle
Si cambiamos el estado,

00:01:27.880 --> 00:01:32.520 align:middle
la representación del sistema cambia
así como el estado del sistema.

00:01:33.000 --> 00:01:37.080 align:middle
¿Por qué es esto interesante?
Es interesante porque usaremos

00:01:37.480 --> 00:01:41.160 align:middle
esta introspección e intercesión

00:01:41.320 --> 00:01:43.240 align:middle
para mirar dentro de los objetos

00:01:43.400 --> 00:01:48.800 align:middle
Estoy definiendo una colección,
que hago una "Colección ordenada"

00:01:49.680 --> 00:01:54.680 align:middle
entonces usaré al Inspector Pharo,
que es una herramienta,

00:01:54.840 --> 00:01:57.960 align:middle
que puede mirar dentro de este objeto.

00:01:58.120 --> 00:02:02.200 align:middle
Es un objeto de instancia
de la clase OrderedCollection,

00:02:02.360 --> 00:02:05.840 align:middle
como vemos aquí,
Tiene variables de instancia,

00:02:06.000 --> 00:02:07.720 align:middle
"primer índice", "último índice",

00:02:07.880 --> 00:02:10.600 align:middle
tenemos los valores de esto
variables de instancia del objeto

00:02:10.760 --> 00:02:15.400 align:middle
entonces 1, 12 y luego
una matriz de 12 elementos, ¿de acuerdo?

00:02:15.560 --> 00:02:19.400 align:middle
Podríamos preguntarnos cómo
esta herramienta Inspector

00:02:19.560 --> 00:02:22.000 align:middle
Es capaz de mirar dentro de los objetos.

00:02:22.160 --> 00:02:25.120 align:middle
Como puede ver
¿El estado interno de los objetos?

00:02:26.600 --> 00:02:31.160 align:middle
Utiliza métodos de introspección
para mirar dentro de los objetos,

00:02:31.320 --> 00:02:34.360 align:middle
Hay muchos de ellos,
definido como "objetos".

00:02:34.520 --> 00:02:37.800 align:middle
Entonces "InstVarAt" nos permite ver

00:02:37.960 --> 00:02:40.960 align:middle
una instancia invariable
de acuerdo a su número.

00:02:41.120 --> 00:02:44.480 align:middle
Veré la variable de instancia
número 1 de este objeto.

00:02:44.640 --> 00:02:49.600 align:middle
Puedo modificar la variable de instancia número 1
de este objeto estableciendo un nuevo valor,

00:02:49.760 --> 00:02:52.160 align:middle
o puedo acceder a una instancia
variable por su nombre,

00:02:52.320 --> 00:02:56.000 align:middle
o cambiarlo por su nombre,
"InstVarNamed put". ¿OKAY?

00:02:58.320 --> 00:03:01.160 align:middle
Aquí hay unos ejemplos.
Normalmente creamos un punto,

00:03:01.320 --> 00:03:04.880 align:middle
y luego hacemos ...
el punto es 10 @ 3

00:03:05.040 --> 00:03:07.360 align:middle
instVarNamed:'x'.

00:03:07.520 --> 00:03:11.760 align:middle
Obtendré el valor de la instancia
variable llamada 'x' de este punto,

00:03:11.920 --> 00:03:14.080 align:middle
que me da 10.

00:03:14.240 --> 00:03:17.960 align:middle
Entonces "instVarNamed:'x' puesto:33"

00:03:18.120 --> 00:03:21.840 align:middle
He cambiado el valor de
la variable de instancia 'x' de este punto.

00:03:22.000 --> 00:03:25.680 align:middle
Se ha ido de 10 a 33.

00:03:25.840 --> 00:03:30.080 align:middle
He podido cambiar
el estado interno de un objeto,

00:03:30.240 --> 00:03:34.120 align:middle
mediante el uso de la introspección y la intercesión,

00:03:34.280 --> 00:03:38.200 align:middle
particularmente intercesión,
"InstVarNamed put". ¿OKAY?

00:03:38.360 --> 00:03:40.800 align:middle
El punto principal es que
hemos violado la encapsulación.

00:03:40.960 --> 00:03:45.560 align:middle
Un objeto externo ha modificado
Este objeto, sin ser interno,

00:03:45.720 --> 00:03:49.600 align:middle
por lo que viola la encapsulación
pero es extremadamente útil

00:03:49.760 --> 00:03:52.960 align:middle
cuando se construyen herramientas
y durante el desarrollo.

00:03:53.120 --> 00:03:56.840 align:middle
No debe usarse en la normalidad
codigo de una aplicacion,

00:03:57.000 --> 00:04:00.160 align:middle
pero es extremadamente poderoso
para construir herramientas genéricas,

00:04:00.320 --> 00:04:02.320 align:middle
típicamente inspectores de código.

00:04:03.680 --> 00:04:07.360 align:middle
Te daré otro ejemplo
de introspección, el método de clase,

00:04:07.520 --> 00:04:11.240 align:middle
para obtener la clase de un objeto.
Está definido en la clase "Objeto >>".

00:04:11.400 --> 00:04:14.760 align:middle
Le pido a esta cadena su clase,
me da la cadena de clase,

00:04:14.920 --> 00:04:17.880 align:middle
este punto cuál es su clase,
el punto de clase,

00:04:18.040 --> 00:04:21.600 align:middle
"Clase Smalltalk",
Puedo preguntar a la clase de la clase.

00:04:21.760 --> 00:04:23.840 align:middle
etcétera, luego agrego clase de clase ...

00:04:24.000 --> 00:04:26.560 align:middle
Básicamente, puedo consultar el sistema

00:04:26.720 --> 00:04:30.880 align:middle
enviando el mensaje "clase"
a objetos para descubrir su clase.

00:04:31.320 --> 00:04:34.040 align:middle
Hay muchos metodos
para consultar el sistema.

00:04:34.200 --> 00:04:38.360 align:middle
Aquí, tomo "OrderedCollection"
y envíe muchos mensajes de consulta.

00:04:38.520 --> 00:04:41.200 align:middle
Obtendré todas sus superclases,

00:04:41.360 --> 00:04:45.520 align:middle
todos sus selectores,
el nombre de sus variables de instancia,

00:04:45.680 --> 00:04:50.680 align:middle
todos los selectores,
el nombre de sus variables de instancia,

00:04:50.840 --> 00:04:54.120 align:middle
todas sus subclases, etc ...

00:04:54.280 --> 00:04:56.160 align:middle
Y todas sus líneas de código.

00:04:57.320 --> 00:05:00.920 align:middle
Todo esto nos permite construir
herramientas de nivel superior,

00:05:01.080 --> 00:05:04.840 align:middle
como el sistema de navegación aquí.

00:05:05.000 --> 00:05:09.600 align:middle
Este sistema de navegación nos permite
mostrar o explorar el sistema.

00:05:09.760 --> 00:05:14.360 align:middle
Por ejemplo,
Puedo ver todas las clases

00:05:15.440 --> 00:05:18.880 align:middle
que implementa el método "#,".

00:05:19.040 --> 00:05:21.720 align:middle
Aquí tenemos una ventana que se abrirá.

00:05:21.880 --> 00:05:24.600 align:middle
Veremos todos los implementadores de #,

00:05:24.760 --> 00:05:29.200 align:middle
por lo que la clase "AbstractFileReference"
implementa el método "#".

00:05:29.360 --> 00:05:32.280 align:middle
Tengo una lista de todas las clases.
implementado por este método.

00:05:33.880 --> 00:05:37.520 align:middle
Otro ejemplo,
nos gustaría implementar

00:05:38.280 --> 00:05:41.240 align:middle
un menú o un botón

00:05:41.400 --> 00:05:45.520 align:middle
Al hacer clic en él, queremos enviarlo
un mensaje al objeto detrás de él,

00:05:45.680 --> 00:05:48.680 align:middle
de acuerdo con el nombre del botón,
por ejemplo.

00:05:48.840 --> 00:05:53.760 align:middle
¿Cómo convierto una cadena en un mensaje?
para enviar a un objeto?

00:05:54.560 --> 00:05:59.480 align:middle
Tengo un método de intercesión para eso.
"Realizar" definido en "objeto".

00:05:59.640 --> 00:06:03.320 align:middle
Lo paso un símbolo,
el nombre de un mensaje para ejecutar,

00:06:03.480 --> 00:06:06.360 align:middle
y enviará este mensaje
al objeto en cuestión

00:06:06.520 --> 00:06:10.560 align:middle
Tengo un segundo tipo de mensaje,
"actuar con".

00:06:10.720 --> 00:06:14.960 align:middle
Puedo dar el nombre del símbolo,
el nombre del método para ejecutar,

00:06:15.120 --> 00:06:16.800 align:middle
y luego pasar una lista de argumentos.

00:06:16.960 --> 00:06:19.400 align:middle
Un ejemplo, si hago "5 factorial"

00:06:19.560 --> 00:06:23.280 align:middle
enviando un mensaje clásico,
y enviar el mensaje reflexivo,

00:06:23.440 --> 00:06:28.960 align:middle
su "5 realiza # factorial"
eso es un símbolo que significa,

00:06:29.280 --> 00:06:34.680 align:middle
"Objeto 5, por favor ejecuta
o recibir el mensaje factorial ".

00:06:34.880 --> 00:06:39.600 align:middle
La búsqueda normal se aplica
y estas dos formas son las mismas.

00:06:40.240 --> 00:06:41.920 align:middle
Aquí hay otro ejemplo.

00:06:42.120 --> 00:06:44.480 align:middle
Aquí tenemos un inspector de código

00:06:44.640 --> 00:06:49.600 align:middle
"Colección ordenada", podemos ver adentro
la clase "Colección ordenada".

00:06:49.760 --> 00:06:54.480 align:middle
Esta clase contiene atributos,

00:06:54.640 --> 00:06:57.000 align:middle
variables de instancia,
por ejemplo "methodDict".

00:06:57.160 --> 00:07:01.680 align:middle
En "methodDict" vemos
que la clase "OrderedCollection"

00:07:01.840 --> 00:07:05.960 align:middle
viene de "Comportamiento"
por lo que tiene un "métodoDicto" aquí,

00:07:06.120 --> 00:07:10.360 align:middle
una instancia de "MethodDictionary"
que contiene "CompiledMethod".

00:07:10.520 --> 00:07:14.360 align:middle
Entonces podemos ver
este diccionario de método contiene

00:07:14.520 --> 00:07:17.360 align:middle
un método compilado aquí, etc ...

00:07:17.520 --> 00:07:20.360 align:middle
otro método compilado ...
Muchos de los métodos compilados.

00:07:20.840 --> 00:07:25.480 align:middle
Podremos preguntarles a cada uno
de estos métodos compilados

00:07:25.920 --> 00:07:28.280 align:middle
por su código fuente.
Si hago "self getSource"

00:07:28.440 --> 00:07:30.600 align:middle
Obtendré el código fuente
del método compilado

00:07:30.880 --> 00:07:32.200 align:middle
Pero podemos ir más allá.

00:07:32.400 --> 00:07:35.800 align:middle
Se puede pedir un método compilado
para ejecutarse directamente

00:07:35.960 --> 00:07:39.200 align:middle
con el mensaje,
"valueWithReceiver:argumentos".

00:07:39.360 --> 00:07:42.200 align:middle
¡Pero cuidado!
Si lo hago, no hay búsqueda.

00:07:42.360 --> 00:07:45.920 align:middle
Viendo como ya tengo
un método compilado,

00:07:46.080 --> 00:07:48.600 align:middle
se ejecuta directamente
sin un mensaje

00:07:48.760 --> 00:07:53.520 align:middle
Aquí preguntaré la clase entera
para obtener su método compilado "factorial",

00:07:53.680 --> 00:07:56.240 align:middle
que obtengo de la
método compilado de clase

00:07:56.400 --> 00:07:59.320 align:middle
Le envío el mensaje,
"valueWithReceiver:argumentos".

00:07:59.480 --> 00:08:03.200 align:middle
Lo paso los argumentos,
el receptor será 5,

00:08:03.360 --> 00:08:06.320 align:middle
los argumentos serán (),
porque es un mensaje único,

00:08:06.480 --> 00:08:08.800 align:middle
y obtendremos el resultado.

00:08:09.760 --> 00:08:14.880 align:middle
Desencadena la ejecución de la
Método compilado sin búsqueda.

00:08:15.240 --> 00:08:18.360 align:middle
Entonces, para resumir,
La reflexión es extremadamente poderosa.

00:08:18.560 --> 00:08:22.360 align:middle
Hemos visto que es algo
eso nos permite introspeccionar

00:08:22.840 --> 00:08:25.240 align:middle
todo el sistema
porque lo representa

00:08:25.400 --> 00:08:26.880 align:middle
en sí mismo como un objeto,

00:08:27.040 --> 00:08:29.440 align:middle
sino también para modificar
el estado del sistema

00:08:29.600 --> 00:08:33.240 align:middle
Nos permite construir herramientas
de una manera genérica en todos los objetos.

00:08:33.960 --> 00:08:36.400 align:middle
Entonces realmente puedes hablar con objetos

00:08:36.560 --> 00:08:40.000 align:middle
con un protocolo estructuralmente
Lo mismo para todos los objetos.

00:08:40.160 --> 00:08:43.800 align:middle
¡Pero cuidado!
Viola la encapsulación.

00:08:43.960 --> 00:08:48.080 align:middle
No se usa en el código operativo,
pero para la construcción de herramientas.

00:08:48.240 --> 00:08:52.840 align:middle
Facilita la escritura
de inspectores de código como vimos,

00:08:53.000 --> 00:08:56.560 align:middle
y puedes ver cómo
Está implementado en Pharo.

