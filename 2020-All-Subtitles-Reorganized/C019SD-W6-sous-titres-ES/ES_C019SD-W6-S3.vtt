WEBVTT

00:00:00.480 --> 00:00:05.200 align:middle
Hola. Hoy vamos a examinar
una sutileza muy interesante

00:00:05.360 --> 00:00:07.720 align:middle
que puede aplicar en sus programas.

00:00:07.880 --> 00:00:11.640 align:middle
Para comenzar, revisaremos rápidamente
el programa de dados

00:00:11.800 --> 00:00:16.520 align:middle
Si recuerda, en este ejercicio
definimos la clase de dados en orden

00:00:16.680 --> 00:00:20.840 align:middle
para definir instancias de esta clase
y representan varias caras de dados.

00:00:21.000 --> 00:00:24.920 align:middle
Definimos una clase llamada DiceHandle.

00:00:25.360 --> 00:00:29.440 align:middle
Luego implementamos
el método "más"

00:00:29.600 --> 00:00:31.320 align:middle
en la clase DiceHandle,

00:00:31.480 --> 00:00:34.840 align:middle
agregar DiceHandles
y construye un nuevo DiceHandle.

00:00:35.000 --> 00:00:37.600 align:middle
Este es el código para esta clase.

00:00:37.760 --> 00:00:40.680 align:middle
Tenemos DiceHandle nuevo.

00:00:40.840 --> 00:00:42.920 align:middle
Creamos un nuevo DiceHandle,

00:00:43.080 --> 00:00:46.680 align:middle
a lo que agregamos los dados
de la clase receptora

00:00:46.840 --> 00:00:48.200 align:middle
y la configuración,

00:00:48.360 --> 00:00:52.040 align:middle
y devolvemos este identificador
Al final del método. ¿Bueno?

00:00:53.280 --> 00:00:57.960 align:middle
En esta secuencia veremos
la diferencia,

00:00:58.120 --> 00:01:02.200 align:middle
en este método "+"
entre escribir DiceHandle nuevo

00:01:02.360 --> 00:01:04.840 align:middle
y auto clase nuevo.

00:01:05.000 --> 00:01:07.560 align:middle
Y veremos por qué.
una técnica es mejor

00:01:08.160 --> 00:01:09.840 align:middle
Este es el problema.

00:01:10.200 --> 00:01:15.440 align:middle
Si creo una subclase DiceHandle
llamado MemoDiceHandle,

00:01:16.080 --> 00:01:20.720 align:middle
y quiero agregar MemoDiceHandles,

00:01:20.880 --> 00:01:24.280 align:middle
con el método "+"
que se hereda de DiceHandle,

00:01:24.440 --> 00:01:28.600 align:middle
el resultado es una instancia
de la clase DiceHandle.

00:01:28.760 --> 00:01:30.880 align:middle
No de la clase MemoDiceHandle.

00:01:31.040 --> 00:01:33.840 align:middle
Esto es un problema
porque cuando agregamos elementos,

00:01:34.000 --> 00:01:36.720 align:middle
queremos obtener
el mismo tipo de elemento de nuevo.

00:01:36.880 --> 00:01:38.400 align:middle
Cómo hacemos esto?

00:01:38.560 --> 00:01:40.080 align:middle
Solución n. ° 1.

00:01:40.480 --> 00:01:42.960 align:middle
Cambio la implementación

00:01:43.120 --> 00:01:46.080 align:middle
del método "+"
en la clase DiceHandle.

00:01:46.560 --> 00:01:48.080 align:middle
El método "+", ¿de acuerdo?

00:01:48.240 --> 00:01:53.280 align:middle
Y simplemente agrego este método:
self handleClass.

00:01:53.440 --> 00:01:58.320 align:middle
En lugar de definir
la variable de instancia que deseo obtener,

00:01:58.480 --> 00:02:02.160 align:middle
Yo uso un método
que llamo handleClass.

00:02:02.320 --> 00:02:05.160 align:middle
En DiceHandle,
se devuelve la clase DiceHandle,

00:02:05.320 --> 00:02:09.800 align:middle
y en la subclase MemoDiceHandle,
Se devuelve MemoDiceHandle.

00:02:10.160 --> 00:02:14.480 align:middle
Tan simplemente
redefiniendo el método handleClass,

00:02:14.640 --> 00:02:19.720 align:middle
obtenemos la instancia correcta
cuando agregamos elementos.

00:02:21.120 --> 00:02:25.280 align:middle
Si ejecutamos el mismo código,

00:02:25.440 --> 00:02:30.520 align:middle
usando MemoDiceHandle en su lugar,
obtenemos una instancia de MemoDiceHandle,

00:02:30.680 --> 00:02:33.680 align:middle
porque redefiní
el método handleClass

00:02:33.840 --> 00:02:38.280 align:middle
en la clase MemoDiceHandle.
Tenemos una instancia de la subclase.

00:02:38.440 --> 00:02:42.160 align:middle
Entonces alcanzamos nuestro objetivo.

00:02:42.760 --> 00:02:46.200 align:middle
El problema es ese

00:02:46.360 --> 00:02:51.680 align:middle
cada vez que agregamos una subclase
a DiceHandle,

00:02:51.840 --> 00:02:54.240 align:middle
debemos redefinir
el método handleClass.

00:02:54.400 --> 00:02:59.600 align:middle
Si no lo haces, el método "+" nunca
Devuelve la instancia de clase correcta.

00:02:59.760 --> 00:03:03.720 align:middle
Esto es tedioso.
Debes constantemente redefinir el método.

00:03:03.880 --> 00:03:05.080 align:middle
Hay mejores formas

00:03:05.600 --> 00:03:09.000 align:middle
Aquí está la solución n. ° 2.

00:03:09.160 --> 00:03:13.200 align:middle
Usando el método "+" en DiceHandle,
esta vez escribiremos:

00:03:13.360 --> 00:03:16.160 align:middle
auto clase nuevo

00:03:17.000 --> 00:03:20.680 align:middle
Le preguntaré al receptor actual
para su clase,

00:03:20.840 --> 00:03:22.640 align:middle
Para obtener una instancia.

00:03:22.800 --> 00:03:27.240 align:middle
De hecho, la autoestima siempre regresa
la clase del receptor.

00:03:27.400 --> 00:03:29.360 align:middle
Si es la instancia de una subclase,

00:03:29.520 --> 00:03:33.520 align:middle
devolverá la clase correcta.
Por ejemplo, MemoDiceHandle.

00:03:33.680 --> 00:03:37.840 align:middle
Obtenemos instancias del mismo tipo
como la del receptor.

00:03:38.520 --> 00:03:40.480 align:middle
Como conclusión,

00:03:40.640 --> 00:03:42.400 align:middle
como tu viste,

00:03:42.800 --> 00:03:47.040 align:middle
cuando envíe el mensaje "+"
a un DiceHandle,

00:03:47.200 --> 00:03:52.080 align:middle
si establece el nombre de la clase
quieres una instancia para,

00:03:52.240 --> 00:03:56.760 align:middle
en cierto sentido te previenes a ti mismo
desde la creación de subclases.

00:03:56.920 --> 00:04:01.400 align:middle
Pero con una clase propia nueva, los retornos "+"
una instancia del receptor.

00:04:01.560 --> 00:04:03.280 align:middle
De la subclase potencial.

00:04:03.440 --> 00:04:06.920 align:middle
Entonces es mucho mejor usar
auto clase nuevo,

00:04:07.080 --> 00:04:09.480 align:middle
para obtener directamente

00:04:10.120 --> 00:04:14.720 align:middle
una instancia de la clase
de acuerdo con el tipo de receptor.

