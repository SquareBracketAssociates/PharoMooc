WEBVTT

00:00:01.190 --> 00:00:03.000 align:middle
En este video, voy a
mostrarle cómo

00:00:03.167 --> 00:00:05.220 align:middle
crear un paquete, una clase, y
describir tests.

00:00:05.770 --> 00:00:09.100 align:middle
La primera cosa a hacer es
abrir el system browser.

00:00:09.530 --> 00:00:11.710 align:middle
El system browser permite navegar
paquetes.

00:00:11.877 --> 00:00:12.590 align:middle
Aqui estan los paquetes.

00:00:14.260 --> 00:00:16.600 align:middle
La primera cosa a hacer es
crear un paquete.

00:00:16.830 --> 00:00:21.790 align:middle
Vamos a cliquear en “Add
package”, "MyCounter".

00:00:22.280 --> 00:00:23.640 align:middle
Como hay muchos packages
y no queremos

00:00:23.807 --> 00:00:27.050 align:middle
siempre verlos, es bueno
filtrarlos.

00:00:27.950 --> 00:00:30.000 align:middle
Tenemos nuestro package "MyCounter".

00:00:30.157 --> 00:00:32.740 align:middle
Y ahi, definimos una classe
que llamamos

00:00:32.907 --> 00:00:37.550 align:middle
"Counter" y tiene una variable
de instancia “count”.

00:00:38.140 --> 00:00:42.290 align:middle
El pequeño ícono naranja significa
que el código no ha sido guardado.

00:00:42.610 --> 00:00:45.690 align:middle
Aqui, compilamos el código con la acción "Accept".

00:00:46.290 --> 00:00:49.570 align:middle
Y aqui, la clase
"Counter" ha sido compilada.

00:00:49.830 --> 00:00:51.920 align:middle
el sistema busca un poco
y dice que hay

00:00:53.200 --> 00:00:56.290 align:middle
buenos comentarios. Vamos a ver esto luego.
Por el momento, no nos interesa.

00:01:00.790 --> 00:01:03.690 align:middle
Hay un signo de exclamación en rojo
porque no hemos escrito

00:01:03.857 --> 00:01:05.280 align:middle
un comentario.
Entonces, vamos primero a escribir

00:01:05.447 --> 00:01:12.330 align:middle
el commentario:

00:01:12.497 --> 00:01:13.880 align:middle
"Soy un simple contador…”

00:01:45.790 --> 00:01:49.230 align:middle
Vamos a escribir un pequeño ejemplo
para que el lector entienda

00:01:49.397 --> 00:01:53.050 align:middle
como funcionará:
Counter new,

00:01:55.750 --> 00:02:00.120 align:middle
Counter increment, increment,
Counter

00:02:02.920 --> 00:02:07.500 align:middle
count. Aqui debe ser igual a 2.

00:02:09.880 --> 00:02:14.180 align:middle
De nuevo, el texto no ha sido
guardado y vamos a compilarlo.

00:02:14.347 --> 00:02:16.540 align:middle
Ha sido guardado.
Ya no tenemos contador.

00:02:16.850 --> 00:02:20.050 align:middle
Ahora, vamos a definir
accessors.

00:02:21.940 --> 00:02:24.770 align:middle
Generalmente ponemos accessors in
el protocolo "accessing".

00:02:26.640 --> 00:02:31.540 align:middle
Escribimos: "count retorna count".

00:02:33.160 --> 00:02:35.720 align:middle
Y de la misma manera, escribimos

00:02:38.220 --> 00:02:40.740 align:middle
aNumber, hacemos un setter.

00:02:46.190 --> 00:02:48.380 align:middle
Ves, modifiqué el método
count.

00:02:48.547 --> 00:02:50.770 align:middle
Puedes pensar que lo hemos
perdido, pero no, porque

00:02:50.937 --> 00:02:54.120 align:middle
cada vez que cambio un método
usando un nombre diferente,

00:02:54.287 --> 00:02:55.320 align:middle
crea un nuevo método.

00:02:55.487 --> 00:02:58.530 align:middle
Compilo el nuevo método,
y tengo "count".

00:03:01.160 --> 00:03:05.190 align:middle
Ahora, realmente queremos probar
y escribir nuestro primer pequeño programa.

00:03:07.360 --> 00:03:08.000 align:middle
Abro un Playground.

00:03:09.910 --> 00:03:14.700 align:middle
Creo un contador,
voy a otra línea.

00:03:14.867 --> 00:03:19.730 align:middle
Pongo un valor:

00:03:21.000 --> 00:03:25.420 align:middle
C count 7. Si pregunto por su
valor, ¿Qué va a

00:03:25.587 --> 00:03:29.600 align:middle
retornar? Retornará 7.

00:03:32.400 --> 00:03:34.390 align:middle
Ahora, lo que realmente nos gustaría
escribir

00:03:34.557 --> 00:03:38.460 align:middle
es un test porque así
no podemos ejecutarlo

00:03:39.040 --> 00:03:40.350 align:middle
y nos gustaría ejecutarlo
automáticamente.

00:03:40.630 --> 00:03:42.910 align:middle
Creamos una clase de test.

00:03:43.077 --> 00:03:44.820 align:middle
Cómo creamos una clase de test
en Pharo?

00:03:45.000 --> 00:03:48.450 align:middle
Cambiamos la super clase,
decimos que hereda de

00:03:50.220 --> 00:03:55.000 align:middle
TestCase y definimos
una clase de test

00:03:55.167 --> 00:03:56.140 align:middle
llamada CounterTest.

00:03:56.910 --> 00:03:59.860 align:middle
Ahora, voy a compilarla.

00:04:00.660 --> 00:04:03.700 align:middle
Tengo una nueva clase CounterTest
en mi sistema.

00:04:04.570 --> 00:04:08.410 align:middle
Voy a definir un nuevo método,
voy a agregar

00:04:08.577 --> 00:04:10.030 align:middle
un protocolo llamado tests.

00:04:11.620 --> 00:04:14.300 align:middle
Allí puedo definir un nuevo método.

00:04:14.467 --> 00:04:17.940 align:middle
Los métodos de test deben siempre
empezar por "test"

00:04:18.107 --> 00:04:21.690 align:middle
y estar en una clase que hereda
de TestCase.

00:04:22.380 --> 00:04:23.580 align:middle
Vamos a llamarlo
"testCounterisSetAndRead"

00:04:31.170 --> 00:04:35.590 align:middle
for ejemplo. Casi tenemos nuestro
test. Ya tenemos

00:04:35.757 --> 00:04:36.540 align:middle
casi todo escrito.

00:04:37.620 --> 00:04:40.330 align:middle
Vamos a indentarlo un poco mejor.

00:04:40.497 --> 00:04:41.730 align:middle
Creo mi contador.

00:04:42.580 --> 00:04:45.680 align:middle
Y ahora, escribo
"self assert

00:04:49.750 --> 00:04:54.200 align:middle
equals 7". Esta oración es

00:04:54.367 --> 00:04:58.560 align:middle
estrictamente equivalente a
"self assert C count equals 7".

00:05:01.870 --> 00:05:04.640 align:middle
Es mas conveniente,
cuando te equivocas

00:05:04.807 --> 00:05:08.470 align:middle
el retorno es más inteligente
cuando usas la primera oración.

00:05:08.637 --> 00:05:10.910 align:middle
Compilamos.

00:05:12.790 --> 00:05:17.690 align:middle
Ahora, puedo ejecutar mi test,

00:05:19.790 --> 00:05:22.440 align:middle
mi test esta en verde. Cuando tienes
un test y esta en verde,

00:05:22.607 --> 00:05:26.180 align:middle
es el momento correcto de
guardar tu producción, tu código.

00:05:26.370 --> 00:05:27.930 align:middle
En Pharo, puedes guardar la imagen.

00:05:28.097 --> 00:05:30.080 align:middle
Aqui, esto es lo que hago, voy a
salvar la imagen, pero la imagen

00:05:30.247 --> 00:05:31.320 align:middle
no es satisfactoria..

00:05:32.770 --> 00:05:35.040 align:middle
Me gustaría mostrarte
como puedes salvar código

00:05:35.207 --> 00:05:36.820 align:middle
en un sistema de versionado.

00:05:37.070 --> 00:05:39.960 align:middle
Aqui, como todavía no se si vas a
tener un acceso a internet,

00:05:40.127 --> 00:05:44.610 align:middle
voy a hacerlo en mi cache local.

00:05:44.777 --> 00:05:48.860 align:middle
Ves, tengo este directorio
apuntando hacia

00:05:49.027 --> 00:05:52.930 align:middle
todos estos paquetes
en los que puedo trabajar

00:05:54.000 --> 00:05:55.360 align:middle
los tenga cargados o no.

00:05:55.770 --> 00:05:58.490 align:middle
Allí, el sistema nos muestra que

00:05:58.657 --> 00:06:02.870 align:middle
varios paquetes con modificaciones
no ha sido salvados.

00:06:03.070 --> 00:06:05.060 align:middle
No nos importan los primeros 2,
pero vemos que

00:06:05.227 --> 00:06:09.160 align:middle
MyPackage tiene una estrella. Eso significa
que hay código en

00:06:09.327 --> 00:06:10.760 align:middle
la imágen que no ha sido salvado.

00:06:12.130 --> 00:06:14.020 align:middle
Aqui es lo que voy a hacer:
vamos a hacer Save,

00:06:14.187 --> 00:06:15.230 align:middle
elijo el repositorio.

00:06:16.520 --> 00:06:17.320 align:middle
cliqueo en save.

00:06:21.400 --> 00:06:26.180 align:middle
Escribo "primera version
con accessors y un

00:06:27.210 --> 00:06:29.090 align:middle
test en verde".

00:06:32.640 --> 00:06:35.600 align:middle
Acepto. Ahora ha sido guardado
un paquete.

00:06:35.800 --> 00:06:36.530 align:middle
Voy a chequear.

00:06:36.697 --> 00:06:41.370 align:middle
Puedo abrir este directorio.
Si miro, contiene

00:06:42.410 --> 00:06:44.460 align:middle
muchos paquetes que han sido
cargados por el sistema.

00:06:44.627 --> 00:06:48.470 align:middle
Pero en particular, si filtro,
encuentro

00:06:48.637 --> 00:06:51.130 align:middle
mi paquete con sus versiones.

00:06:57.620 --> 00:07:00.740 align:middle
Te recomiendo guardar, cada vez
que agregas

00:07:00.907 --> 00:07:03.460 align:middle
nueva funcionalidad, y eso es lo que
vamos a hacer.

00:07:06.770 --> 00:07:09.900 align:middle
Ahora vamos a definir

00:07:10.067 --> 00:07:12.130 align:middle
un test antes de implementarlo.

00:07:12.410 --> 00:07:14.590 align:middle
Vamos a escribir un test para
ver cual es el incremento

00:07:14.757 --> 00:07:19.710 align:middle
de un

00:07:19.877 --> 00:07:21.200 align:middle
contador. "TestIncrement"
¿Qué queremos obtener?

00:07:21.367 --> 00:07:22.000 align:middle
Queremos decir “Creo

00:07:26.330 --> 00:07:27.430 align:middle
un contador,

00:07:33.510 --> 00:07:38.400 align:middle
le asigno un valor por defecto,

00:07:38.840 --> 00:07:43.410 align:middle
luego incremento dos veces este contador.

00:07:44.100 --> 00:07:45.310 align:middle
“¿Qué debo chequear?”

00:07:45.477 --> 00:07:48.130 align:middle
Debo chequear que el contador

00:07:51.150 --> 00:07:51.870 align:middle
tiene el valor correcto.

00:07:57.900 --> 00:08:02.800 align:middle
Compilo. Mi test

00:08:03.000 --> 00:08:06.880 align:middle
esta en rojo porque no implementé
counter.

00:08:07.510 --> 00:08:10.390 align:middle
Las operaciones en counter
incrementar y decrementar.

00:08:11.520 --> 00:08:12.450 align:middle
Agrego
"operations increment".

00:08:21.660 --> 00:08:22.390 align:middle
¿Qué hacemos?

00:08:22.557 --> 00:08:26.890 align:middle
Hacemos "self
count 2: self count +

00:08:27.200 --> 00:08:30.270 align:middle
1". Si usamos sistematicamente
accessors

00:08:30.437 --> 00:08:32.080 align:middle
internamente o no, depende,
es una cuestión de estilo.

00:08:34.510 --> 00:08:37.630 align:middle
De la misma manera, ya que esta muy cerca,

00:08:39.710 --> 00:08:40.500 align:middle
vamos a definir "decrement".

00:08:42.380 --> 00:08:44.470 align:middle
viste que para increment, hay
un test así que puedo

00:08:44.637 --> 00:08:48.190 align:middle
ejecutarlo y mi test esta en verde.

00:08:48.357 --> 00:08:50.370 align:middle
Así que tengo 2 test que funcionan bien.

00:08:50.710 --> 00:08:53.350 align:middle
Si voy a mi clase de test,
todos mis tests estan en verde.

00:08:53.670 --> 00:08:54.540 align:middle
¿Qué voy a hacer ahora?

00:08:54.707 --> 00:08:56.790 align:middle
Salvo. Voy a salvar de nuevo.

00:08:56.957 --> 00:09:00.340 align:middle
Voy a escribir "Agregado
incrementar y decrementar".

00:09:13.110 --> 00:09:17.850 align:middle
Ahora si miro,
tengo 2 versiones

00:09:23.250 --> 00:09:23.883 align:middle
de mi paquete.

00:09:24.090 --> 00:09:29.020 align:middle
Voy a escribir un test para "decrement"

00:09:29.187 --> 00:09:30.100 align:middle
porque no hay razón
para no hacerlo.

00:09:31.700 --> 00:09:36.590 align:middle
"decrement", por ejemplo

00:09:36.757 --> 00:09:40.320 align:middle
podría atribuir el valor 2
si quiero

00:09:40.487 --> 00:09:43.890 align:middle
y decrementarlo 2 veces. Debería obtener 0.

00:09:44.057 --> 00:09:48.550 align:middle
Mi test esta verde así que

00:09:49.570 --> 00:09:50.203 align:middle
voy a salvar.

00:10:06.490 --> 00:10:10.490 align:middle
Ahora, lo que queremos es que si miro

00:10:10.657 --> 00:10:14.300 align:middle
y escribo "Counter new"
y luego

00:10:14.467 --> 00:10:16.910 align:middle
"Print it", muestra un contador
cuyo valor no se,

00:10:17.077 --> 00:10:19.000 align:middle
así que no es muy útil.

00:10:19.360 --> 00:10:22.260 align:middle
Nos gustaría modificar
este comportamiento.

00:10:24.130 --> 00:10:26.630 align:middle
Para hacer esto, vamos a agregar
un método

00:10:26.797 --> 00:10:29.840 align:middle
llamado ”PrintOn",
en el protocolo Printing.

00:10:31.340 --> 00:10:33.110 align:middle
Print on es un método llamado

00:10:33.277 --> 00:10:34.530 align:middle
por el sistema cada vez que
haces PrintStream.

00:10:35.760 --> 00:10:36.750 align:middle
Tiene aStream como argumento.

00:10:38.690 --> 00:10:39.440 align:middle
¿Qué hacemos?

00:10:40.200 --> 00:10:43.170 align:middle
Decimos que nos gustaría
tener un contador.

00:10:43.337 --> 00:10:47.460 align:middle
Típicamente, uso las funciones
de arriba.

00:10:51.740 --> 00:10:54.170 align:middle
Ahora lo que voy a hacer,
me gustaría

00:10:58.530 --> 00:10:59.850 align:middle
agregar un pequeño

00:11:04.470 --> 00:11:05.103 align:middle
texto

00:11:17.370 --> 00:11:20.570 align:middle
por ejemplo
"con valor" y "self count".

00:11:24.150 --> 00:11:27.740 align:middle
HAgo esto porque es un
número, así que tengo que

00:11:27.907 --> 00:11:32.180 align:middle
obtener una representación textual.

00:11:34.260 --> 00:11:35.290 align:middle
Escribo "cr".

00:11:35.457 --> 00:11:36.260 align:middle
Compilo.

00:11:42.900 --> 00:11:45.550 align:middle
El sistema me dice que puedo
mejorarlo, pero no importa…

00:11:46.040 --> 00:11:47.270 align:middle
Por el momento no nos interesa.

00:11:48.590 --> 00:11:49.760 align:middle
Puedo escribir "Counter new".

00:11:51.000 --> 00:11:54.740 align:middle
Miro, dice que es un contador
con un valor nil.

00:11:54.907 --> 00:11:58.020 align:middle
Eso es normal porque no lo
he inicializado todavía.

00:12:01.260 --> 00:12:04.960 align:middle
Ahora vamos a agregar
la initialización.

00:12:07.590 --> 00:12:09.780 align:middle
Para hacer esto, empezamos escribiendo un test.

00:12:14.050 --> 00:12:18.020 align:middle
Digo: “Al momento de la creación,
quiero que el valor

00:12:19.770 --> 00:12:23.180 align:middle
sea 0.

00:12:24.950 --> 00:12:25.760 align:middle
¿Qué voy a hacer?

00:12:25.927 --> 00:12:27.280 align:middle
Voy a escribir “self assert”

00:12:27.447 --> 00:12:30.840 align:middle
Chequeo que "Counter new

00:12:33.030 --> 00:12:36.210 align:middle
count = 0".

00:12:38.020 --> 00:12:39.010 align:middle
Ahí, ¿De qué nos damos cuenta?

00:12:39.177 --> 00:12:41.090 align:middle
Mi test es falso. ¿Por qué?

00:12:41.257 --> 00:12:45.140 align:middle
Porque si hago esto,
obtengo nil.

00:12:47.140 --> 00:12:49.820 align:middle
Como es una clase y no
tengo acceso a

00:12:50.000 --> 00:12:53.560 align:middle
las variables de instancia de
la clase CounterTest,

00:12:53.727 --> 00:12:57.110 align:middle
puedo seleccionar la expresión y
ejecutarla directamente.

00:13:00.280 --> 00:13:03.170 align:middle
Una vez que tengo este test que
no es válido,

00:13:03.680 --> 00:13:04.420 align:middle
¿Qué debo hacer?

00:13:04.587 --> 00:13:09.110 align:middle
Voy a agregar un método initialize
en el protocolo initialisation.

00:13:16.900 --> 00:13:21.730 align:middle
¿Y allí qué hago?

00:13:22.160 --> 00:13:25.760 align:middle
Escribo "super
initialize", y voy a

00:13:25.927 --> 00:13:27.730 align:middle
decir "count 2 points = 0".

00:13:27.897 --> 00:13:31.550 align:middle
Este método es usado cada vez
que uso el método “new”.

00:13:32.330 --> 00:13:35.700 align:middle
Ahora puedo mirar mis tests,
es verde.

00:13:35.867 --> 00:13:40.070 align:middle
De la misma manera, si escribo
"count", obtengo 0.

00:13:41.010 --> 00:13:45.320 align:middle
Una vez mas, vamos a salvar:
"agregado printOn"

00:13:45.487 --> 00:13:47.490 align:middle
"agregado initialize + tests".

00:14:04.000 --> 00:14:06.270 align:middle
Ahora lo que es interesante es que

00:14:06.437 --> 00:14:09.300 align:middle
puedo ver toda mi historia.

00:14:09.467 --> 00:14:12.310 align:middle
Puedo ver y navegar la historia.

00:14:12.520 --> 00:14:16.180 align:middle
Si cliqueo en "versión", puedo
ver la diferencia entre estos 2 sistemas.

00:14:17.960 --> 00:14:20.440 align:middle
Cambios entre la versión 3 y la versión 4

00:14:20.607 --> 00:14:21.530 align:middle
son ”initialize" "printOn" y el test.

00:14:22.000 --> 00:14:24.660 align:middle
Si quiero la diferencia entre

00:14:28.490 --> 00:14:33.360 align:middle
la versión 2 y la versión 4,

00:14:33.527 --> 00:14:34.160 align:middle
tengo todos estos cambios.

00:14:35.870 --> 00:14:38.220 align:middle
Ahora, nos queda una cosa por hacer,
me gustaría

00:14:38.387 --> 00:14:43.100 align:middle
cambiar un poco la manera
en que los objetos son creados.

00:14:43.820 --> 00:14:47.210 align:middle
Empiezo creando un test que
va a clarificar

00:14:47.377 --> 00:14:51.040 align:middle
que quiero obtener.
Voy a definir un test

00:14:53.040 --> 00:14:56.000 align:middle
llamado
"AlternateClassCreation".

00:14:58.000 --> 00:14:59.500 align:middle
¿Qué queremos obtener?

00:15:01.000 --> 00:15:03.000 align:middle
Digamos que quiero
estar seguro que

00:15:05.000 --> 00:15:11.000 align:middle
Counter withValue: 19

00:15:11.500 --> 00:15:13.000 align:middle
Si hago increment en él

00:15:15.000 --> 00:15:20.000 align:middle
y pregunto por su valor,
debe retornar 20,

00:15:21.000 --> 00:15:23.000 align:middle
Ok.

00:15:30.000 --> 00:15:34.000 align:middle
Hagamos un paréntesis aqui,
es mejor.

00:15:38.000 --> 00:15:42.000 align:middle
Así que, una vez más, el
test falla,

00:15:44.000 --> 00:15:48.000 align:middle
y el asistente me dice:
"envias un mensaje desconocido".

00:15:49.000 --> 00:15:52.000 align:middle
Debes darte cuenta que el mensaje
withValue

00:15:52.200 --> 00:15:55.000 align:middle
no esta siendo enviado a un objeto,
sino a una clase.

00:15:55.500 --> 00:15:58.500 align:middle
Esto quiere decir que tengo que
definir este mensaje

00:15:58.600 --> 00:15:59.900 align:middle
en la clase.
Así que selecciono la clase.

00:16:00.000 --> 00:16:03.000 align:middle
Ahora voy al nivel de clase
y agrego

00:16:03.200 --> 00:16:10.000 align:middle
un protocolo llamado
creación de instancias

00:16:12.500 --> 00:16:16.400 align:middle
withValue: aNumber
¿Qué debo hacer?

00:16:17.500 --> 00:16:18.400 align:middle
La primera cosa a hacer es

00:16:19.000 --> 00:16:21.800 align:middle
crear un contador, una variable
contador,

00:16:22.000 --> 00:16:24.500 align:middle
contador, lo hago lentamente,

00:16:24.600 --> 00:16:26.000 align:middle
self new
Así creo un contador

00:16:26.100 --> 00:16:29.900 align:middle
y escribo
self count: aNumber

00:16:30.000 --> 00:16:34.000 align:middle
Y retorno este contador.

00:16:34.100 --> 00:16:35.000 align:middle
Podemos hacerlo de una manera
más corta

00:16:35.100 --> 00:16:38.000 align:middle
pero por el momento vamos
a hacerlo simplemente.

00:16:38.100 --> 00:16:40.000 align:middle
Compilo mi método.

00:16:40.100 --> 00:16:43.000 align:middle
Y ahora significa que puedo
enviar mensajes.

00:16:43.500 --> 00:16:49.000 align:middle
Ves, cuando cliqueo en
este botón,

00:16:49.100 --> 00:16:52.000 align:middle
voy al nivel de clase.
Voy desde el nivel de clase

00:16:52.100 --> 00:16:53.000 align:middle
al nivel de instancia.

00:16:53.100 --> 00:16:55.000 align:middle
Aqui estaba en el nivel de clase
y aqui vuelvo a los

00:16:55.100 --> 00:16:57.500 align:middle
mensajes enviados a
instancias.

00:16:58.100 --> 00:17:01.200 align:middle
¿Qué significa esto?
Significa que si hago

00:17:01.500 --> 00:17:08.900 align:middle
Counter withValue: 18,
¿Qué obtendré?

00:17:09.000 --> 00:17:11.000 align:middle
Obtendré una instancia de
la clase Counter.

00:17:12.500 --> 00:17:15.000 align:middle
Obtengo un contador
con valor 18.

00:17:15.100 --> 00:17:18.000 align:middle
Y ahi puedo hacer
decrement.

00:17:21.100 --> 00:17:23.000 align:middle
Si refresco, obtengo 17.

00:17:26.100 --> 00:17:28.900 align:middle
Ahora si miro mi test,

00:17:29.000 --> 00:17:32.000 align:middle
todos mis tests estan bien,
así que voy una vez más

00:17:32.100 --> 00:17:35.000 align:middle
a salvar y listo.

00:17:37.100 --> 00:17:44.000 align:middle
Agregada API de creación de instancias
y tests.

00:17:45.000 --> 00:17:48.000 align:middle
Listo por ahora.


