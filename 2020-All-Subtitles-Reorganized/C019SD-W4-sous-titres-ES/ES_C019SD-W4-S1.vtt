WEBVTT

00:00:07.670 --> 00:00:11.800 align:middle
Hola a todos. Bienvenidos
a la secuencia 1 

00:00:12.000 --> 00:00:15.800 align:middle
de la semana 4. En esta semana 
cubriremos los conceptos básicos

00:00:16.000 --> 00:00:20.660 align:middle
de la herencia en Pharo,
el mecanismo de LookUp (búsqueda)

00:00:20.860 --> 00:00:21.780 align:middle
y el desarrollo Web.

00:00:22.670 --> 00:00:26.830 align:middle
En la primera secuencia,
introduciremos los

00:00:27.030 --> 00:00:29.000 align:middle
conceptos básicos de la herencia.

00:00:29.540 --> 00:00:32.700 align:middle
Estos conceptos son bastante similares.

00:00:32.900 --> 00:00:36.810 align:middle
a la herencia en otros idiomas
con clases, por ejemplo Java.

00:00:37.190 --> 00:00:39.340 align:middle
Le aconsejo de seguirlo, incluso

00:00:39.540 --> 00:00:41.100 align:middle
si está familiarizado con estos 
conceptos básicos, puesto que.

00:00:41.300 --> 00:00:46.250 align:middle
introduciremos un poco de vocabulario,
así como una representación gráfica

00:00:46.450 --> 00:00:49.170 align:middle
que volvera a utilizarse muy pronto

00:00:49.370 --> 00:00:50.790 align:middle
durante el resto del curso.

00:00:51.270 --> 00:00:53.300 align:middle
Esta secuencia enseñará
que es la herencia,

00:00:53.500 --> 00:00:55.610 align:middle
y cómo utilizarla.

00:00:56.310 --> 00:00:58.680 align:middle
A su derecha puede ver una
representación de dos clases:

17 align:middle
00:00:58,880 --> 00:01:02,900
la clase Rectangle,
con su nombre, en primer lugar,

00:01:03.930 --> 00:01:05.120 align:middle
sus variables de instancia,
y sus métodos.

00:01:07.830 --> 00:01:10.330 align:middle
Debajo, lo mismo.
El nombre de la clase,

00:01:10.530 --> 00:01:13.710 align:middle
ColorRectangle, sus variables
de instancia y sus métodos.

00:01:16.840 --> 00:01:19.620 align:middle
La flecha vertical aquí, podemos
ver que un triangulo vacío

00:01:20.080 --> 00:01:24.480 align:middle
como cabeza de la flecha,
nos indica una relación de herencia.

00:01:24.680 --> 00:01:28.890 align:middle
La subclase ColorRectangle
hereda de la clase Rectangle.

00:01:29.910 --> 00:01:33.230 align:middle
Generalmente, subclases como
ColoredRectangle

00:01:33.430 --> 00:01:37.390 align:middle
reafinan el comportamiento y el estado
de su superclase.

00:01:38.080 --> 00:01:40.650 align:middle
Una subclase como ColorRectangle
puede agregar 

00:01:40.950 --> 00:01:43.880 align:middle
estado y comportamiento
a su superclase

00:01:45.190 --> 00:01:49.300 align:middle
Aquí, la clase ColoredRectangle
agrega estado

00:01:49.550 --> 00:01:52.590 align:middle
en la forma de dos variables
de instancia, color

00:01:55.340 --> 00:01:57.380 align:middle
y borderedColor, también agrega
el método color.

00:01:58.180 --> 00:02:03.140 align:middle
Podríamos decir que en un momento
u otro todas las clases

00:02:03.340 --> 00:02:04.230 align:middle
heredan de la clase Object.

00:02:04.610 --> 00:02:06.140 align:middle
De hecho eso no es del todo cierto.

00:02:06.530 --> 00:02:09.450 align:middle
Es Seguro que todas las clases
heredan de la clase ProtoObject.

00:02:10.340 --> 00:02:13.570 align:middle
La superclase ProtoObject

36 align:middle
00:02:13,770 --> 00:02:16,510
se usa para casos muy especiales.

00:02:16.830 --> 00:02:19.500 align:middle
A los fines de este curso,
diremos que todas 

00:02:19.700 --> 00:02:21.310 align:middle
las clases heredan de Object.
Eso será suficiente para

00:02:21.510 --> 00:02:24.030 align:middle
comprender el conjunto de
mecanismos de Pharo.

00:02:24.230 --> 00:02:27.050 align:middle
La clase ProtoObject está
reservada para casos

00:02:27.250 --> 00:02:29.910 align:middle
muy específicos.
No es probable que lo necesite

42 align:middle
00:02:30,110 --> 00:02:33,580
para aprender los conceptos
básicos de Pharo.

00:02:34.390 --> 00:02:37.540 align:middle
La herencia se comporta
de manera diferente,

00:02:37.740 --> 00:02:41.040 align:middle
dependiendo de si hereda el estado
o el comportamiento.

00:02:41.950 --> 00:02:43.790 align:middle
La herencia del estado es estática.

00:02:44.030 --> 00:02:46.640 align:middle
Esto significa que
cuando crea la subclase,

00:02:47.800 --> 00:02:51.250 align:middle
conoce exactamente al conjunto

00:02:51.530 --> 00:02:53.720 align:middle
de todas las variables
de instancia.

00:02:54.470 --> 00:02:56.620 align:middle
Por el contrario para el
comportamiento, lo haremos 

00:02:56.820 --> 00:02:58.380 align:middle
dinamicamente,
és decir que durante la ejecución

00:02:58.580 --> 00:03:00.940 align:middle
del programa miraremos
cuales son los métodos

00:03:01.140 --> 00:03:02.710 align:middle
definidos en las subclases y
en las superclases.

00:03:03.500 --> 00:03:06.630 align:middle
En cuanto a las variables de instancia, 
la herencia de las variables de instancia

00:03:06.830 --> 00:03:08.700 align:middle
se produce en el momento de la
creación de la subclase.

00:03:09.320 --> 00:03:14.000 align:middle
Así en la creación de la subclase,
tomaremos 

00:03:14.530 --> 00:03:17.290 align:middle
las variables de instancia definidas
en la subclase, en este caso

00:03:17.490 --> 00:03:22.300 align:middle
color y borderColor,
y haremos la

00:03:22.500 --> 00:03:26.390 align:middle
unión con todas las variables
de instancia definidas en

00:03:26.590 --> 00:03:28.950 align:middle
la super clase, y en la super 
classe de la super clase

00:03:29.210 --> 00:03:31.180 align:middle
y así hasta llegar
a la clase Object.

00:03:34.170 --> 00:03:36.000 align:middle
Aquí las variables de instancia
de ColoredRectangle

00:03:37.020 --> 00:03:40.250 align:middle
serán width height color
y borderColor

00:03:41.470 --> 00:03:43.540 align:middle
Para el comportamiento el
mecanismo es completamente

000:03:43.740 --> 00:03:47.050 align:middle
diferente, y las secuencias
que siguen presentaran 

00:03:48.020 --> 00:03:50.280 align:middle
exactamente el funcionamiento
global,

00:03:51.000 --> 00:03:54.650 align:middle
la herencia del comportamiento
se realiza durante la ejecución.

00:03:55.470 --> 00:03:59.420 align:middle
En otras palabras, al enviar
un mensaje a un objeto,

00:04:00.240 --> 00:04:03.660 align:middle
el método correspondiente se buscara
en la jerarquía de clases.

00:04:04.420 --> 00:04:08.770 align:middle
Aquí, si envió un mensaje a
ColoredRectangle, el 

00:04:09.000 --> 00:04:12.890 align:middle
mensaje Area por ejemplo,
lo buscaremos

00:04:13.840 --> 00:04:16.650 align:middle
en su clase, buscaremos el método
correspondiente

00:04:16.850 --> 00:04:18.320 align:middle
en la clase de A color rectangle.

00:04:18.520 --> 00:04:23.270 align:middle
No encontramos el método Area
asi que remontamos

00:04:23.590 --> 00:04:26.650 align:middle
en la super clase, 
buscamos el método Area,

00:04:26.850 --> 00:04:29.080 align:middle
lo hemos encontramos, es este el
que sera seleccionado y ejecutado.

00:04:30.080 --> 00:04:30.940 align:middle
Resumiendo.

00:04:31.520 --> 00:04:35.630 align:middle
La herencia, esta noción de 
subclase y de superclase

00:04:35.830 --> 00:04:37.700 align:middle
permite a una subclase de
reafinar el 

00:04:37.900 --> 00:04:41.250 align:middle
comportamiento de su superclase
y extenderlo.

00:04:42.200 --> 00:04:45.800 align:middle
La subclase puede también puede
extender, es decir agregar

00:04:46.060 --> 00:04:47.620 align:middle
estado a su superclase.

00:04:48.510 --> 00:04:51.190 align:middle
Pharo tiene un modelo de 
herencia simple, es de decir que 

00:04:51.390 --> 00:04:52.640 align:middle
una clase tiene solo una
y única superclase.

00:04:52.960 --> 00:04:55.110 align:middle
Es posible hacer algo parecido a la
herencia múltiple

00:04:55.310 --> 00:04:58.050 align:middle
con la noción de trait, que 
no abordaremos aquí.

00:04:59.010 --> 00:05:01.830 align:middle
En la cabeza de la jerarquía
encontramos Object y también la

00:05:02.030 --> 00:05:04.920 align:middle
clase ProtoObject, de la que
no entraremos en detalles.

00:05:05.890 --> 00:05:09.400 align:middle
La herencia del estado es estática,
es decir que se 

00:05:09.600 --> 00:05:13.080 align:middle
realiza en el momento de la definición
de la subclase, mientras que la herencia

00:05:13.280 --> 00:05:15.240 align:middle
del comportamiento se realiza
durante la ejecución.

00:05:15.440 --> 00:05:18.030 align:middle
del programa cada vez que
enviamos un mensaje a un objeto.

 align:middle


