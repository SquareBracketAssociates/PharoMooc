WEBVTT

00:00:00.650 --> 00:00:03.690 align:middle
Buenos días. En esta secuencia
veremos el Framework

00:00:03.890 --> 00:00:06.000 align:middle
web Seaside, que es un
Framework innovador para

00:00:06.200 --> 00:00:07.820 align:middle
construir aplicaciones Web,
en Pharo.

00:00:08.550 --> 00:00:11.110 align:middle
es muy potente y permite
de construir

00:00:11.310 --> 00:00:13.260 align:middle
aplicaciones complejas. Veremos
que la noción

00:00:13.460 --> 00:00:14.910 align:middle
central es la noción de componentes
que son

00:00:15.110 --> 00:00:18.290 align:middle
reutilizables y con estado,
construidos sobre un

00:00:18.490 --> 00:00:23.000 align:middle
protocolo sin estado que es http
clásico de las aplicaciones Web.

00:00:24.210 --> 00:00:26.310 align:middle
Así que Seaside por supuesto
que es seguro por defecto,

00:00:26.510 --> 00:00:29.350 align:middle
soporta todas las últimas novedades
Web 2 0, Ajax y

00:00:29.550 --> 00:00:31.850 align:middle
ect.. así como las arquitecturas 
REST.

00:00:33.070 --> 00:00:35.180 align:middle
Así que tenéis la pagina Web
de Seaside donde podréis

00:00:35.380 --> 00:00:40.000 align:middle
consultar la documentación, así
como el libro

00:00:40.200 --> 00:00:42.030 align:middle
gratuito de Seaside que se encuentra
en linea.

00:00:42.440 --> 00:00:44.670 align:middle
Ademas encontrareis un conjunto 
de tutoriales sobre

00:00:44.870 --> 00:00:47.380 align:middle
Seaside, y finalmente os aconsejo
de mirar la

00:00:47.580 --> 00:00:49.860 align:middle
mailing list Seaside donde podréis
plantear vuestras dudas

00:00:50.060 --> 00:00:54.000 align:middle
y existe una comunidad activa
que responde a todas las

00:00:54.200 --> 00:00:55.180 align:middle
preguntas que necesitéis.

00:00:56.350 --> 00:00:57.360 align:middle
Así que un poco de historia.

00:00:57.560 --> 00:00:59.900 align:middle
Seaside esta en producción desde
el 2002.

00:01:00.190 --> 00:01:04.130 align:middle
Esta activamente mantenido y 
ademas es también uno de los

00:01:04.330 --> 00:01:07.240 align:middle
Framworks a la base de muchas
historias de éxito

00:01:07.440 --> 00:01:09.920 align:middle
en Pharo; podéis ir a la pagina
web de Pharo y

00:01:10.120 --> 00:01:12.600 align:middle
en este link, podréis ver que
existen muchos

00:01:13.330 --> 00:01:16.240 align:middle
proyectos Web, y la mayoría
de estos proyectos Web 

00:01:16.440 --> 00:01:17.550 align:middle
utilizan el Framework seaside.

00:01:19.050 --> 00:01:23.730 align:middle
Como os decía Seaside es un
Framework Web

00:01:24.260 --> 00:01:26.770 align:middle
centrado sobre la noción de
componentes.

00:01:27.000 --> 00:01:29.810 align:middle
Así que los componentes serán
reutilizables y con estado.

00:01:30.050 --> 00:01:33.440 align:middle
De acuerdo! Y veremos un lenguaje
dedicado que nos

00:01:33.640 --> 00:01:35.920 align:middle
permitirá de fácilmente de construir
estos componentes en HTML.

00:01:36.750 --> 00:01:39.010 align:middle
Luego tendremos las reglas de
composición de estos componentes.

00:01:39.460 --> 00:01:41.640 align:middle
Estamos de acuerdo que hay
varias y las explicitaremos

00:01:41.840 --> 00:01:45.000 align:middle
en una próxima secuencia. Una
aplicación Web es

00:01:45.200 --> 00:01:48.080 align:middle
únicamente un componente raíz,
seremos capaces de

00:01:48.280 --> 00:01:52.730 align:middle
inspeccionar las aplicaciones Web en vivo
directamente con el debugger de Pharo.

00:01:53.750 --> 00:01:56.810 align:middle
Luego tendréis una secuencia que os

00:01:57.010 --> 00:01:58.900 align:middle
mostrará como hacer para generar
automáticamente los

00:01:59.100 --> 00:02:03.730 align:middle
formularios, en todo caso
para no tener que 

00:02:03.930 --> 00:02:05.400 align:middle
escribirlos a mano.

00:02:05.610 --> 00:02:07.440 align:middle
Así como algunos ejemplos de
aplicaciones construidas

00:02:07.640 --> 00:02:09.550 align:middle
con Seaside, que son en producción
desde el 2002.

00:02:10.490 --> 00:02:13.220 align:middle
Así que si hacemos un zoom, tenemos
otros, aquí vemos

00:02:13.420 --> 00:02:15.530 align:middle
una aplicación que utiliza 
muchos gráficos,

00:02:16.760 --> 00:02:18.900 align:middle
así que muchos componentes que
están imbricados los unos con

00:02:19.100 --> 00:02:20.660 align:middle
los otros para construir una
aplicación compleja.

00:02:20.930 --> 00:02:23.610 align:middle
Os facilito un otro ejemplo de aplicación

00:02:23.810 --> 00:02:25.650 align:middle
que podéis encontrar en la pagina Web
de Pharo, así que

00:02:26.000 --> 00:02:30.150 align:middle
tenemos realmente tablas de report
que son bastante
51
00:02:30,350 --> 00:02:33,030
complejas y imbricadas las
unas con las otras, y podemos

00:02:33.230 --> 00:02:35.600 align:middle
construir realmente esto 
simplemente con el Framework Seaside.

00:02:38.140 --> 00:02:40.470 align:middle
Así que en Seaside la noción
central como os decía es 

00:02:40.670 --> 00:02:42.630 align:middle
la noción de componentes.
Así que un componente no es ni

00:02:42.830 --> 00:02:44.000 align:middle
mas ni menos que una subclase de
la clase

00:02:44.200 --> 00:02:45.820 align:middle
WAComponent, facilitada
por el Framework Seaside.

00:02:47.780 --> 00:02:50.500 align:middle
Así que un componente es reutilizable
y con estado y

00:02:50.730 --> 00:02:55.000 align:middle
sera en HTML por ejemplo
bajo la forma de un div y ect.

00:02:56.010 --> 00:02:59.380 align:middle
Así que una aplicación Web en
Seaside no es ni mas ni m

00:02:59.580 --> 00:03:01.670 align:middle
ni menos que un componente raiz,
aquí por ejemplo

00:03:01.870 --> 00:03:04.730 align:middle
WACounter, que podremos
registra en el sistema como una

00:03:04.930 --> 00:03:07.200 align:middle
aplicación Web bajo el nombre Counter.

00:03:07.400 --> 00:03:09.930 align:middle
Así que y podremos acceder a la 
url con el nombre Counter.

00:03:11.060 --> 00:03:13.750 align:middle
Aquí un ejemplo mi aplicación
Counter

00:03:13.950 --> 00:03:17.380 align:middle
en la url, es un componente
que se muestra aquí en

00:03:17.580 --> 00:03:21.780 align:middle
HTML, así que la valor del Counter,
y aquí tenemos dos links "tac

00:03:22.100 --> 00:03:24.450 align:middle
plus plus" así que si pulso 
encima incrementara

00:03:24.650 --> 00:03:26.920 align:middle
el valor del Counter, y
"menos menos" si pulso

00:03:27.120 --> 00:03:28.030 align:middle
encima reducirá el valor del 
Counter.

00:03:28.680 --> 00:03:30.210 align:middle
Así que ahora os mostraré el
código para

00:03:30.410 --> 00:03:31.490 align:middle
implementar esta aplicación Web.

00:03:31.800 --> 00:03:32.750 align:middle
es extremadamente simple.

00:03:33.020 --> 00:03:35.230 align:middle
Construiré un subclase de 
SWComponent  a la que llamo

00:03:35.430 --> 00:03:39.150 align:middle
WACounter, esta clase tendrá una
variable de instacia: count.

00:03:39.770 --> 00:03:43.420 align:middle
Un método par inicializar el
valor del Counter a 0.

00:03:44.060 --> 00:03:45.770 align:middle
Un método de increment para
aumentar el valor del

00:03:46.000 --> 00:03:48.630 align:middle
Counter, un método de decrement.
De hecho solo nos

00:03:48.830 --> 00:03:50.220 align:middle
falta ahora la parte HTML.

00:03:50.420 --> 00:03:53.180 align:middle
Así que como vamos a describir
este Counter incapaz

00:03:53.380 --> 00:03:56.290 align:middle
de mostrarse en HTML? De hecho
sera necesario simplemente

00:03:56.490 --> 00:03:59.210 align:middle
facilitar un método 
renderContenOn, que es

00:03:59.410 --> 00:04:02.720 align:middle
un parámetro, y este parámetro nos
ayudara a generar el código HTML.

00:04:04.610 --> 00:04:05.520 align:middle
aquí un ejemplo.

00:04:05.840 --> 00:04:08.010 align:middle
aquí facilito el método
renderContentOn a la clase

00:04:08.210 --> 00:04:12.750 align:middle
Counter y me sirvo del parámetro,
si , que

00:04:12.950 --> 00:04:16.410 align:middle
es un objeto clásico Pharo,
instancia de la clase

00:04:16.610 --> 00:04:19.640 align:middle
WHtmlCanvas, facilitada por
Seaside, y

00:04:19.840 --> 00:04:22.360 align:middle
enviaré mensajes a este
objeto para generar el código HTML.

00:04:22.560 --> 00:04:25.100 align:middle
Así que puedo generar un titulo
una ancla así que 

00:04:25.300 --> 00:04:27.760 align:middle
una ancla es un link, y aquí
soy capaz de especificar

00:04:27.960 --> 00:04:30.650 align:middle
a que mensaje callback,
cuando pulso en este link

00:04:30.870 --> 00:04:32.100 align:middle
ejecuta este block de código.

00:04:32.810 --> 00:04:35.500 align:middle
aquí pulso sobre el link 
que se llama "+ +",

00:04:35.760 --> 00:04:38.760 align:middle
esto ejecutara el método self
increase del Counter, y

00:04:38.960 --> 00:04:42.000 align:middle
cuando pulso sobre el link
"- -" esto ejecutara el

00:04:42.200 --> 00:04:44.000 align:middle
método self decrease del Counter.

00:04:44.490 --> 00:04:45.250 align:middle
Así de simple.

00:04:46.940 --> 00:04:47.700 align:middle
Podemos ir más lejos.

00:04:47.900 --> 00:04:50.490 align:middle
Si un error se produce cuando
pulso sobre un

00:04:50.690 --> 00:04:52.470 align:middle
link, es decir que en este
callback

00:04:52.670 --> 00:04:55.170 align:middle
he introducido a propósito un
punto de control.

00:04:55.370 --> 00:04:58.890 align:middle
Esto podría ser un error pero
he introducido realmente un

00:04:59.090 --> 00:05:01.050 align:middle
punto de corte en el 
método Decrease, selfhaltIf.

00:05:02.060 --> 00:05:05.770 align:middle
Así que si el contador se reduce
y pasa a negativo en este

00:05:06.000 --> 00:05:07.760 align:middle
caso se dispara la aparición
del debugger.

00:05:07.960 --> 00:05:12.230 align:middle
Y vemos que hago esto en mi 
aplicación

00:05:12.430 --> 00:05:15.080 align:middle
Web tengo el debugger aquí se
se muestra, y vemos

00:05:15.280 --> 00:05:18.220 align:middle
bien la pila de ejecución
del programa aquí, con

00:05:18.420 --> 00:05:22.420 align:middle
el método renderCounterOn,
y el decrease aquí.

00:05:23.670 --> 00:05:25.020 align:middle
Así que nos hemos parado
correctamente en el haltIf.

00:05:25.850 --> 00:05:28.000 align:middle
aquí puedo modificar directamente
el código de mi 

00:05:28.200 --> 00:05:31.340 align:middle
aplicación, pulsar el
botón Proceed y my

00:05:31.540 --> 00:05:35.660 align:middle
navegador recibirá la respuesta
HTML como si nada hubiera ocurrido.

00:05:39.170 --> 00:05:41.000 align:middle
Así que otro problema con
las aplicaciones Web es el

00:05:41.260 --> 00:05:44.350 align:middle
problema del Back Button. Así que 
la idea es que cuando el usuario

00:05:44.550 --> 00:05:47.020 align:middle
pulsa el Back Button esto
desincroniza el estado entre

00:05:47.220 --> 00:05:49.420 align:middle
el servidor y el cliente.
Por ejemplo: imaginemos que

00:05:49.620 --> 00:05:52.440 align:middle
incremento 5 veces mi contador,
así que vale 5, delante

00:05:52.640 --> 00:05:56.420 align:middle
mio tengo un 5 que se muestra.
Pulso el botón

00:05:56.620 --> 00:05:59.820 align:middle
de vuelta de mi navegador.
Así que voy a ver el valor 4.

00:06:00.080 --> 00:06:02.000 align:middle
Por contra el servidor no esta
al corriente que he

00:06:02.200 --> 00:06:04.550 align:middle
pulsado este botón de vuelta.
Así que si vuelvo a pulsar sobre

00:06:04.750 --> 00:06:08.870 align:middle
"Incrementar el valor del contador" 
veré la respuesta 6.

00:06:09.370 --> 00:06:12.230 align:middle
Así que este es un problema
puesto el que lado servidor

00:06:12.430 --> 00:06:14.920 align:middle
pensaba que estaba aun en 5,
y al incrementar pasamos a 6.

00:06:15.340 --> 00:06:17.250 align:middle
¿Como gestionamos esto con Seaside?

00:06:17.450 --> 00:06:18.210 align:middle
es muy sencillo.

00:06:18.450 --> 00:06:20.660 align:middle
Vamos a definir un nuevo método
en la clase Counter

00:06:20.880 --> 00:06:23.720 align:middle
que es el método States,
que devolverá un conjunto de

00:06:23.920 --> 00:06:25.890 align:middle
objetos de los que es necesario
conservar el estado cuando pulsamos

00:06:26.090 --> 00:06:30.290 align:middle
en el botón de vuelta. En este
caso únicamente el objeto

00:06:30.490 --> 00:06:32.200 align:middle
self es el contador corriente.

00:06:33.120 --> 00:06:35.660 align:middle
De acuerdo! Ahora si pulso el 
botón Devolver y

00:06:35.860 --> 00:06:37.940 align:middle
vuelvo a pulsar increment, tendré 
el valor correcto 5

00:06:38.140 --> 00:06:38.900 align:middle
del ejemplo anterior.

00:06:41.660 --> 00:06:46.390 align:middle
Así que los Callback de hecho
son bloques de código

00:06:46.600 --> 00:06:49.280 align:middle
en los que tenemos toda la 
potencia de Pharo.

00:06:49.480 --> 00:06:52.880 align:middle
Así que aquí en un Callback puedo
escribir cualquier código Pharo.

00:06:54.130 --> 00:06:57.090 align:middle
aquí he tomado un ejemplo mas complejo
donde esta vez

00:06:57.580 --> 00:07:00.270 align:middle
puedo utilizar una alternativa
para decir incremento el

00:07:00.470 --> 00:07:03.120 align:middle
contador de un punto o de
dos puntos en función de si es

00:07:03.320 --> 00:07:05.490 align:middle
un nombre par o impar por ejemplo.

00:07:06.040 --> 00:07:10.140 align:middle
My Counter se incrementara mas rápido
en un caso en

00:07:10.340 --> 00:07:11.630 align:middle
en lugar de incrementarse de golpe.

00:07:12.680 --> 00:07:17.360 align:middle
Podemos ver que tenemos realmente
una gran potencia 

00:07:17.560 --> 00:07:18.350 align:middle
con estos bloques de Callback.

00:07:21.660 --> 00:07:24.230 align:middle
Por ejemplo en el caso anterior,
si 

00:07:24.430 --> 00:07:28.330 align:middle
pulso en "+ +" aquí
llegaremos a

00:07:28.890 --> 00:07:33.160 align:middle
una nueva ventana que me dice
que se trata de un numero par.

00:07:36.560 --> 00:07:37.950 align:middle
Os puedo mostrar otro ejemplo.

00:07:38.730 --> 00:07:42.050 align:middle
En este caso es una aplicación en la
que el usuario

00:07:42.250 --> 00:07:43.060 align:middle
introduce su nombre.

00:07:43.450 --> 00:07:45.340 align:middle
Nos gustaría que el usuario pudiera
introducir su nombre

00:07:45.540 --> 00:07:48.430 align:middle
y cuando pulse el botón 
Say Hello aquí, 

00:07:48.630 --> 00:07:50.770 align:middle
nos gustaría mostrarle una
cadena de caracteres que es

00:07:51.450 --> 00:07:54.890 align:middle
"Hi" y su nombre, el nombre
que ha introducido al inicio aquí.

00:07:55.090 --> 00:07:58.440 align:middle
De acuerdo! Como puedo hacer
para escribir esta

00:07:58.640 --> 00:08:00.350 align:middle
aplicación en Seaside?

00:08:00.650 --> 00:08:01.510 align:middle
Muy sencillo.

00:08:01.940 --> 00:08:03.910 align:middle
Construiré una subclase de la 
classe WAComponent,

00:08:05.060 --> 00:08:06.750 align:middle
que dotare con una variable de
instancia username.

00:08:07.500 --> 00:08:09.500 align:middle
Y en el método renderContenOn,
esta que os 

00:08:09.700 --> 00:08:13.760 align:middle
enseño aquí, simplemente
mostraré el campo username

00:08:14.310 --> 00:08:15.780 align:middle
y diré un Text Input.

00:08:16.040 --> 00:08:18.090 align:middle
Así que le Text Input es el 
campo de texto que habéis

00:08:18.290 --> 00:08:20.270 align:middle
visto anteriormente en el 
que el usuario podía escribir "Bob".

00:08:20.820 --> 00:08:24.040 align:middle
Y tendré un Callback,
esta vez el Callback es un bloque

00:08:24.240 --> 00:08:26.260 align:middle
un bloque que es a un parámetro Value.

00:08:26.820 --> 00:08:29.290 align:middle
Así que el parámetro Value este
bloque sera la cadena de

00:08:29.490 --> 00:08:31.910 align:middle
caracteres que ha introducido
el usuario en el campo

00:08:32.110 --> 00:08:33.530 align:middle
texto, en nuestro ejemplo Bob.

00:08:33.870 --> 00:08:35.370 align:middle
Y seremos capaces de guardar 
esta cadena de

00:08:35.570 --> 00:08:38.820 align:middle
caracteres en la variable de
instancia del componente "Peter", username.

00:08:39.600 --> 00:08:43.610 align:middle
Luego cuando pulsemos en el 
SubmitButton

00:08:43.810 --> 00:08:45.590 align:middle
diremos cuando pulso sobre 
el botón seré capaz

00:08:45.790 --> 00:08:48.400 align:middle
self inform, aquí llamare
a un nuevo componente

00:08:48.600 --> 00:08:51.580 align:middle
en el que diré
"Muestra la cadena Hi Bob".

00:08:52.000 --> 00:08:54.770 align:middle
Así que concateno la cadena de
caracteres con el campo

00:08:55.000 --> 00:08:56.390 align:middle
Hi con el que había entrado en 
el campo texto anterior.

00:09:00.120 --> 00:09:02.850 align:middle
Espero que hayáis remarcado que,
para aquellos que

00:09:03.050 --> 00:09:05.440 align:middle
tenéis la costumbre de construir
aplicaciones Web, en Seaside

00:09:05.640 --> 00:09:09.190 align:middle
no he hablado de partes de la
petición, es que

00:09:09.390 --> 00:09:11.860 align:middle
hay parametros en la petición,
en la URL etc.

00:09:12.060 --> 00:09:13.870 align:middle
No he hablado de configuración del 
fichero con sus correos

00:09:14.070 --> 00:09:15.620 align:middle
complicados, no he hablado de
ficheros, no he 

00:09:15.820 --> 00:09:20.230 align:middle
hablado de paginas, no he hablado
de links con la pagina siguiente.

00:09:21.020 --> 00:09:24.770 align:middle
De hecho solo he hablado de
componentes, objetos,

00:09:25.000 --> 00:09:28.150 align:middle
mensajes, Callback y de la
posibilidad de inspeccionar

00:09:28.820 --> 00:09:31.930 align:middle
directamente el código gracias
al debuger de Pharo.

00:09:33.420 --> 00:09:35.000 align:middle
En resumen lo que se debe
retener es que una

00:09:35.200 --> 00:09:37.620 align:middle
aplicación Web en Seaside es fácil, 

00:09:37.820 --> 00:09:40.190 align:middle
es un componente raíz y veremos
que se puede combinar los

00:09:40.390 --> 00:09:43.790 align:middle
componentes entre ellos para construir
aplicaciones más complejas.

00:09:44.670 --> 00:09:47.480 align:middle
Un componente sabe mostrarse en HTML
gracias a su método renderCounterOn.

00:09:47.680 --> 00:09:52.630 align:middle
Disponemos de un lenguaje dedicado
que permite generar el código

00:09:52.830 --> 00:09:54.170 align:middle
HTML para cada uno de los componentes.

00:09:54.520 --> 00:09:57.700 align:middle
Veremos este lenguaje más en detalle
en la próxima secuencia.

