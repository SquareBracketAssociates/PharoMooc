WEBVTT

00:00:00.120 --> 00:00:02.360 align:middle
En esta sesión,
Mencionaré dos puntos:

00:00:02.520 --> 00:00:06.840 align:middle
secuencia y cascada,
que son muy comunes en Pharo.

00:00:07.520 --> 00:00:13.000 align:middle
A menudo hay
varias expresiones seguidas

00:00:13.160 --> 00:00:14.640 align:middle
Deben estar separadas.

00:00:14.800 --> 00:00:17.800 align:middle
Lo hace con un punto
como en el ejemplo.

00:00:17.960 --> 00:00:22.600 align:middle
Aquí tiene Transcript cr
y un punto

00:00:22.760 --> 00:00:27.760 align:middle
Transcript es una pequeña herramienta.
para regitrsr mensajes.

00:00:27.920 --> 00:00:31.400 align:middle
Quiero una nueva linea.
Quiero mostrar el objeto 1.

00:00:32.320 --> 00:00:36.360 align:middle
Quiero mostrar 2
Podría o no haber usado un punto.

00:00:37.040 --> 00:00:39.800 align:middle
Las expresiones
estan separados por puntos.

00:00:41.600 --> 00:00:44.160 align:middle
Veamos otro ejemplo.

00:00:44.320 --> 00:00:47.320 align:middle
He definido dos variables locales.

00:00:47.960 --> 00:00:51.640 align:middle
Defino un objeto Workstation,
que es un simulador de red.

00:00:51.800 --> 00:00:55.600 align:middle
Escribo un punto
ya que es el final de esta expresión.

00:00:55.760 --> 00:00:59.600 align:middle
Sigo con la próxima expresión.
Podría haber usado un punto aquí.

00:00:59.760 --> 00:01:03.520 align:middle
Como expliqué, un período es un separador,
no un terminador

00:01:03.680 --> 00:01:06.560 align:middle
En Java, debes usar
un punto y coma aquí y allá.

00:01:06.720 --> 00:01:08.480 align:middle
En Pharo, no tienes que hacerlo.

00:01:09.840 --> 00:01:14.680 align:middle
Lo que puede ser un poco extraño
para los principiantes

00:01:14.840 --> 00:01:19.280 align:middle
es que las barras verticales
son definiciones de variables locales.

00:01:19.440 --> 00:01:21.320 align:middle
Habrá una lección sobre eso.

00:01:21.480 --> 00:01:23.880 align:middle
No se usa un punto aquí.

00:01:24.040 --> 00:01:27.480 align:middle
Por lo general, usted define la variable local
y luego empieza

00:01:27.640 --> 00:01:30.400 align:middle
Después de la primera expresión,
se usa un punto

00:01:30.560 --> 00:01:32.680 align:middle
Hay algo mas:

00:01:32.840 --> 00:01:37.320 align:middle
a menudo le gustaría enviar varios
mensajes al mismo objeto.

00:01:37.480 --> 00:01:41.000 align:middle
Pero ya que somos perezosos,
no queremos repetir el receptor.

00:01:41.160 --> 00:01:42.600 align:middle
Mire esto:

00:01:42.760 --> 00:01:46.280 align:middle
Escribo Transcript cr.
Transcript show: Transcript ...

00:01:46.440 --> 00:01:49.720 align:middle
Ya he dicho Transcript
tres veces en vez de una.

00:01:49.880 --> 00:01:52.600 align:middle
Puedo hacerlo:
Utilizaré una cascada, el punto y coma.

00:01:52.760 --> 00:01:54.720 align:middle
Escribo: Transcript cr;

00:01:54.880 --> 00:01:58.000 align:middle
Envío el mensaje cr
al objeto Transcript.

00:01:58.160 --> 00:01:59.480 align:middle
La cascada dice:

00:01:59.640 --> 00:02:04.120 align:middle
"A partir de ahora, todos los mensajes se envían
al mismo receptor que el primero ".

00:02:04.280 --> 00:02:07.120 align:middle
Significa show: 1 se envía a Transcript

00:02:07.280 --> 00:02:08.920 align:middle
y show: 2 a Transcript.

00:02:09.560 --> 00:02:12.640 align:middle
Lo diré de nuevo, ya que es inusual.

00:02:14.320 --> 00:02:17.400 align:middle
Envío el primer mensaje normalmente.

00:02:17.560 --> 00:02:21.520 align:middle
En lugar de usar un punto,
que es un separador, uso un punto y coma.

00:02:21.680 --> 00:02:25.280 align:middle
Significa cada mensaje adicional
debe enviarse al mismo receptor.

00:02:25.440 --> 00:02:27.280 align:middle
show:1 se envía al mismo receptor.

00:02:27.440 --> 00:02:30.600 align:middle
show:2 se envía al mismo receptor.

00:02:32.240 --> 00:02:36.520 align:middle
Otro ejemplo:
imagina que quieres crear una colección.

00:02:36.680 --> 00:02:40.720 align:middle
Tengo una coleccion,
así que defino una variable c.

00:02:40.880 --> 00:02:44.480 align:middle
Escribo la colección en c.
¿Ve el punto aquí?

00:02:44.640 --> 00:02:47.240 align:middle
Agrego 1 y 2 a la colección.

00:02:47.400 --> 00:02:49.960 align:middle
Estas dos expresiones
son exactamente iguales

00:02:50.120 --> 00:02:52.920 align:middle
Significa que escribo:
OrderedCollection new

00:02:53.080 --> 00:02:57.240 align:middle
Lo creo y luego agrego el primer mensaje
add:1 para agregar un elemento.

00:02:57.400 --> 00:03:01.360 align:middle
El punto y coma significa este mensaje
debe enviarse a esta colección.

00:03:01.520 --> 00:03:04.080 align:middle
Como principiantes en Pharo, le aconsejaría

00:03:04.240 --> 00:03:07.080 align:middle
no molestarse en usar la cascada.

00:03:07.240 --> 00:03:10.240 align:middle
Lo presenté
porque leerás el código.

00:03:10.400 --> 00:03:12.120 align:middle
La gente lo usa en el código.

00:03:12.280 --> 00:03:16.360 align:middle
Cuando se sientas cómodo
con esta sintaxis y con puntos,

00:03:16.520 --> 00:03:20.320 align:middle
puede empezar a pensar
en ser un poco más flexible

00:03:20.480 --> 00:03:23.640 align:middle
y usa la cascada.
Así aprendí.

00:03:23.800 --> 00:03:27.160 align:middle
Solo vaya paso a paso.

00:03:27.320 --> 00:03:29.160 align:middle
¿Qué estudiamos?

00:03:29.320 --> 00:03:33.360 align:middle
. es un separador
Es lo mismo que; en java

00:03:33.520 --> 00:03:38.840 align:middle
; es una cascada que es útil
para evitar repetir el mismo receptor.

00:03:39.000 --> 00:03:43.640 align:middle
La cascada devuelve el valor
del último mensaje enviado.

