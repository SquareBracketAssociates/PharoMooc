WEBVTT

00:00:00.560 --> 00:00:01.760 align:middle
Hola a todos.

00:00:01.920 --> 00:00:05.280 align:middle
En este curso,
Aprenderemos sobre el método usted yourself.

00:00:06.040 --> 00:00:10.520 align:middle
Es aparentemente inútil,
y, sin embargo, es muy útil.

00:00:10.680 --> 00:00:12.280 align:middle
Comencemos con un ejercicio.

00:00:12.440 --> 00:00:16.480 align:middle
Para esta expresión, Set new add:2,

00:00:18.320 --> 00:00:23.680 align:middle
nos gustaría obtener un conjunto
que contiene el valor 2

00:00:23.840 --> 00:00:27.200 align:middle
para que regrese solo el valor 2.

00:00:27.360 --> 00:00:31.240 align:middle
¿Por qué obtiene el valor 2
en lugar de un conjunto que contiene 2?

00:00:31.400 --> 00:00:34.880 align:middle
Si mira el método add:
implementado en la clase Set,

00:00:35.040 --> 00:00:37.800 align:middle
puede ver que devuelve su parámetro.

00:00:42.320 --> 00:00:44.520 align:middle
En la expresión Set new add: 2,

00:00:46.160 --> 00:00:48.880 align:middle
la expresión Set
devuelve la clase Set.

00:00:50.480 --> 00:00:54.960 align:middle
Cuando envía new a la clase Set,
devuelve un nuevo conjunto.

00:00:55.960 --> 00:00:57.520 align:middle
Set new add: 2

00:00:57.680 --> 00:01:01.000 align:middle
devuelve el valor devuelto por add:2,
que es 2

00:01:01.160 --> 00:01:02.720 align:middle
El conjunto se pierde.

00:01:02.880 --> 00:01:05.280 align:middle
Para resolver este problema,

00:01:05.440 --> 00:01:09.000 align:middle
puede escribir las expresiones
paso a paso.

00:01:09.840 --> 00:01:14.280 align:middle
Puede crear una variable temporal:
usted declara la variable s.

00:01:15.320 --> 00:01:18.920 align:middle
Asigne el nuevo conjunto a s.

00:01:19.720 --> 00:01:21.800 align:middle
Agregue 2 a s.

00:01:22.920 --> 00:01:28.480 align:middle
s ahora contiene
Un conjunto que contiene el valor 2.

00:01:28.640 --> 00:01:31.240 align:middle
Es lo que queríamos.

00:01:31.400 --> 00:01:33.920 align:middle
Puede simplificar estas expresiones

00:01:34.080 --> 00:01:36.440 align:middle
usando el método yourself.

00:01:36.600 --> 00:01:38.200 align:middle
Si mira más de cerca,

00:01:38.360 --> 00:01:42.960 align:middle
verá que contiene solo una cosa:
return self.

00:01:43.120 --> 00:01:47.160 align:middle
return self, siendo opcional,
este método también podría estar vacío

00:01:47.320 --> 00:01:49.960 align:middle
y no hacer nada
excepto devolver su receptor.

00:01:50.920 --> 00:01:55.280 align:middle
Este método aparentemente
solo devuelve su receptor.

00:01:56.040 --> 00:01:59.680 align:middle
Y sin embargo, es útil en tales casos.

00:02:00.800 --> 00:02:03.400 align:middle
gracias al operador de cascada.

00:02:03.560 --> 00:02:05.360 align:middle
Después de agregar 2,

00:02:05.520 --> 00:02:08.960 align:middle
vamos a ejecutar el método yourself

00:02:09.120 --> 00:02:11.040 align:middle
que devolverá el receptor

00:02:11.200 --> 00:02:14.360 align:middle
para que la expresión completa
pueda ser el receptor,

00:02:14.520 --> 00:02:17.560 align:middle
que es el nuevo conjunto.

00:02:18.480 --> 00:02:22.520 align:middle
Si tomo Set new,

00:02:22.680 --> 00:02:24.000 align:middle
que es el nuevo conjunto,

00:02:24.760 --> 00:02:28.600 align:middle
y escribo add:2 aplicado a Set new,

00:02:28.760 --> 00:02:30.320 align:middle
devuelve 2

00:02:30.480 --> 00:02:34.280 align:middle
Pero gracias al operador de cascada 
seguido de yourself,

00:02:34.440 --> 00:02:39.240 align:middle
la expresion
en su conjunto devuelve el nuevo conjunto.

00:02:40.360 --> 00:02:43.240 align:middle
¿Por qué la cascada
regresa sistemáticamente

00:02:43.400 --> 00:02:45.760 align:middle
el valor que su última expresión regresa?

00:02:46.600 --> 00:02:48.800 align:middle
La cascada, en este caso,

00:02:48.960 --> 00:02:52.840 align:middle
devuelve el valor que yourself devuelve.

00:02:53.000 --> 00:02:56.960 align:middle
A menudo usamos yourself y la cascada

00:02:57.120 --> 00:03:00.120 align:middle
en los métodos de creación de instancias.

00:03:00.280 --> 00:03:04.840 align:middle
Estos son métodos de clase

00:03:05.000 --> 00:03:07.280 align:middle
de mensajes que se enviarán a clases

00:03:07.440 --> 00:03:09.240 align:middle
que devuelve nuevas instancias.

00:03:10.040 --> 00:03:12.360 align:middle
Para crear un nuevo conjunto

00:03:12.520 --> 00:03:16.440 align:middle
que contiene un objeto de forma predeterminada,

00:03:16.600 --> 00:03:21.680 align:middle
puedo enviar el mensaje with:anObject
a Set.

00:03:21.840 --> 00:03:25.520 align:middle
Este código se ejecuta
para crear un nuevo conjunto,

00:03:25.680 --> 00:03:27.920 align:middle
para ponerlo en la variable de instancia,

00:03:28.680 --> 00:03:31.600 align:middle
para agregar a instancia el nuevo parámetro,

00:03:31.760 --> 00:03:34.080 align:middle
y para devolver la instancia.

00:03:34.240 --> 00:03:38.080 align:middle
Puedo escribir esta expresión como un todo
usando yourself

00:03:38.240 --> 00:03:42.080 align:middle
de una forma más breve y más idiomática.

00:03:42.240 --> 00:03:45.920 align:middle
Este código se encuentra generalmente en Pharo.

00:03:46.080 --> 00:03:50.000 align:middle
Es importante dominar el punto y coma,

00:03:50.160 --> 00:03:52.400 align:middle
la cascada y yourself.

00:03:53.080 --> 00:03:56.920 align:middle
Lo que debes recordar
al final de este curso

00:03:57.080 --> 00:04:00.480 align:middle
Es que algunos métodos,
aunque son muy simples,

00:04:00.640 --> 00:04:03.240 align:middle
Puede ser muy potente y se usan mucho.

00:04:05.200 --> 00:04:09.440 align:middle
La cascada, el punto y coma,
y el método yourself

00:04:09.600 --> 00:04:11.880 align:middle
se usan muy a menudo juntos

00:04:12.040 --> 00:04:15.240 align:middle
para asegurarse de que una expresión completa

00:04:15.400 --> 00:04:17.960 align:middle
devuelve el valor esperado

