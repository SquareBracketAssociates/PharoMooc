WEBVTT

00:00:00.000 --> 00:00:02.160 align:middle
En esta sesión, le presentaré los bloques.

00:00:02.320 --> 00:00:06.640 align:middle
Son una especie de métodos anónimos.
También se llaman cierres léxicos.

00:00:06.800 --> 00:00:08.720 align:middle
Están en todas partes en Pharo.

00:00:08.880 --> 00:00:12.160 align:middle
Son la base de los ciclos,
condicionales, iteradores,

00:00:12.320 --> 00:00:14.680 align:middle
e incluso GUI o lenguajes dedicados.

00:00:14.840 --> 00:00:17.120 align:middle
Están en el corazón del sistema.

00:00:17.280 --> 00:00:21.280 align:middle
Han sido introducidos sólo
en la última versión de Java.

00:00:23.000 --> 00:00:27.400 align:middle
Para definir un bloque, use corchetes.

00:00:27.560 --> 00:00:28.920 align:middle
Este es un ejemplo:

00:00:29.080 --> 00:00:32.760 align:middle
[expresiones ...]

00:00:34.840 --> 00:00:37.840 align:middle
Hablaremos sobre la definición de bloques.

00:00:38.000 --> 00:00:40.000 align:middle
Otro ejemplo:

00:00:40.160 --> 00:00:42.840 align:middle
esta expresión, 1/0,

00:00:43.000 --> 00:00:46.760 align:middle
Devuelve un error cuando se ejecuta.

00:00:47.760 --> 00:00:50.600 align:middle
Vamos a encapsularla en un bloque

00:00:50.760 --> 00:00:54.920 align:middle
definiendo un bloque que contiene
la expresión 1/0.

00:00:55.080 --> 00:01:00.040 align:middle
Si evalúo la definición de este bloque,
no pasa nada; no hay error

00:01:00.200 --> 00:01:02.400 align:middle
Devuelve el bloque

00:01:02.560 --> 00:01:06.160 align:middle
debido a que una definición de bloque
no ejecuta su cuerpo.

00:01:07.720 --> 00:01:11.480 align:middle
Puede definir tantos bloques
como desée:

00:01:11.640 --> 00:01:14.240 align:middle
las expresiones en su cuerpo están congeladas.

00:01:15.240 --> 00:01:18.560 align:middle
Para evaluar un bloque
y las expresiones en su cuerpo,

00:01:18.720 --> 00:01:21.760 align:middle
debe hacerlo explícitamente
a través del mensaje value:

00:01:21.920 --> 00:01:24.520 align:middle
Por ejemplo, este es un bloque:
[2 + 6]

00:01:24.680 --> 00:01:26.640 align:middle
Le envía el mensaje value:

00:01:26.800 --> 00:01:29.760 align:middle
Las expresiones en el cuerpo
son evaluados

00:01:29.920 --> 00:01:33.360 align:middle
Devuelve el resultado, 8.

00:01:34.320 --> 00:01:37.760 align:middle
Sin embargo, si el bloque
contiene expresiones erróneas,

00:01:37.920 --> 00:01:40.960 align:middle
se devuelve el error
cuando se evalúa el bloque,

00:01:41.120 --> 00:01:42.720 align:middle
como en el ejemplo 2.

00:01:42.880 --> 00:01:46.560 align:middle
[1/0] envío el mensaje value
al bloque

00:01:46.720 --> 00:01:48.400 align:middle
Devuelve un error.

00:01:49.760 --> 00:01:52.960 align:middle
Los bloques también pueden tener argumentos.

00:01:53.120 --> 00:01:56.240 align:middle
como en este argumento.
Es como los métodos.

00:01:56.400 --> 00:02:01.400 align:middle
Un bloque siempre se abre con [

00:02:01.560 --> 00:02:03.120 align:middle
y cerrado con ].

00:02:03.280 --> 00:02:08.360 align:middle
Todos los argumentos tienen por prefijo
los dos puntos

00:02:08.520 --> 00:02:11.760 align:middle
Luego hay |, una barra vertical

00:02:11.920 --> 00:02:16.240 align:middle
que separa la declaración de argumentos
del cuerpo del bloque,

00:02:16.400 --> 00:02:18.200 align:middle
la expresion que contiene

00:02:18.360 --> 00:02:21.560 align:middle
el argumento en este ejemplo es x.

00:02:21.720 --> 00:02:24.360 align:middle
x + 2 es la única expresión
en el bloque

00:02:24.520 --> 00:02:27.120 align:middle
Si envío el mensaje value
al bloque,

00:02:27.280 --> 00:02:31.040 align:middle
tiene que usar un mensaje específico,
value: con un parámetro.

00:02:31.200 --> 00:02:35.600 align:middle
Al mismo tiempo, pasa value: 5
que reemplaza el argumento x

00:02:35.760 --> 00:02:38.560 align:middle
cuando las expresiones del bloque
son evaluados

00:02:38.720 --> 00:02:42.880 align:middle
Si envío el mensaje value: 5
a este bloque,

00:02:43.040 --> 00:02:44.400 align:middle
devuelve 7

00:02:44.560 --> 00:02:48.160 align:middle
ya que el valor de x es 5
cuando se evalúa el bloque.

00:02:48.800 --> 00:02:50.680 align:middle
Esto es como mi ejemplo anterior,

00:02:50.840 --> 00:02:55.200 align:middle
pero con varias expresiones
en el bloque

00:02:55.360 --> 00:02:58.720 align:middle
Tengo dos aquí:x + 33 y x + 2.

00:02:58.880 --> 00:03:01.400 align:middle
Cuando envío value: 5

00:03:01.560 --> 00:03:04.680 align:middle
para evaluar las expresiones
en el bloque,

00:03:04.840 --> 00:03:07.600 align:middle
la evaluación regresa

00:03:07.760 --> 00:03:12.120 align:middle
solo el valor de la última expresión
en el bloque

00:03:12.280 --> 00:03:16.200 align:middle
Solo devuelve el resultado de x + 2,

00:03:16.960 --> 00:03:17.960 align:middle
7.

00:03:19.640 --> 00:03:22.480 align:middle
Los bloques son objetos normales en Pharo.

00:03:22.640 --> 00:03:25.120 align:middle
Pueden ser almacenados
en variables temporales.

00:03:25.280 --> 00:03:28.160 align:middle
Se pueden enviar mensajes
como los objetos normales

00:03:28.320 --> 00:03:31.120 align:middle
Este es el ejemplo que tengo para usted aquí.

00:03:31.280 --> 00:03:35.160 align:middle
Puede almacenar la definición
de este bloque, x + 2,

00:03:35.320 --> 00:03:37.080 align:middle
en una variable llamada add2.

00:03:37.240 --> 00:03:40.680 align:middle
Luego envias mensajes
para evaluar el bloque varias veces.

00:03:40.840 --> 00:03:43.000 align:middle
Envío el mensaje value: una vez

00:03:43.160 --> 00:03:46.640 align:middle
diciéndole que se evalúe a sí mismo
con value: 5 regresa 7.

00:03:46.800 --> 00:03:49.720 align:middle
Luego el mensaje value: 33.

00:03:49.880 --> 00:03:51.920 align:middle
Regresa 35

00:03:52.080 --> 00:03:55.800 align:middle
También puede definir bloques
con varios argumentos

00:03:55.960 --> 00:04:00.720 align:middle
Por ejemplo, x e y.
Este bloque tiene dos argumentos.

00:04:00.880 --> 00:04:05.160 align:middle
¿Pero cómo evaluarías este bloque?

00:04:05.320 --> 00:04:09.840 align:middle
Ya que necesita pasar dos valores
para activar su evaluación,

00:04:10.000 --> 00:04:13.200 align:middle
5 y 7 que reemplazan a x e y?

00:04:13.840 --> 00:04:19.040 align:middle
La respuesta es que usa
el mensaje value: vale:,

00:04:19.760 --> 00:04:22.760 align:middle
un método del la clase bloque.

00:04:22.920 --> 00:04:28.080 align:middle
5 reemplaza x y 7 reemplaza y.

00:04:28.240 --> 00:04:29.880 align:middle
Regresa 12

00:04:32.880 --> 00:04:36.960 align:middle
Como los métodos, los bloques
también puede definir variables temporales.

00:04:37.120 --> 00:04:40.680 align:middle
Este ejemplo es un ejemplo real:

00:04:40.840 --> 00:04:43.360 align:middle
proviene de la colección de clases.

00:04:43.520 --> 00:04:47.880 align:middle
El bloque comienza aquí.
Termina ahí

00:04:48.880 --> 00:04:52.800 align:middle
Se necesita un argumento llamado :index.

00:04:53.800 --> 00:04:57.520 align:middle
Se necesita una variable temporal
definida aquí entre dos |.

00:04:57.680 --> 00:04:58.960 align:middle
Se llama args.

00:04:59.760 --> 00:05:02.200 align:middle
Esta variable temporal args

00:05:02.360 --> 00:05:07.160 align:middle
existe solo durante la evaluación
de las expresiones en el bloque.

00:05:09.080 --> 00:05:11.920 align:middle
Los bloques se definen en los métodos.

00:05:12.080 --> 00:05:16.240 align:middle
En un bloque, también puede usar un retorno.

00:05:16.400 --> 00:05:20.600 align:middle
Esto es un ejemplo
de la clase entero.

00:05:20.760 --> 00:05:23.280 align:middle
El método se llama factorial.

00:05:24.040 --> 00:05:27.960 align:middle
Hay varios bloques en el método.

00:05:28.120 --> 00:05:31.760 align:middle
Estos bloques contienen retornos, o ^.

00:05:31.920 --> 00:05:35.720 align:middle
El retorno ayuda
para salir del método factorial.

00:05:35.880 --> 00:05:39.600 align:middle
Por ejemplo, si envío el mensaje
factorial al entero 0,

00:05:39.760 --> 00:05:41.640 align:middle
Devuelve la respuesta 1.

00:05:41.800 --> 00:05:46.880 align:middle
Obtengo esta respuesta gracias a este ^,
el primero en el bloque,

00:05:47.040 --> 00:05:49.640 align:middle
lo que ayuda
para salir del método factorial.

00:05:49.800 --> 00:05:52.920 align:middle
Un retorno en un bloque ayuda a
salir del método

00:05:53.080 --> 00:05:54.960 align:middle
que define el bloque.

00:05:56.680 --> 00:05:59.360 align:middle
Un pequeño consejo
para cuando use bloques:

00:05:59.520 --> 00:06:02.400 align:middle
Los bloques son elementos extremadamente potentes.

00:06:02.560 --> 00:06:04.480 align:middle
Debe usarlos con cuidado.

00:06:04.640 --> 00:06:08.440 align:middle
No vayas más allá de dos o tres argumentos.
para un bloque

00:06:08.600 --> 00:06:11.320 align:middle
Si tiene más,
se vuelve incomprensible

00:06:11.480 --> 00:06:15.280 align:middle
Es mejor definir una clase
con variables y métodos de instancia:

00:06:15.440 --> 00:06:17.200 align:middle
será mucho más legible.

00:06:17.960 --> 00:06:22.160 align:middle
En el curso, estudiamos bloques,
su sintaxis,

00:06:22.320 --> 00:06:25.600 align:middle
el hecho de que son una especie
de métodos anónimos,

00:06:25.760 --> 00:06:27.800 align:middle
esto es, cierres léxicos;

00:06:27.960 --> 00:06:31.960 align:middle
pueden almacenarse en variables
ya que son como cualquier otro objeto.

00:06:32.120 --> 00:06:37.400 align:middle
En otras lecciones, veremos que los bloques
son la base de muchas construcciones

00:06:37.560 --> 00:06:40.440 align:middle
como ciclos, iteraciones, etc.

