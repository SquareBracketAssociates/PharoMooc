WEBVTT

00:00:00.670 --> 00:00:02.840 align:middle
Dans cette séquence, nous
allons voir les booléens et les

00:00:03.040 --> 00:00:07.220 align:middle
conditions en Pharo. Donc en
fait, il existe deux objets

00:00:07.420 --> 00:00:11.430 align:middle
booléens, true et false sauf
que true, en fait c'est l'unique

00:00:11.630 --> 00:00:13.630 align:middle
instance de la case true
et false, c'est l'unique

00:00:13.830 --> 00:00:16.390 align:middle
instance de la classe
false. Et on va envoyer des

00:00:16.590 --> 00:00:19.930 align:middle
messages à ces objets pour
mettre en place ces opérations

00:00:20.130 --> 00:00:22.380 align:middle
booléennes, mouvoir des
 structures alternatives telles

00:00:22.580 --> 00:00:26.130 align:middle
que ifFalse, ifTrue, etc., donc
on va voir ça dans cette séquence.

00:00:27.000 --> 00:00:29.920 align:middle
Donc, par exemple, dans le
premier exemple sur ce slide,

00:00:30.120 --> 00:00:34.270 align:middle
on envoie le message &, donc
qui est un opérateur binaire

00:00:34.670 --> 00:00:37.480 align:middle
à l'objet false et puis on
lui passe un paramètre, donc

00:00:37.680 --> 00:00:40.100 align:middle
le paramètre c'est tout ça,
qui est une expression ici

00:00:40.300 --> 00:00:43.050 align:middle
entre parenthèses, donc
c'est 1 error:'crazy', donc cette

00:00:43.410 --> 00:00:47.080 align:middle
expression va déclencher une
erreur et on voit que l'évaluation

00:00:47.280 --> 00:00:50.130 align:middle
totale de toute cette
expression déclenche bien une erreur.

00:00:50.500 --> 00:00:54.780 align:middle
Pourquoi? Parce que
l'opérande a été aussi évalué dans

00:00:55.000 --> 00:00:55.740 align:middle
cette expression booléenne.

00:00:56.650 --> 00:01:01.000 align:middle
Donc l'opérande a bien été
évalué, ce qui produit l'erreur.

00:01:01.270 --> 00:01:03.480 align:middle
Donc si on voulait en fait
la version paresseuse des

00:01:03.680 --> 00:01:07.780 align:middle
opérateurs booléens, il faut
utiliser la méthode and: de

00:01:08.650 --> 00:01:12.800 align:middle
la classe booléen, et
cette méthode and: prend en

00:01:13.000 --> 00:01:15.150 align:middle
paramètre un block, donc
je vous rappelle, les blocks

00:01:15.400 --> 00:01:17.610 align:middle
commencent par un crochet
ouvrant et se terminent par un

00:01:17.810 --> 00:01:20.130 align:middle
crochet fermant,
contiennent des expressions, mais la

00:01:20.330 --> 00:01:23.720 align:middle
définition d'un block ne
déclenche pas l'exécution des

00:01:23.920 --> 00:01:26.300 align:middle
expressions qu'il
contient, donc pour l'instant, les

00:01:26.500 --> 00:01:29.110 align:middle
expressions qu'il contient
ne sont pas évaluées et c'est

00:01:29.310 --> 00:01:33.280 align:middle
seulement si le premier
opérande est vrai ou faux que le

00:01:33.480 --> 00:01:35.270 align:middle
block passé en
paramètre sera évalué ou non.

00:01:35.940 --> 00:01:39.450 align:middle
Donc on a bien, dans ce
deuxième exemple, false and: un

00:01:39.650 --> 00:01:43.810 align:middle
block qui retourne false
sans avoir évalué le contenu du

00:01:44.010 --> 00:01:47.090 align:middle
block passé en paramètre,
donc un opérateur paresseux

00:01:47.290 --> 00:01:49.340 align:middle
 classique, mais construit
cette fois avec des blocks.

00:01:51.530 --> 00:01:55.090 align:middle
Donc en Pharo, les conditionnels,
donc les if, les false, les why, etc.

00:01:55.430 --> 00:01:59.140 align:middle
sont toujours des messages
envoyés à des booléens ou à des blocks.

00:02:00.420 --> 00:02:02.680 align:middle
Donc, on va prendre un
autre exemple, donc le message

00:02:02.880 --> 00:02:05.000 align:middle
ifTrue:if:False qui est
la structure alternative

00:02:05.200 --> 00:02:07.580 align:middle
 classique dans tous les
langages de programmation, donc

00:02:07.780 --> 00:02:09.860 align:middle
sauf qu'en Pharo, c'est
vraiment un message et je peux

00:02:10.060 --> 00:02:13.550 align:middle
envoyer le message
ifTrue:ifFalse ici à un objet booléen

00:02:13.750 --> 00:02:16.420 align:middle
donc ça c'est une expression
qui va retourner un booléen.

00:02:17.930 --> 00:02:21.530 align:middle
Et on va passer en paramètre
de ce message ifTrue:ifFalse

00:02:21.730 --> 00:02:25.270 align:middle
deux blocks, un premier
block qui serait évalué si le

00:02:25.470 --> 00:02:27.730 align:middle
booléen receveur était
vrai et un deuxième block qui

00:02:27.930 --> 00:02:29.300 align:middle
serait évalué si le
receveur était faux.

00:02:30.670 --> 00:02:33.600 align:middle
Donc attention, ce
message ifTrue:ifFalse:, il est

00:02:33.800 --> 00:02:36.620 align:middle
extrêmement utilisé au cœur
de Pharo, il est au cœur du

00:02:36.820 --> 00:02:39.630 align:middle
système, il est tellement
important qu'il a été optimisé

00:02:39.830 --> 00:02:44.690 align:middle
de façon assez avancée pour
pouvoir être efficace et ne

00:02:44.890 --> 00:02:46.420 align:middle
pas ralentir tout le
système bien évidemment.

00:02:48.390 --> 00:02:51.000 align:middle
Donc, si on revient sur
l'implantation des booléens en

00:02:51.200 --> 00:02:53.000 align:middle
Pharo, en fait elle est
extrêmement élégante, comme je le

00:02:53.200 --> 00:02:56.380 align:middle
disais, les deux objets
true et false sont tous deux

00:02:56.580 --> 00:02:59.180 align:middle
respectivement instance de
la classe true et de la classe

00:02:59.380 --> 00:03:01.020 align:middle
false qui elle-même
hérite de la casse booléen.

00:03:01.590 --> 00:03:04.230 align:middle
Et puis chacune de ces
 classes va définir un ensemble de

00:03:04.430 --> 00:03:07.300 align:middle
méthodes de façon à avoir
le comportement attendu.

00:03:08.000 --> 00:03:10.430 align:middle
Donc, vous aurez plus
d'informations sur cette

00:03:10.630 --> 00:03:14.230 align:middle
implantation des booléens qui est
élégante dans une prochaine séquence.

00:03:14.540 --> 00:03:18.300 align:middle
Donc, revenons sur le
message ifTrue:ifFalse,

00:03:19.880 --> 00:03:23.560 align:middle
donc il existe différentes
versions de ces messages, donc

00:03:23.760 --> 00:03:27.170 align:middle
on a la version où on a
juste le message ifTrue avec un

00:03:27.370 --> 00:03:30.510 align:middle
block en paramètre quand on
veut faire juste la première

00:03:30.710 --> 00:03:33.000 align:middle
part de l'alternative
ou le message complet

00:03:33.200 --> 00:03:35.570 align:middle
ifTrue:ifFalse qui compte
bien deux blocks qui permet de

00:03:35.770 --> 00:03:39.310 align:middle
faire l'alternative avec le cas
où le booléen est vrai ou faux.

00:03:40.540 --> 00:03:42.790 align:middle
Donc vous avez un
exemple, vous avez même plusieurs

00:03:43.000 --> 00:03:45.790 align:middle
exemples ici, donc
l'exemple où on n'envoie que le

00:03:46.000 --> 00:03:49.050 align:middle
message ifTrue, on a juste un
block à exécuter si l'expression

00:03:49.250 --> 00:03:52.790 align:middle
booléenne est vraie ou un
exemple ici où on a un block à

00:03:53.000 --> 00:03:55.930 align:middle
exécuter donc celui-là, si
le booléen receveur était vrai

00:03:56.130 --> 00:03:57.920 align:middle
et celui-là, si le
booléen receveur était faux.

00:04:01.170 --> 00:04:03.840 align:middle
Donc c'est bien deux
messages différents, là on a le

00:04:04.040 --> 00:04:07.760 align:middle
pendant pour ifFalse sur les
 classes booléen, les classes

00:04:07.960 --> 00:04:08.720 align:middle
true et les classes false.

00:04:10.480 --> 00:04:13.570 align:middle
Donc on a d'autres types de
messages pour exprimer les

00:04:13.770 --> 00:04:16.350 align:middle
alternatives, en fait,
les conditions, donc on a le

00:04:16.550 --> 00:04:18.790 align:middle
message par exemple,
ifEmpty:ifNotEmpty: que je peux

00:04:19.000 --> 00:04:23.880 align:middle
envoyer à une collection.
Donc ifEmpty:, je passe un block.

00:04:24.940 --> 00:04:27.290 align:middle
Et puis le block sera
évalué seulement si la collection

00:04:27.490 --> 00:04:32.240 align:middle
receveur est vide ou pas.
Et puis ifNotEmpty:, c'est

00:04:33.590 --> 00:04:36.000 align:middle
la condition inverse donc
si la collection n'est pas

00:04:36.200 --> 00:04:38.100 align:middle
vide, alors il faut
exécuter ce block.

00:04:38.610 --> 00:04:42.420 align:middle
Sauf qu'on a une subtilité
supplémentaire, ce block prend un argument.

00:04:42.820 --> 00:04:46.920 align:middle
L'argument en paramètres,
c'est la collection elle-même

00:04:47.120 --> 00:04:49.230 align:middle
qui n'était pas vide
puisque la collection, on a

00:04:49.430 --> 00:04:52.600 align:middle
peut-être le résultat d'un
calcul complexe et donc on ne

00:04:52.800 --> 00:04:55.060 align:middle
va pas redemander la
collection dans le block, donc la

00:04:55.260 --> 00:04:58.140 align:middle
collection, si elle n'était
pas vide, elle est passée en

00:04:58.340 --> 00:04:59.890 align:middle
paramètres du block et elle
peut être utilisée dans les

00:05:00.090 --> 00:05:01.000 align:middle
expressions du block ici.

00:05:02.280 --> 00:05:04.750 align:middle
Donc en résumé, dans cette
séquence, on a vu que les

00:05:04.950 --> 00:05:07.410 align:middle
booléens sont des objets
comme les autres en Pharo, sont

00:05:07.610 --> 00:05:10.400 align:middle
instances des classes
true et false qui héritent de

00:05:10.600 --> 00:05:12.920 align:middle
booléens, et puis qu'on peut
leur envoyer des messages et

00:05:13.120 --> 00:05:16.440 align:middle
que ces messages en
fait définissent toutes les

00:05:16.640 --> 00:05:20.430 align:middle
constructions
d'alternatives ou de conditions possibles

00:05:20.800 --> 00:05:23.070 align:middle
dans Pharo alors que dans
d'autres langages, ce seraient

00:05:23.270 --> 00:05:26.440 align:middle
plutôt des structures
câblées dans le compilateur.

