WEBVTT

00:00:00.750 --> 00:00:04.380 align:middle
Dans cette séquence, nous
allons parler des boucles dans Pharo.

00:00:04.580 --> 00:00:07.590 align:middle
Les boucles sont des messages
qu'on va envoyer à des objets.

00:00:07.790 --> 00:00:10.670 align:middle
En fait, il existe plein de
types de boucles différents.

00:00:12.050 --> 00:00:14.290 align:middle
C'est des messages qu'on va
envoyer soit à des nombres, à

00:00:14.490 --> 00:00:17.650 align:middle
des collections, voire même
à des blocks et ça sera dans

00:00:17.850 --> 00:00:19.950 align:middle
certains cas des messages
d'itération sur les éléments d'une

00:00:20.150 --> 00:00:21.140 align:middle
collection, par exemple.

00:00:22.420 --> 00:00:26.570 align:middle
Voilà un exemple, on
envoie le message timesRepeat

00:00:27.540 --> 00:00:31.370 align:middle
à l'entier 4 et on va lui
passer en paramètre un block.

00:00:31.840 --> 00:00:34.460 align:middle
Si vous vous rappelez, on a vu les
blocks dans la séquence précédente.

00:00:35.040 --> 00:00:38.440 align:middle
On a un block qui commence
ici et qui se termine ici.

00:00:39.550 --> 00:00:43.190 align:middle
Ce message va permettre de
répéter l'évaluation de ce

00:00:43.390 --> 00:00:46.480 align:middle
block plusieurs fois, en
l'occurrence quatre fois dans

00:00:46.680 --> 00:00:48.620 align:middle
cet exemple puisque le
receveur du message, c'était 4.

00:00:51.000 --> 00:00:54.140 align:middle
Il existe d'autres types de
messages pour effectuer des boucles.

00:00:54.360 --> 00:00:57.600 align:middle
Par exemple ici dans cet
exemple, c'est le message to: do:.

00:00:57.800 --> 00:00:59.840 align:middle
Le message to:do est
défini sur la classe number.

00:01:01.490 --> 00:01:04.540 align:middle
Et puis, on va lui passer
également en paramètre un block

00:01:04.760 --> 00:01:07.740 align:middle
qui est le dernier
argument du message et ce block va

00:01:07.940 --> 00:01:10.720 align:middle
être exécuté un certain
nombre de fois avec un curseur de

00:01:10.920 --> 00:01:14.710 align:middle
boucle qui varie depuis le
receveur jusqu'au premier

00:01:14.910 --> 00:01:16.220 align:middle
argument du message.

00:01:18.030 --> 00:01:21.150 align:middle
On a un exemple ici, si on
reprend exactement le même

00:01:21.350 --> 00:01:26.120 align:middle
exemple, on va envoyer
le message to:do à l'

00:01:26.320 --> 00:01:31.000 align:middle
entier 1. Dans le
block, on va afficher le

00:01:31.200 --> 00:01:33.500 align:middle
paramètre du block, le
paramètre i à chaque tour de boucle.

00:01:34.580 --> 00:01:36.510 align:middle
On voit que dans le
Transcript, on a bien tous les

00:01:36.710 --> 00:01:39.160 align:middle
entiers qui ont été
affichés entre 1 et 100.

00:01:43.280 --> 00:01:46.660 align:middle
Il existe d'autres messages
pour effectuer des boucles.

00:01:47.570 --> 00:01:50.960 align:middle
Par exemple, on a le
message to:by:do: pour faire des

00:01:51.160 --> 00:01:52.330 align:middle
incréments de plus que par 1.

00:01:52.600 --> 00:01:55.070 align:middle
On fait des incréments ici
pour contrôler de combien on

00:01:55.270 --> 00:01:57.850 align:middle
fait l'incrément, on peut faire des
incréments par 3 ici dans cet exemple.

00:01:58.260 --> 00:02:02.210 align:middle
À chaque tour de boucle, i va
prendre des valeurs de 3 en 3.

00:02:04.280 --> 00:02:07.480 align:middle
On voit l'exemple ici,
cette fois quand on a exécuté ce

00:02:07.680 --> 00:02:11.820 align:middle
morceau de code, on voit
bien que i a bien varié de 1 à

00:02:12.020 --> 00:02:14.190 align:middle
100, mais avec un
incrément de 3 à chaque fois.

00:02:16.050 --> 00:02:19.020 align:middle
Il existe maintenant aussi des
itérateurs pour effectuer des boucles.

00:02:19.220 --> 00:02:24.100 align:middle
Les itérateurs sont des
messages plutôt à envoyer à des

00:02:24.300 --> 00:02:26.730 align:middle
objets Collection. Il en
existe de toutes sortes.

00:02:27.190 --> 00:02:30.670 align:middle
On a par exemple do: qui
permet d'itérer sur chacun des

00:02:30.870 --> 00:02:33.770 align:middle
éléments d'une collection.
Collect: qui permet à la fois

00:02:34.000 --> 00:02:35.790 align:middle
d'itérer sur les
éléments d'une collection, mais

00:02:36.000 --> 00:02:39.450 align:middle
également de récupérer, de
collecter les résultats pour

00:02:39.650 --> 00:02:40.760 align:middle
les mettre dans une
nouvelle collection.

00:02:41.150 --> 00:02:44.490 align:middle
Select: qui permet de
sélectionner un ensemble d'éléments

00:02:44.690 --> 00:02:46.070 align:middle
à l'intérieur d'une
collection, donc de construire une

00:02:46.270 --> 00:02:48.470 align:middle
nouvelle collection uniquement
avec ceux qu'on aurait sectionnés.

00:02:48.940 --> 00:02:51.930 align:middle
Reject: qui permet
d'éliminer les éléments qu'on ne

00:02:52.130 --> 00:02:54.710 align:middle
voudrait pas dans une
collection. Detect: qui permet de

00:02:56.080 --> 00:02:59.030 align:middle
savoir si un élément existe
dans une collection donnée.

00:03:00.600 --> 00:03:03.070 align:middle
On va en voir quelques-uns
dans la suite de ces slides.

00:03:04.490 --> 00:03:07.020 align:middle
Par exemple, do: qui est
finalement le message le plus

00:03:07.220 --> 00:03:10.920 align:middle
courant qu'on utilise. On va
envoyer le message do: à une

00:03:11.120 --> 00:03:12.830 align:middle
collection et on va
lui passer un block.

00:03:13.400 --> 00:03:18.120 align:middle
À chaque tour de boucle, le
block, le paramètre du block,

00:03:18.320 --> 00:03:21.870 align:middle
ici each: va recevoir
d'abord le premier élément de la

00:03:22.070 --> 00:03:25.640 align:middle
collection, ensuite le second,
jusqu'au dernier élément de la collection.

00:03:28.650 --> 00:03:31.810 align:middle
Voici un exemple, ici on a
une collection qui est définie.

00:03:32.010 --> 00:03:34.100 align:middle
Je vous rappelle que la
syntaxe, c'est dièse, parenthèse

00:03:34.360 --> 00:03:37.060 align:middle
et puis on termine par une
parenthèse pour les collections littérales.

00:03:37.690 --> 00:03:42.520 align:middle
Cette collection contient
quatre entiers: 15, 10, 19, 68.

00:03:42.720 --> 00:03:46.030 align:middle
On envoie le message do: à cette
collection, on lui passe un block.

00:03:46.580 --> 00:03:51.440 align:middle
I, qui est le paramètre du block, va

00:03:51.640 --> 00:03:55.840 align:middle
prendre au premier tour de boucle
la valeur 15 ensuite 10, 19 et 68.

00:03:59.270 --> 00:04:02.700 align:middle
Voici un autre message qui
est whileTrue: qui permet

00:04:02.900 --> 00:04:04.210 align:middle
également d'effectuer des boucles.

00:04:04.410 --> 00:04:07.770 align:middle
whileTrue:, c'est un message
qu'on va envoyer à un block,

00:04:08.000 --> 00:04:09.470 align:middle
donc c'est un message
défini sur la classe block.

00:04:10.360 --> 00:04:13.320 align:middle
On a le block receveur qui
est ici et puis on a un block

00:04:13.520 --> 00:04:15.630 align:middle
d'argument qui est ici.

00:04:16.260 --> 00:04:19.430 align:middle
Je vous donne un exemple
concret issu de la classe Color.

00:04:19.910 --> 00:04:21.660 align:middle
On a ici un whileTrue:.

00:04:22.940 --> 00:04:24.120 align:middle
On a le block receveur.

00:04:24.320 --> 00:04:26.600 align:middle
Dans le block receveur, on
a une condition: ce block va

00:04:26.800 --> 00:04:29.250 align:middle
s'évaluer à une
condition, true ou false.

00:04:29.450 --> 00:04:31.600 align:middle
En fonction de
l'évaluation de ce premier block, le

00:04:31.800 --> 00:04:35.360 align:middle
receveur, on va déclencher
l'exécution ou pas du block

00:04:35.560 --> 00:04:39.800 align:middle
argument qui est le deuxième block,
le paramètre de la méthode whileTrue:.

00:04:40.000 --> 00:04:41.280 align:middle
Il existe une variation de whileTrue

00:04:45.510 --> 00:04:50.170 align:middle
sans paramètres qui prend le
block receveur, qui l'évalue

00:04:50.620 --> 00:04:54.030 align:middle
et si ce block s'évalue à
vrai ou à faux, il est réévalué

00:04:54.230 --> 00:04:57.180 align:middle
une fois supplémentaire.
En fait, on va réévaluer le

00:04:57.380 --> 00:04:59.020 align:middle
block tant qu'il s'évalue à vrai.

00:05:00.820 --> 00:05:03.710 align:middle
On a exactement les
pendants de whileTrue: avec les

00:05:03.910 --> 00:05:07.360 align:middle
méthodes de whileFalse sans
paramètres et avec paramètres.

00:05:08.190 --> 00:05:11.180 align:middle
Toutes les variations
existent en fait dans les classes

00:05:11.380 --> 00:05:14.610 align:middle
sur les blocks.

00:05:14.810 --> 00:05:18.000 align:middle
En résumé, sur cette
séquence, on a vu que les boucles en

00:05:18.200 --> 00:05:21.780 align:middle
Pharo sont exprimées comme
des messages normaux envoyés à

00:05:22.000 --> 00:05:26.270 align:middle
des objets, que ce soit des
entiers, des collections, des blocks.

00:05:29.620 --> 00:05:32.100 align:middle
Avec ça, on peut
construire énormément de boucles

00:05:32.300 --> 00:05:34.470 align:middle
différentes et même en
rajouter si on en a envie.

