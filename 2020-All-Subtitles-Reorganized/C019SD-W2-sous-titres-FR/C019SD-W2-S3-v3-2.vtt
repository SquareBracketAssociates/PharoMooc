WEBVTT

00:00:00.590 --> 00:00:03.420 align:middle
Dans ce cours, nous allons
aborder la manière de composer

00:00:03.620 --> 00:00:06.450 align:middle
des messages et de voir comment
marche la précédence, c'est-à-dire

00:00:06.650 --> 00:00:08.250 align:middle
qui prend le pas par
rapport à un autre.

00:00:10.470 --> 00:00:12.150 align:middle
Si on regarde, la question
qui se pose c'est "Qu'est-ce

00:00:12.350 --> 00:00:15.130 align:middle
qui se passe quand j'ai une
séquence de messages unaires?"

00:00:15.340 --> 00:00:19.600 align:middle
Là, j'ai écrit l'expression
suivante "1000 factorial class name".

00:00:19.800 --> 00:00:22.840 align:middle
Il se trouve que ça
s'exécute exactement de la même

00:00:23.040 --> 00:00:24.700 align:middle
manière que si j'avais mis
toutes ces parenthèses et on

00:00:24.900 --> 00:00:26.340 align:middle
voit que c'est embêtant
d'avoir toutes ces parenthèses.

00:00:27.050 --> 00:00:28.950 align:middle
Ce que le système va faire,
c'est que quand vous avez des

00:00:29.150 --> 00:00:31.370 align:middle
messages qui sont d'un
même niveau, ça veut dire

00:00:31.570 --> 00:00:34.460 align:middle
binaires, unaires ou à
mots-clefs, ça marche dans les

00:00:34.660 --> 00:00:37.440 align:middle
trois cas, il va toujours
les évaluer de gauche à droite.

00:00:37.640 --> 00:00:40.460 align:middle
Là, je vais envoyer le
message factoriel à 1000.

00:00:40.660 --> 00:00:44.000 align:middle
Après, je vais envoyer le message
 classe aux résultats de factoriel.

00:00:44.280 --> 00:00:48.190 align:middle
Et après, je vais
envoyer de message name à ce

00:00:50.180 --> 00:00:51.810 align:middle
nouvel objet et je vais
obtenir LargePositiveInteger.

00:00:54.370 --> 00:00:56.210 align:middle
Pour votre info, factoriel 1000,
c'est quand même un gros nombre.

00:00:56.410 --> 00:00:58.750 align:middle
Vous pouvez aussi essayer
avec factoriel 10000 si vous en

00:00:58.950 --> 00:01:00.860 align:middle
avez envie, c'est un
tout petit peu plus long.

00:01:02.240 --> 00:01:05.200 align:middle
Là ce que l'on voit, ça
veut dire qu'on a des messages,

00:01:05.400 --> 00:01:08.070 align:middle
on a des parenthèses pour
exécuter des expressions en

00:01:08.270 --> 00:01:10.540 align:middle
premier lieu, ensuite les
messages unaires, ensuite les

00:01:10.740 --> 00:01:12.460 align:middle
messages binaires, les
messages à mots-clefs et après

00:01:12.660 --> 00:01:15.000 align:middle
quand il y a égalité, on
fait de gauche à droite.

00:01:16.210 --> 00:01:17.130 align:middle
Regardons un exemple.

00:01:17.950 --> 00:01:22.380 align:middle
Là, j'ai un message
unaire, squared, et un

00:01:22.580 --> 00:01:24.340 align:middle
message binaire, +.

00:01:24.690 --> 00:01:26.880 align:middle
Donc, c'est le
message unaire qui gagne.

00:01:27.220 --> 00:01:31.920 align:middle
Donc, j'envoie d'abord
squared et, en plus, en deuxième

00:01:32.120 --> 00:01:33.630 align:middle
lieu, j'envoie le message +.

00:01:34.000 --> 00:01:36.610 align:middle
Et donc j'obtiens
bien 11, c'est correct.

00:01:37.540 --> 00:01:40.630 align:middle
Maintenant, là j'ai un autre
cas de figure, je vais lever

00:01:40.830 --> 00:01:44.220 align:middle
à la puissance, raisedTo,
j'ai un message binaire et un

00:01:44.420 --> 00:01:46.910 align:middle
message à mot-clef, donc c'est
le message binaire qui gagne.

00:01:47.270 --> 00:01:50.680 align:middle
Premièrement, ça va me faire
5 puis après, je vais faire

00:01:51.070 --> 00:01:53.040 align:middle
raisedTo, ça me
rend 32, c'est correct.

00:01:54.470 --> 00:01:59.040 align:middle
Là, c'est un exemple un peu
plus funky, les couleurs en

00:01:59.240 --> 00:02:01.330 align:middle
Pharo sont des objets,
donc j'ai la classe couleur.

00:02:01.840 --> 00:02:06.190 align:middle
Là, j'ai trois messages
unaires, j'ai gray, white et black.

00:02:06.590 --> 00:02:10.910 align:middle
Et j'ai deux messages
binaires, j'ai = et -.

00:02:12.000 --> 00:02:12.740 align:middle
Qu'est-ce qui va se passer ?

00:02:12.940 --> 00:02:15.900 align:middle
Le système va d'abord
exécuter tous les messages unaires.

00:02:17.210 --> 00:02:21.170 align:middle
Je vais obtenir la couleur gray, la
couleur white et la couleur black.

00:02:21.660 --> 00:02:25.250 align:middle
Là donc, il faut que,
maintenant, j'envoie des messages,

00:02:25.450 --> 00:02:28.290 align:middle
il me reste à choisir entre
le message - et le message =.

00:02:29.760 --> 00:02:33.730 align:middle
Là, je vais envoyer
message moins à l'objet gray avec

00:02:33.930 --> 00:02:36.720 align:middle
comme argument white, ça va
me donner la couleur black.

00:02:37.470 --> 00:02:39.820 align:middle
Après, je vais comparer mes
deux couleurs et ça me donne

00:02:40.020 --> 00:02:43.600 align:middle
que black = black, donc c'est vrai.

00:02:43.800 --> 00:02:47.760 align:middle
Donc là, c'est plus un
exemple pour vous montrer qu'on

00:02:47.960 --> 00:02:50.360 align:middle
peut aussi faire de la
conversion automatique avec Pharo,

00:02:50.640 --> 00:02:52.840 align:middle
c'est une sorte de
clin d'œil un petit peu.

00:02:54.000 --> 00:02:58.780 align:middle
J'ai cette expression 1
 class maxVal + 1, donc j'ai deux

00:02:59.000 --> 00:03:02.130 align:middle
messages unaires, class et
maxVal, et puis j'ai un message binaire.

00:03:03.850 --> 00:03:05.490 align:middle
Comment ça
s'exécute cette expression?

00:03:05.920 --> 00:03:09.040 align:middle
Je vais envoyer le message
 classe au petit entier 1, il

00:03:09.240 --> 00:03:11.490 align:middle
me dit "Ben oui, tu es un
petit entier puisque tu es 1",

00:03:11.690 --> 00:03:12.750 align:middle
c'est quand même très optimisé.

00:03:13.680 --> 00:03:16.660 align:middle
Et maintenant, je vais
envoyer à la classe, puisque c'est

00:03:16.860 --> 00:03:18.950 align:middle
le résultat de 1 classe, je
vais lui envoyer le message maxVal.

00:03:19.150 --> 00:03:20.300 align:middle
Qu'est-ce que c'est
que le message maxVal?

00:03:20.930 --> 00:03:23.650 align:middle
C'est quel est le plus
grand nombre que tu peux encoder

00:03:23.850 --> 00:03:25.430 align:middle
sur un petit entier,
c'est ça ce que ça veut dire.

00:03:25.850 --> 00:03:30.020 align:middle
Et donc là ça me rend ce nombre à
quelques chiffres qui finit par 23.

00:03:31.150 --> 00:03:36.000 align:middle
Et à ce nombre maintenant, je
vais lui envoyer le message plus 1.

00:03:39.110 --> 00:03:42.370 align:middle
Je n’obtiens forcément pas un
petit entier, puisque ça, c'est

00:03:42.570 --> 00:03:44.840 align:middle
la valeur qui tient sur un
petit entier, donc ça sera

00:03:45.150 --> 00:03:46.890 align:middle
forcément quelque chose qui
n'est pas un petit entier.

00:03:47.300 --> 00:03:52.060 align:middle
Là finalement, je lui demande
"Qu'est-ce que c'est la classe de ce nombre?"

00:03:52.260 --> 00:03:54.950 align:middle
Je mets des parenthèses,
j'envoie class et ça me dit que

00:03:55.240 --> 00:03:58.490 align:middle
c'est un
LargePositiveInteger. Celui-là, c'est le plus

00:03:58.690 --> 00:04:01.870 align:middle
grand des petits entiers et
celui-là, c'est le plus petit

00:04:02.070 --> 00:04:06.560 align:middle
des grands entiers. Là,
j'ai mis des parenthèses parce

00:04:06.760 --> 00:04:09.510 align:middle
que si je n'avais pas mis de
parenthèses, class aurait été envoyé à 1.

00:04:09.710 --> 00:04:11.330 align:middle
Ce n'est pas ce que je
veux, je veux envoyer class aux

00:04:11.530 --> 00:04:12.510 align:middle
résultats de cette expression.

00:04:15.890 --> 00:04:19.840 align:middle
Imaginons là, j'ai créé un
rectangle et je veux obtenir

00:04:20.040 --> 00:04:22.210 align:middle
le point en bas à
droite du rectangle.

00:04:22.480 --> 00:04:24.610 align:middle
J'ai écrit ça, je
l'exécute, ça plante.

00:04:24.810 --> 00:04:27.530 align:middle
Le système me dit "Je ne
comprends pas: 100 ne comprend

00:04:27.730 --> 00:04:29.700 align:middle
pas le message
bottomRight " Pourquoi?

00:04:30.100 --> 00:04:34.460 align:middle
Parce que bottomRight, c'est
un message unaire et il est

00:04:34.660 --> 00:04:37.910 align:middle
exécuté avant tous les autres, donc
il est envoyé à 100, son receveur.

00:04:39.480 --> 00:04:41.390 align:middle
Mais 100 ne comprend pas
cette api puisque c'est de l'api

00:04:41.590 --> 00:04:43.930 align:middle
de la classe rectangle. Donc
là, je suis obligé de mettre

00:04:44.130 --> 00:04:45.780 align:middle
des parenthèses, ce que j'ai
fait ici dans cette expression.

00:04:46.750 --> 00:04:48.200 align:middle
Comment ça se passe ?

00:04:48.810 --> 00:04:51.170 align:middle
L'expression parenthésée est
exécutée en premier, dans l'expression

00:04:51.370 --> 00:04:55.600 align:middle
parenthésée, j'ai deux
messages binaires qui sont

00:04:55.800 --> 00:04:57.750 align:middle
exécutés qui me créent des points.

00:04:57.950 --> 00:04:59.270 align:middle
Donc, j'ai mes deux
points qui sont créés.

00:04:59.470 --> 00:05:02.220 align:middle
J'envoie le message extent à un
point qui me crée un rectangle.

00:05:02.420 --> 00:05:05.910 align:middle
L'idée, c'est que j'ai un
point 0,0 et puis après je lui

00:05:06.110 --> 00:05:10.950 align:middle
passe extent, c'est 100,100, donc

00:05:11.150 --> 00:05:12.170 align:middle
ça va me donner ce rectangle-là.

00:05:12.370 --> 00:05:15.160 align:middle
Et maintenant, je lui
demande quelle est la valeur.

00:05:15.360 --> 00:05:17.440 align:middle
BottomRight à la fin vient
d'envoyer un rectangle et il

00:05:17.640 --> 00:05:21.930 align:middle
me donne la valeur du point qui est
ici et qui est bien le point 100,100.

00:05:27.160 --> 00:05:28.530 align:middle
Ce que je vous ai dit dans
Pharo, c'est que c'était très

00:05:28.730 --> 00:05:30.310 align:middle
simple: en fait, il
n'y a que des messages.

00:05:30.580 --> 00:05:33.150 align:middle
Donc, + est un message comme
les autres, il n'y a pas de

00:05:33.350 --> 00:05:35.620 align:middle
précédence mathématique.
L'avantage, c'est qu'on peut

00:05:35.820 --> 00:05:38.270 align:middle
utiliser + pour faire des
domaines spécifiques languages,

00:05:38.590 --> 00:05:41.390 align:middle
on peut utiliser + entre des
objets qui n'ont rien à voir

00:05:41.590 --> 00:05:44.310 align:middle
avec des objets
mathématiques. Typiquement en Java, vous

00:05:44.510 --> 00:05:46.000 align:middle
ne pouvez pas le faire. En
C++, vous pouvez le faire

00:05:46.200 --> 00:05:47.370 align:middle
quand vous
redéfinissez des opérateurs.

00:05:47.570 --> 00:05:52.440 align:middle
En Pharo, la solution,
c'était + est un message

00:05:52.640 --> 00:05:55.530 align:middle
comme les autres. C'est
un choix de simplicité.

00:05:55.730 --> 00:05:59.300 align:middle
Par contre, il y a un
prix, c'est qu'il n'y a pas de

00:05:59.500 --> 00:06:00.260 align:middle
précédence mathématique.

00:06:03.030 --> 00:06:07.610 align:middle
Dans cette expression, j'ai deux
opérateurs ou deux messages binaires.

00:06:09.180 --> 00:06:10.410 align:middle
J'exécute de gauche à droite.

00:06:12.290 --> 00:06:14.560 align:middle
Je fais 5 et puis ça me rend
50 et ce n'est pas ce qu'on

00:06:14.760 --> 00:06:17.540 align:middle
m'a appris à l'école. Pour
obtenir ça, je vais devoir

00:06:17.740 --> 00:06:20.470 align:middle
désambiguïser, donc je vais utiliser
des parenthèses autour de multiplié.

00:06:21.420 --> 00:06:23.530 align:middle
Donc effectivement, il
faut faire attention quand on

00:06:23.730 --> 00:06:26.770 align:middle
manipule des opérations
arithmétiques dans Pharo parce

00:06:27.000 --> 00:06:28.930 align:middle
que les opérateurs
mathématiques sont juste des messages.

00:06:30.220 --> 00:06:33.390 align:middle
Un autre exemple, si je
fais 1/3 + 2/3, je ne vais pas

00:06:33.590 --> 00:06:37.200 align:middle
obtenir ce qu'il faut
parce que le système va d'abord

00:06:37.400 --> 00:06:41.230 align:middle
exécuter cette expression-là
puisque ça va de gauche à droite.

00:06:41.520 --> 00:06:43.690 align:middle
Donc maintenant, si je mets des
parenthèses, j'obtiens bien le bon résultat.

00:06:44.000 --> 00:06:46.900 align:middle
Là, j'ai vraiment un point
intéressant à soulever, c'est

00:06:47.100 --> 00:06:49.720 align:middle
que j'obtiens le petit
entier 1 quand je fais 1/3 + 2/3.

00:06:49.920 --> 00:06:53.590 align:middle
Je n'obtiens pas 1,0 quelque
chose ou je n'obtiens pas 0,999.

00:06:55.740 --> 00:06:58.960 align:middle
C'est des fractions, elles sont
exactes et j'obtiens des calculs exacts.

00:07:00.170 --> 00:07:03.810 align:middle
En résumé, on aura vu qu'il
y a trois sortes de messages,

00:07:04.010 --> 00:07:07.240 align:middle
maintenant vous devez le savoir:
unaires, binaires et à mots-clefs.

00:07:07.800 --> 00:07:11.230 align:middle
On exécute de manière
prioritaire les parenthèses

00:07:11.460 --> 00:07:12.910 align:middle
unaires, binaires et à mots-clefs.

00:07:13.110 --> 00:07:17.180 align:middle
Quand on est à égalité, si j'ai deux

00:07:17.690 --> 00:07:20.330 align:middle
messages unaires, je vais
le faire de gauche à droite.

00:07:21.010 --> 00:07:23.260 align:middle
Il n'y a pas de précédence
mathématique parce que les

00:07:23.710 --> 00:07:25.840 align:middle
messages mathématiques sont
juste des messages comme les autres.

00:07:26.730 --> 00:07:29.560 align:middle
Et ce qui est différent d'avec
la plupart des langages, c'est

00:07:29.760 --> 00:07:31.760 align:middle
que les arguments sont
placés à l'intérieur de la

00:07:31.960 --> 00:07:33.040 align:middle
 structure comme dans beetween: and:

