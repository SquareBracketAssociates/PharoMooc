WEBVTT

00:00:02.560 --> 00:00:04.600 align:middle
このビデオでは
デバッガーがどのように動作して

00:00:04.767 --> 00:00:07.080 align:middle
それをどのように使ってバグを見つけるのか

00:00:07.247 --> 00:00:10.780 align:middle
表現式を実行したり

00:00:10.947 --> 00:00:12.710 align:middle
オブジェクトと対話する方法をお見せします。

00:00:14.080 --> 00:00:16.030 align:middle
そこで、以前皆さんといっしょに完成させた
カウンターの練習問題を

00:00:16.197 --> 00:00:18.820 align:middle
もう一度やってみたいと思います。

00:00:19.000 --> 00:00:21.220 align:middle
まず Monticello を使います。

00:00:21.387 --> 00:00:25.240 align:middle
package-cache を見ると

00:00:25.407 --> 00:00:26.320 align:middle
Counter パッケージが見つかります。

00:00:27.050 --> 00:00:29.010 align:middle
せっかくなので、Monticello の

00:00:29.177 --> 00:00:31.560 align:middle
機能を 1 つ紹介します。

00:00:31.727 --> 00:00:35.300 align:middle
これが正しいパッケージかどうか確認するために
ブラウズすることができます。

00:00:35.560 --> 00:00:37.650 align:middle
このパッケージで定義されている
クラスを見ることができます。

00:00:38.240 --> 00:00:39.830 align:middle
ここでは、MyCounter というパッケージには

00:00:40.000 --> 00:00:42.500 align:middle
2 つのクラスがあります。
Counter と CounterTest で

00:00:42.667 --> 00:00:44.830 align:middle
Counter の全ての操作を見てみると

00:00:45.000 --> 00:00:48.130 align:middle
4 つのメソッドがあります。
以前皆さんと定義したものです。

00:00:48.297 --> 00:00:51.240 align:middle
テストについても同様です。

00:00:51.407 --> 00:00:53.180 align:middle
さあ、それでは、このパッケージを

00:00:53.347 --> 00:00:54.490 align:middle
ロードしてみましょう。

00:00:58.300 --> 00:01:02.160 align:middle
では、Coutner クラスをブラウズします。

00:01:08.200 --> 00:01:11.710 align:middle
Counter クラスはテストがグリーンです。
つまり、作業を始めることができます。

00:01:15.000 --> 00:01:16.680 align:middle
お見せしたいのは

00:01:16.847 --> 00:01:19.470 align:middle
デバッガを使って表現式の実行を

00:01:19.637 --> 00:01:22.260 align:middle
ステップごとに進めていく方法です。

00:01:22.427 --> 00:01:23.720 align:middle
そして、その詳細を見たり飛ばしたりする方法です。

00:01:24.530 --> 00:01:26.800 align:middle
まずは例として、testDecrement を使います。

00:01:27.000 --> 00:01:30.300 align:middle
Debug test します。

00:01:30.467 --> 00:01:35.420 align:middle
Debug test はここにあります。
復習ですが

00:01:35.587 --> 00:01:36.700 align:middle
デバッガーは何を表示するのでしょうか？

00:01:36.867 --> 00:01:38.880 align:middle
デバッガーは実行スタックを表示します。

00:01:39.047 --> 00:01:41.830 align:middle
Pharo では全てはメッセージです。

00:01:42.000 --> 00:01:46.860 align:middle
スタックの深いところを見ていくと
まず最初に

00:01:47.027 --> 00:01:50.160 align:middle
run メソッドや undo やそんな類のものを
実行していることがわかります。

00:01:50.327 --> 00:01:53.240 align:middle
とりあえず今のところは、それはシステムの仕事なので
特に気にする必要はありません。

00:01:54.530 --> 00:01:59.300 align:middle
ここでは、スタック上で実行されているコードや

00:01:59.730 --> 00:02:00.930 align:middle
システムの状態を見ることができます。

00:02:01.097 --> 00:02:03.060 align:middle
ここを見てください。ローカル変数 c があります。

00:02:03.227 --> 00:02:05.480 align:middle
今はまだ値が代入されていないので、nilです。

00:02:06.150 --> 00:02:08.800 align:middle
そして self が CounterTest だとわかります。

00:02:09.380 --> 00:02:13.770 align:middle
つまりメソッドは

00:02:14.880 --> 00:02:15.580 align:middle
method CounterTest>>#testDecrement
です。

00:02:16.690 --> 00:02:21.420 align:middle
over をクリックすると

00:02:21.587 --> 00:02:24.370 align:middle
最初に実行する表現式に辿り着きます。

00:02:24.537 --> 00:02:26.540 align:middle
ここで注目することは

00:02:26.707 --> 00:02:28.720 align:middle
この表現式はすぐに実行可能だということです。

00:02:28.887 --> 00:02:32.340 align:middle
表現式は完成されています。

00:02:32.507 --> 00:02:34.190 align:middle
Counter クラスが定義されていて

00:02:34.357 --> 00:02:35.380 align:middle
それに new メッセージを送ることができます。

00:02:36.120 --> 00:02:38.790 align:middle
c は、まあこんなものです。

00:02:38.957 --> 00:02:40.650 align:middle
なので、ここで Over します。

00:02:40.817 --> 00:02:41.910 align:middle
Over というのは

00:02:42.077 --> 00:02:45.840 align:middle
表現式を、その内部にまで行かずに、実行することです。

00:02:47.430 --> 00:02:52.150 align:middle
現在、2つ目の表現式のところにきています。

00:02:52.317 --> 00:02:55.400 align:middle
代入式です。もう一度 Over をクリックすると

00:02:55.567 --> 00:02:59.940 align:middle
突然、変数 c がカウンターを指します。

00:03:00.340 --> 00:03:04.300 align:middle
ここで見られる通りです。
今の所、カウンターの値は nil です。

00:03:04.467 --> 00:03:07.960 align:middle
もし count: がどう実装されているかを
知りたければ

00:03:08.127 --> 00:03:11.600 align:middle
Over ではなく

00:03:11.767 --> 00:03:12.520 align:middle
Into を使います。

00:03:12.687 --> 00:03:16.140 align:middle
Into はメソッドの内部に
入っていくということです。

00:03:17.510 --> 00:03:20.050 align:middle
このように。
ここで、メソッドの定義がわかります。

00:03:20.217 --> 00:03:22.160 align:middle
さらに、引数と対話することができます。

00:03:22.580 --> 00:03:26.350 align:middle
anInteger がここにありますが
print すると

00:03:26.517 --> 00:03:28.230 align:middle
7 と表示されます。

00:03:28.397 --> 00:03:32.930 align:middle
anInteger はいいとして
countのほうは

00:03:33.097 --> 00:03:35.460 align:middle
インスタンス変数ですが
今のところ nil です。

00:03:35.627 --> 00:03:37.210 align:middle
それもここに表示されます。

00:03:38.750 --> 00:03:41.530 align:middle
続けていきます。
Over をクリックして

00:03:41.697 --> 00:03:44.450 align:middle
その表現式を飛び越えていって

00:03:44.617 --> 00:03:46.360 align:middle
表現式の実行を継続します。

00:03:49.740 --> 00:03:50.373 align:middle
そしてこうなります。

00:03:51.860 --> 00:03:53.370 align:middle
ここで decrement の内部に行きたいとすると

00:03:53.537 --> 00:03:55.690 align:middle
同じようにしていきます。
Into をクリックして

00:03:56.190 --> 00:04:00.670 align:middle
decrement に入ります。
decrement のコードが得られます。

00:04:01.310 --> 00:04:04.890 align:middle
これで原則がわかったでしょう。
こうやって

00:04:05.057 --> 00:04:07.190 align:middle
表現式をステップ実行します。

00:04:11.230 --> 00:04:13.280 align:middle
Proceed は

00:04:13.447 --> 00:04:15.950 align:middle
ここから、何事もなかったかのように

00:04:16.117 --> 00:04:18.310 align:middle
そのまま実行を継続していきます。
実際、Proceed すると

00:04:18.750 --> 00:04:22.750 align:middle
テストがグリーンになります。
そしてこのコード片を

00:04:22.917 --> 00:04:27.760 align:middle
独立して実行することもできます。

00:04:27.927 --> 00:04:29.810 align:middle
つまり

00:04:30.000 --> 00:04:32.850 align:middle
こんな風にしてPlayground に貼り付けて

00:04:33.017 --> 00:04:37.920 align:middle
Debug it すると
同じことができます。

00:04:38.960 --> 00:04:40.630 align:middle
この場合には
ちょっと違うようにコンパイルされますが

00:04:40.797 --> 00:04:43.930 align:middle
全く同じ機能が実行されて

00:04:44.097 --> 00:04:47.710 align:middle
カウンターの値は 7 になります。

00:04:49.550 --> 00:04:52.080 align:middle
counter をクリックすると
ここで 7 だとわかります。

00:04:52.350 --> 00:04:57.020 align:middle
そして例えば Into すると

00:04:57.960 --> 00:04:59.850 align:middle
decrement の中に入って行きます。
Over、Over

00:05:03.030 --> 00:05:05.320 align:middle
と、Over もさきほどと同じです。

00:05:08.810 --> 00:05:12.430 align:middle
ここではカスケードされて

00:05:12.597 --> 00:05:13.440 align:middle
カウンター c を返します。


