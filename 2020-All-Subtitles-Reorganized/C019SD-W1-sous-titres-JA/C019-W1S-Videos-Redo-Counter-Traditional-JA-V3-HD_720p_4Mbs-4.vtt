WEBVTT

00:00:01.190 --> 00:00:03.000 align:middle
このビデオで紹介するのは

00:00:03.167 --> 00:00:05.220 align:middle
パッケージやクラスを作って
テストを記述する方法です。

00:00:05.770 --> 00:00:09.100 align:middle
まず最初に
システムブラウザを開きます。

00:00:09.530 --> 00:00:11.710 align:middle
システムブラウザを使って
パッケージをブラウズすることができます。

00:00:11.877 --> 00:00:12.590 align:middle
ここにあるのがパッケージです。

00:00:14.260 --> 00:00:16.600 align:middle
最初に、パッケージを作ります。

00:00:16.830 --> 00:00:21.790 align:middle
「Add package」をクリックして、
「MyCounter」と。

00:00:22.280 --> 00:00:23.640 align:middle
パッケージは沢山あるので
全部を見たくはありません。

00:00:23.807 --> 00:00:27.050 align:middle
パッケージをフィルターするといいでしょう。

00:00:27.950 --> 00:00:30.000 align:middle
私たちの 「MyCounter」パッケージがあります。

00:00:30.157 --> 00:00:32.740 align:middle
そして、クラスを定義します。

00:00:32.907 --> 00:00:37.550 align:middle
「Counter」です。
インスタンス変数は「count」です。

00:00:38.140 --> 00:00:42.290 align:middle
ここがオレンジ色になっているのは
コードがまだセーブされていないことを示しています。

00:00:42.610 --> 00:00:45.690 align:middle
ここで、「Accept」機能で
コードをコンパイルします。

00:00:46.290 --> 00:00:49.570 align:middle
さあこれで Counter クラスが
コンパイルされました。

00:00:49.830 --> 00:00:51.920 align:middle
システムが調べて

00:00:53.200 --> 00:00:56.290 align:middle
アドバイスしてきます。これは後で説明します。
とりあえず今は気にしなくて結構です。

00:01:00.790 --> 00:01:03.690 align:middle
赤い「!」記号がありますが
これはコメントを書いていないからです。

00:01:03.857 --> 00:01:05.280 align:middle
では、書いてみましょう。

00:01:05.447 --> 00:01:12.330 align:middle
コメントは

00:01:12.497 --> 00:01:13.880 align:middle
「I'm a simple counter…」
（私は簡単なカウンタです…）

00:01:45.790 --> 00:01:49.230 align:middle
簡単な例題を書いてみましょう
そうするとカウンターは自分が

00:01:49.397 --> 00:01:53.050 align:middle
どう動作するかわかるようになります。
Counter new

00:01:55.750 --> 00:02:00.120 align:middle
Counter increment increment
Counter

00:02:02.920 --> 00:02:07.500 align:middle
count. これで 2 になるはずです。

00:02:09.880 --> 00:02:14.180 align:middle
またもや、テキストはまだセーブされていません。
コンパイルします。

00:02:14.347 --> 00:02:16.540 align:middle
これでセーブされました。

00:02:16.850 --> 00:02:20.050 align:middle
では、アクセサを定義しましょう。

00:02:21.940 --> 00:02:24.770 align:middle
アクセサは一般的には
accessingプロトコルに入れます。

00:02:26.640 --> 00:02:31.540 align:middle
countはcountをリターンする、と書きます。

00:02:33.160 --> 00:02:35.720 align:middle
同じように、aNumberを引数にして

00:02:38.220 --> 00:02:40.740 align:middle
セッターを書きます。

00:02:46.190 --> 00:02:48.380 align:middle
おわかりのように
私はcountメソッドを修正ました。

34 align:middle
00:02:48,547 --> 00:02:50,770
countメソッドが無くなってしまった
ように思うかもしれませんが、大丈夫です。

00:02:50.937 --> 00:02:54.120 align:middle
メソッドを変更する時に
違うメソッド名になっていると

00:02:54.287 --> 00:02:55.320 align:middle
新しいメソッドが作られます。

00:02:55.487 --> 00:02:58.530 align:middle
新しいメソッドをコンパイルすると、
count はちゃんとここにあります。

00:03:01.160 --> 00:03:05.190 align:middle
ここで、テストとして
小さなプログラムを書いてみましょう。

00:03:07.360 --> 00:03:08.000 align:middle
Playground を開きます。

00:03:09.910 --> 00:03:14.700 align:middle
カウンタを作って、と。
次の行で

00:03:14.867 --> 00:03:19.730 align:middle
値を入れます。

00:03:21.000 --> 00:03:25.420 align:middle
C count: 7と。
ここで値を訊いてみると

00:03:25.587 --> 00:03:29.600 align:middle
何を返してくるでしょうか？
「7」が返ってきます.

00:03:32.400 --> 00:03:34.390 align:middle
さて、ここで本当に書きたいのは

00:03:34.557 --> 00:03:38.460 align:middle
テストです。
この書き方では実行できません。

00:03:39.040 --> 00:03:40.350 align:middle
自動的に実行できるようにしたいのです。

00:03:40.630 --> 00:03:42.910 align:middle
テストケースを作ります。

00:03:43.077 --> 00:03:44.820 align:middle
Pharo ではどうやって
テストクラスを作るのでしょうか？

00:03:45.000 --> 00:03:48.450 align:middle
スーパークラスを変更して、
継承元を

00:03:50.220 --> 00:03:55.000 align:middle
TestCase にします。
これでテストクラスとしてCounterTestを

00:03:55.167 --> 00:03:56.140 align:middle
定義します。

00:03:56.910 --> 00:03:59.860 align:middle
これをコンパイルします。

00:04:00.660 --> 00:04:03.700 align:middle
システムに新しく CounterTest クラスが
できました。

00:04:04.570 --> 00:04:08.410 align:middle
新しいメソッドを定義しましょう。
プロトコルを追加します。

00:04:08.577 --> 00:04:10.030 align:middle
tests プロトコルです.

00:04:11.620 --> 00:04:14.300 align:middle
ここで新しいメソッドを定義します。

00:04:14.467 --> 00:04:17.940 align:middle
Tests のメソッド名は
「test」で始まらなければなりません。

00:04:18.107 --> 00:04:21.690 align:middle
そして TestCase クラスから継承している
必要があります。

00:04:22.380 --> 00:04:23.580 align:middle
メソッド名は
testCounterisSetAndRead

00:04:31.170 --> 00:04:35.590 align:middle
とでもしましょう。
これでほとんど完成したようなものです。

00:04:35.757 --> 00:04:36.540 align:middle
必要なことはほとんど書きました。

00:04:37.620 --> 00:04:40.330 align:middle
インデントを整えて

00:04:40.497 --> 00:04:41.730 align:middle
カウンタを作って

00:04:42.580 --> 00:04:45.680 align:middle
ここで
self assert

00:04:49.750 --> 00:04:54.200 align:middle
equals 7
この文は

00:04:54.367 --> 00:04:58.560 align:middle
self assert C count = 7
と全く同じです。

00:05:01.870 --> 00:05:04.640 align:middle
ただし、1つ目の文のほうが便利です。
返ってきた値が間違っていた場合に

00:05:04.807 --> 00:05:08.470 align:middle
もっと賢い報告をしてくれます。

00:05:08.637 --> 00:05:10.910 align:middle
コンパイルします。

00:05:12.790 --> 00:05:17.690 align:middle
これでテストを実行して、

00:05:19.790 --> 00:05:22.440 align:middle
テストはグリーンです。
テストがあり、そしてグリーンなので

00:05:22.607 --> 00:05:26.180 align:middle
あなたの製品、つまりコードを
セーブするのに良いタイミングです。

00:05:26.370 --> 00:05:27.930 align:middle
Pharo では、イメージをセーブします。

00:05:28.097 --> 00:05:30.080 align:middle
ここではイメージをセーブしますが

00:05:30.247 --> 00:05:31.320 align:middle
イメージのセーブで満足ではありません。

00:05:32.770 --> 00:05:35.040 align:middle
そこでコードを

00:05:35.207 --> 00:05:36.820 align:middle
バージョン管理システムに保存します。

00:05:37.070 --> 00:05:39.960 align:middle
ここで、私はあなたがインターネットに
アクセスきでるかわかりませんので

00:05:40.127 --> 00:05:44.610 align:middle
ローカルなキャッシュを使います。

00:05:44.777 --> 00:05:48.860 align:middle
おわかりでしょうか。
このディレクトリには

00:05:49.027 --> 00:05:52.930 align:middle
全てのパッケージが表示されていて

00:05:54.000 --> 00:05:55.360 align:middle
どれがロードされていて
どれがロードされていないか判ります。

00:05:55.770 --> 00:05:58.490 align:middle
ここに、変更が保存されていないパッケージが

00:05:58.657 --> 00:06:02.870 align:middle
表示されています。

00:06:03.070 --> 00:06:05.060 align:middle
最初の2つは気にしなくていいです。

00:06:05.227 --> 00:06:09.160 align:middle
MyPackage に星印がついています。
これは、イメージの中のコードが

00:06:09.327 --> 00:06:10.760 align:middle
まだ保存されていないことを示しています。

00:06:12.130 --> 00:06:14.020 align:middle
では保存しましょう。
Saveをクリックして

00:06:14.187 --> 00:06:15.230 align:middle
レポジトリを選択します。

00:06:16.520 --> 00:06:17.320 align:middle
saveをクリックします。

00:06:21.400 --> 00:06:26.180 align:middle
"first version with accessors and a
（アクセサ付きで、

00:06:27.210 --> 00:06:29.090 align:middle
green test".
テストがグリーンの最初のバージョン）

00:06:32.640 --> 00:06:35.600 align:middle
acceptします。
これで1つのパッケージを保存しました。

00:06:35.800 --> 00:06:36.530 align:middle
確認しましょう。

00:06:36.697 --> 00:06:41.370 align:middle
このディレクトリを開きます。
すると、システムにロードされた

00:06:42.410 --> 00:06:44.460 align:middle
沢山のパッケージが入っています。

00:06:44.627 --> 00:06:48.470 align:middle
フィルタすると、

00:06:48.637 --> 00:06:51.130 align:middle
さきほどのパッケージとそのバージョンが
見つかります。

00:06:57.620 --> 00:07:00.740 align:middle
新しい機能を追加するたびに
保存することを助言します。

00:07:00.907 --> 00:07:03.460 align:middle
これからそうしましょう。

00:07:06.770 --> 00:07:09.900 align:middle
さあ、ここで新しいテストを

00:07:10.067 --> 00:07:12.130 align:middle
実装の前に作ってみましょう。

00:07:12.410 --> 00:07:14.590 align:middle
これからテストを書きます。

00:07:14.757 --> 00:07:19.710 align:middle
カウンターのインクリメントについて

00:07:19.877 --> 00:07:21.200 align:middle
「TestIncrement」
何を書きましょう？

00:07:21.367 --> 00:07:22.000 align:middle
書きたい内容は

00:07:26.330 --> 00:07:27.430 align:middle
カウンターを作って

00:07:33.510 --> 00:07:38.400 align:middle
デフォルト値を代入して

00:07:38.840 --> 00:07:43.410 align:middle
このカウンタを2回インクリメントします。

00:07:44.100 --> 00:07:45.310 align:middle
何をチェックすべきでしょうか？

00:07:45.477 --> 00:07:48.130 align:middle
カウンターが

00:07:51.150 --> 00:07:51.870 align:middle
正しい値かをチェックします。

00:07:57.900 --> 00:08:02.800 align:middle
コンパイルします。テストは

00:08:03.000 --> 00:08:06.880 align:middle
レッドです。まだカウンターを
実装していませんから。

00:08:07.510 --> 00:08:10.390 align:middle
インクリメントとデクリメントは
カウンターの操作(operations)です。

00:08:11.520 --> 00:08:12.450 align:middle
operationsを追加します。
increment。

00:08:21.660 --> 00:08:22.390 align:middle
何をしましょう？

00:08:22.557 --> 00:08:26.890 align:middle
self
count 2: self count + 1

00:08:27.200 --> 00:08:30.270 align:middle
アクセサーを使うかどうかは

00:08:30.437 --> 00:08:32.080 align:middle
状況次第で
スタイルの問題です。

00:08:34.510 --> 00:08:37.630 align:middle
decrementも

00:08:39.710 --> 00:08:40.500 align:middle
同じように定義します。

00:08:42.380 --> 00:08:44.470 align:middle
incrementについては
テストがあるので

00:08:44.637 --> 00:08:48.190 align:middle
実行できます。
テストはグリーンです。

00:08:48.357 --> 00:08:50.370 align:middle
これで2つのテストがちゃんと動きます。

00:08:50.710 --> 00:08:53.350 align:middle
テストクラスを見れば
全てのテストがグリーンです。

00:08:53.670 --> 00:08:54.540 align:middle
何をしましょう？

00:08:54.707 --> 00:08:56.790 align:middle
保存します。新規保存します。

00:08:56.957 --> 00:09:00.340 align:middle
「incrementとdecrementを追加した」
と書きます。

00:09:13.110 --> 00:09:17.850 align:middle
さあ、これで
2つのバージョンができました。

00:09:23.250 --> 00:09:23.883 align:middle
パッケージのバージョンです。

00:09:24.090 --> 00:09:29.020 align:middle
「decrement」のテストも書きます。

00:09:29.187 --> 00:09:30.100 align:middle
書かない理由がありませんから。

00:09:31.700 --> 00:09:36.590 align:middle
「Decrement」
例えば

00:09:36.757 --> 00:09:40.320 align:middle
値を2として

00:09:40.487 --> 00:09:43.890 align:middle
2回decrementしたら
0になるはずです。

00:09:44.057 --> 00:09:48.550 align:middle
テストはグリーンです。

00:09:49.570 --> 00:09:50.203 align:middle
なので、保存します。

00:10:06.490 --> 00:10:10.490 align:middle
ここで、欲しい機能があります。

00:10:10.657 --> 00:10:14.300 align:middle
「Counter new」と書いて
「Print it」すると

00:10:14.467 --> 00:10:16.910 align:middle
カウンターが表示されますが
値がわかりません。

00:10:17.077 --> 00:10:19.000 align:middle
あまり便利ではありません。

00:10:19.360 --> 00:10:22.260 align:middle
ここを改良したいと思います。

00:10:24.130 --> 00:10:26.630 align:middle
そこで、メソッドを追加します。

00:10:26.797 --> 00:10:29.840 align:middle
「PrintOn:」です。
「printing」プロトコルに定義します。

00:10:31.340 --> 00:10:33.110 align:middle
「PrintOn:」は

00:10:33.277 --> 00:10:34.530 align:middle
表示するたびにシステムから
利用されます。

00:10:35.760 --> 00:10:36.750 align:middle
引数は「aStream」です。

00:10:38.690 --> 00:10:39.440 align:middle
何をしましょうか？

00:10:40.200 --> 00:10:43.170 align:middle
カウンターだとわかるように

00:10:43.337 --> 00:10:47.460 align:middle
元の機能を使います。

00:10:51.740 --> 00:10:54.170 align:middle
ここで

00:10:58.530 --> 00:10:59.850 align:middle
ちょっと追加して

00:11:04.470 --> 00:11:05.103 align:middle
書きます。

00:11:17.370 --> 00:11:20.570 align:middle
例えば「with value:」（値は）
「self count」

00:11:24.150 --> 00:11:27.740 align:middle
こうすることで
数を

00:11:27.907 --> 00:11:32.180 align:middle
表記できます。

00:11:34.260 --> 00:11:35.290 align:middle
そして「cr」と。

00:11:35.457 --> 00:11:36.260 align:middle
コンパイルします。

00:11:42.900 --> 00:11:45.550 align:middle
システムはもっといい方法があると
言ってきますが、まあいいでしょう。

00:11:46.040 --> 00:11:47.270 align:middle
今回は気にしないでおきます。

00:11:48.590 --> 00:11:49.760 align:middle
「Counter new」と書いてみます。

00:11:51.000 --> 00:11:54.740 align:middle
ほら、値がnilのカウンターだと
表示されました。

00:11:54.907 --> 00:11:58.020 align:middle
これは正常です。
初期化してませんから。

00:12:01.260 --> 00:12:04.960 align:middle
では、初期化に対応しましょう。

00:12:07.590 --> 00:12:09.780 align:middle
まずはテストを書きます。

00:12:14.050 --> 00:12:18.020 align:middle
AtCreationTimeIsZero
（カウンターを生成した時の値は

00:12:19.770 --> 00:12:23.180 align:middle
ゼロ）、と。

00:12:24.950 --> 00:12:25.760 align:middle
さあどうしましょう？

00:12:25.927 --> 00:12:27.280 align:middle
「self assert:」として

00:12:27.447 --> 00:12:30.840 align:middle
チェックするのは「Counter new

00:12:33.030 --> 00:12:36.210 align:middle
count = 0」。 

00:12:38.020 --> 00:12:39.010 align:middle
これでどうでしょうか？

00:12:39.177 --> 00:12:41.090 align:middle
テストは失敗です。なぜでしょう？

00:12:41.257 --> 00:12:45.140 align:middle
これを実行したら
nilが得られるからです。

00:12:47.140 --> 00:12:49.820 align:middle
ここで、Counterはクラスで
CounterTestクラスのインスタンス変数には

00:12:50.000 --> 00:12:53.560 align:middle
アクセスしていないので

00:12:53.727 --> 00:12:57.110 align:middle
この表現式を選択して
直接実行することができます。

00:13:00.280 --> 00:13:03.170 align:middle
このテストはまだ正しくないですが

00:13:03.680 --> 00:13:04.420 align:middle
どうしたらいいでしょうか？

00:13:04.587 --> 00:13:09.110 align:middle
initialisation（初期化）プロトコルに
initializeメソッドを追加します。

00:13:16.900 --> 00:13:21.730 align:middle
そして、このメソッドで
何をしたらいいでしょう？

00:13:22.160 --> 00:13:25.760 align:middle
「super initialize」と書いて
そして

00:13:25.927 --> 00:13:27.730 align:middle
countは0と。

00:13:27.897 --> 00:13:31.550 align:middle
このメソッドは「new」メソッドが
使われるたびに実行されます。

00:13:32.330 --> 00:13:35.700 align:middle
さて、テストを見てみましょう。
グリーンです。

00:13:35.867 --> 00:13:40.070 align:middle
同様に、「Counter new count」は
0になります。

00:13:41.010 --> 00:13:45.320 align:middle
もう一度保存します。
printOnを追加、と。

00:13:45.487 --> 00:13:47.490 align:middle
initializeとテストを追加。

00:14:04.000 --> 00:14:06.270 align:middle
さあ、ここで興味深いのは

00:14:06.437 --> 00:14:09.300 align:middle
ここまでのヒストリーを
見ることができるところです。

00:14:09.467 --> 00:14:12.310 align:middle
さらにこのヒストリーの中を
見てブラウズすることができます。

00:14:12.520 --> 00:14:16.180 align:middle
「version」をクリックすると
これら2つの違いが見れます。

00:14:17.960 --> 00:14:20.440 align:middle
バージョン3とバージョン4の違いは

00:14:20.607 --> 00:14:21.530 align:middle
「initialize」「printOn」とテスト。

00:14:22.000 --> 00:14:24.660 align:middle
バージョン2とバージョン4の

00:14:28.490 --> 00:14:33.360 align:middle
違いを見ます。

00:14:33.527 --> 00:14:34.160 align:middle
これらの変更をみんな見ることができます。

00:14:35.870 --> 00:14:38.220 align:middle
さて、これで
やり残したことは1つです。

00:14:38.387 --> 00:14:43.100 align:middle
オブジェクトを作る方法を
少し変えます。

00:14:43.820 --> 00:14:47.210 align:middle
まず最初にテストを書くことで

00:14:47.377 --> 00:14:51.040 align:middle
何をするのかを明確にします。
テストを定義します。

00:14:53.040 --> 00:14:56.000 align:middle
「AlternateClassCreation」です。

00:14:58.000 --> 00:14:59.500 align:middle
さて、何がしたいのでしょう？

00:15:01.000 --> 00:15:03.000 align:middle
確認したいことは、

00:15:05.000 --> 00:15:11.000 align:middle
「Counter withValue: 19」を

00:15:11.500 --> 00:15:13.000 align:middle
インクリメントして

00:15:15.000 --> 00:15:20.000 align:middle
値を取り出したら
20が返ってくるということです。

00:15:21.000 --> 00:15:23.000 align:middle
よし、と。

00:15:30.000 --> 00:15:34.000 align:middle
ここに括弧を入れましょう。
そのほうがいいです。

00:15:38.000 --> 00:15:42.000 align:middle
テストはまたもや
成功ではありません。

00:15:44.000 --> 00:15:48.000 align:middle
「未知のメッセージを送っています」
と言っています。

00:15:49.000 --> 00:15:52.000 align:middle
「withValue:」というメッセージは

00:15:52.200 --> 00:15:55.000 align:middle
オブジェクトではなく
クラスに送られます。

00:15:55.500 --> 00:15:58.500 align:middle
つまり、このメッセージを

00:15:58.600 --> 00:15:59.900 align:middle
クラスに定義する必要があります。
クラスを選択して

00:16:00.000 --> 00:16:03.000 align:middle
クラスレベルに行って
追加します。

00:16:03.200 --> 00:16:10.000 align:middle
プロトコルは
「instance creation 」

00:16:12.500 --> 00:16:16.400 align:middle
「withValue: aNumber」
さあ、何をすべきでしょう？

00:16:17.500 --> 00:16:18.400 align:middle
最初にすることは

00:16:19.000 --> 00:16:21.800 align:middle
カウンターを生成することです。
変数counterに

00:16:22.000 --> 00:16:24.500 align:middle
…じっくり書いています…

00:16:24.600 --> 00:16:26.000 align:middle
「self new 」
これでカウンターを作って

00:16:26.100 --> 00:16:29.900 align:middle
「self count: aNumber」
と書きます。

00:16:30.000 --> 00:16:34.000 align:middle
そしてこのカウンターを返します。

00:16:34.100 --> 00:16:35.000 align:middle
もっと短く書くこともできますが

00:16:35.100 --> 00:16:38.000 align:middle
とりあえずは単純に書きましょう。

00:16:38.100 --> 00:16:40.000 align:middle
メソッドをコンパイルします。

00:16:40.100 --> 00:16:43.000 align:middle
さて、これでメッセージを送れます。

00:16:43.500 --> 00:16:49.000 align:middle
ほら、このボタンをクリックすると

00:16:49.100 --> 00:16:52.000 align:middle
クラスレベルから

00:16:52.100 --> 00:16:53.000 align:middle
インスタンスレベルに移動します。

00:16:53.100 --> 00:16:55.000 align:middle
これでクラスレベルから

00:16:55.100 --> 00:16:57.500 align:middle
インスタンスへ送られるメッセージ
に戻ってきました。

00:16:58.100 --> 00:17:01.200 align:middle
どういうことでしょう？
つまり

00:17:01.500 --> 00:17:08.900 align:middle
「Counter withValue: 18」
とすると、何が得られるでしょう？

00:17:09.000 --> 00:17:11.000 align:middle
Counterクラスのインスタンスが
得られます。

00:17:12.500 --> 00:17:15.000 align:middle
値が18のカウンターが得られます。

00:17:15.100 --> 00:17:18.000 align:middle
そして、ここで
decrementできます。

00:17:21.100 --> 00:17:23.000 align:middle
リフレッシュすると
17になります。

00:17:26.100 --> 00:17:28.900 align:middle
ここでテストを見れば

00:17:29.000 --> 00:17:32.000 align:middle
全てのテストはOKです。
なので、ここでまた

00:17:32.100 --> 00:17:35.000 align:middle
保存して、これで完了です。

00:17:37.100 --> 00:17:44.000 align:middle
インスタンス生成のAPIと
テストを追加。

00:17:45.000 --> 00:17:48.000 align:middle
今回は以上です。

