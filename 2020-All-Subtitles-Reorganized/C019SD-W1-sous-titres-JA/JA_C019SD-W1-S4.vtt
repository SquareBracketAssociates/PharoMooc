WEBVTT

00:00:00.160 --> 00:00:03.400 align:middle
このセッションでは
Pharo のオブジェクトモデルを見ましょう。

00:00:03.560 --> 00:00:08.600 align:middle
外観から、そのエレガントさとシンプルさを
見てみます。

00:00:08.760 --> 00:00:11.280 align:middle
今はまだ全てを理解する必要はありません。

00:00:11.440 --> 00:00:15.840 align:middle
続く数週でこれらの概念を見ていきます。

00:00:17.120 --> 00:00:20.400 align:middle
Pharo にはオブジェクトとメッセージ
しかありません。

00:00:20.560 --> 00:00:22.360 align:middle
オブジェクトがたくさんあり

00:00:22.520 --> 00:00:27.240 align:middle
マウスポインタや真偽値や配列や

00:00:27.400 --> 00:00:31.520 align:middle
数値や文字列やウィンドウやスクロールバー
等々を表現します。

00:00:31.680 --> 00:00:33.160 align:middle
コンパイラーでさえ

00:00:33.320 --> 00:00:38.360 align:middle
ソケットやフォントやコレクションのような
システムのオブジェクトであっても

00:00:38.520 --> 00:00:40.360 align:middle
これらは皆、オブジェクトで

00:00:40.520 --> 00:00:42.720 align:middle
それらにメッセージを送ることができます。

00:00:42.880 --> 00:00:45.240 align:middle
沢山の異なるメッセージがあります。

00:00:45.400 --> 00:00:49.240 align:middle
コレクションに size を送って
その大きさを得ることができます。

00:00:49.400 --> 00:00:52.560 align:middle
+ や at:put: や do: などの
メッセージがあります。

00:00:52.720 --> 00:00:55.280 align:middle
オブジェクトとメッセージ。

00:00:55.760 --> 00:00:58.920 align:middle
メッセージはプログラマーの意図を示します。

00:00:59.080 --> 00:01:02.840 align:middle
オブジェクトにメッセージを送るというのは
そのオブジェクトに何かをするように頼むことです。

00:01:03.000 --> 00:01:06.720 align:middle
オブジェクトへの依頼なのです。

00:01:06.880 --> 00:01:10.440 align:middle
そしてオブジェクトがどのメソッドを使うかを
決定します。

00:01:10.600 --> 00:01:14.440 align:middle
こうして
どんな方法を用いるかを決めることで

00:01:14.600 --> 00:01:17.200 align:middle
プログラマの意図を達成します。

00:01:17.880 --> 00:01:22.480 align:middle
次の概念はクロージャです。

00:01:22.720 --> 00:01:25.440 align:middle
レキシカルクロージャやブロックという

00:01:25.600 --> 00:01:29.240 align:middle
Pharo でのある種の匿名メソッドです。

00:01:29.400 --> 00:01:32.720 align:middle
我々はブロックと呼びます。
これは重要な用語です。

00:01:33.400 --> 00:01:37.960 align:middle
ここにある通り
ブロックは角括弧で区切られています。

00:01:38.120 --> 00:01:40.280 align:middle
これ全体が1つのブロックです。

00:01:40.440 --> 00:01:44.720 align:middle
これを匿名メソッドとして見てください。

00:01:46.200 --> 00:01:50.200 align:middle
Pharo での
とてもシンプルで統一的なモデルです。

00:01:50.520 --> 00:01:53.400 align:middle
全てのものはオブジェクトであり
クラスのインスタンスであり

00:01:53.560 --> 00:01:56.760 align:middle
クラスやメッセージさえもオブジェクトで

00:01:57.160 --> 00:02:01.440 align:middle
そしてオブジェクト間の全ての計算は
メッセージ送信を介して行われます。

00:02:01.600 --> 00:02:04.440 align:middle
メッセージを送るという言い方が

00:02:04.600 --> 00:02:08.000 align:middle
正しい用語です。
メソッドの実行ではありません。

00:02:08.160 --> 00:02:11.120 align:middle
なぜなら
メッセージをオブジェクトに送ると

00:02:11.280 --> 00:02:15.240 align:middle
メソッド探索と呼ばれるアルゴリズムがあり

00:02:15.400 --> 00:02:17.120 align:middle
そのアルゴリズムが

00:02:17.280 --> 00:02:19.760 align:middle
使うべき正しいメソッドを選択します。

00:02:19.920 --> 00:02:24.880 align:middle
メソッドは仮想的に束縛されています。

00:02:25.200 --> 00:02:28.280 align:middle
それらは遅延束縛をします。

00:02:28.560 --> 00:02:31.200 align:middle
私がオブジェクトにメッセージを送り

00:02:31.360 --> 00:02:34.360 align:middle
メソッド探索が正しいメソッドを選択する。

00:02:34.520 --> 00:02:37.880 align:middle
あとでこの話題のためのセッションがあるので
その時にまたお話します。

00:02:40.160 --> 00:02:42.960 align:middle
Pharo のオブジェクトモデルは次の通りです。

00:02:43.120 --> 00:02:45.360 align:middle
インスタンス変数は protected です。

00:02:45.520 --> 00:02:48.520 align:middle
全てのオブジェクトはインスタンス変数を持ち
インスタンス変数は protected です。

00:02:48.680 --> 00:02:50.880 align:middle
インスタンス変数はオブジェクト単位でprivateで

00:02:51.040 --> 00:02:55.080 align:middle
サブクラスからアクセス可能です。

00:02:56.240 --> 00:02:59.000 align:middle
メソッドは public で virtual です。

00:02:59.160 --> 00:03:02.280 align:middle
Pharo では全てのメソッドは public です。

00:03:02.720 --> 00:03:05.560 align:middle
そして Pharo はクラス間に単一継承があります。

00:03:05.720 --> 00:03:08.120 align:middle
1 つのクラスは 1 つのスーパークラスを持っています。

00:03:09.560 --> 00:03:14.280 align:middle
ここにコード例があります。
2 点間の外積(cross product)です。

00:03:14.440 --> 00:03:16.480 align:middle
point1 と point2 があり

00:03:16.640 --> 00:03:21.600 align:middle
point1 の x と point2 の y を掛けます。

00:03:21.760 --> 00:03:23.960 align:middle
そしてそこから

00:03:24.120 --> 00:03:27.760 align:middle
point1 の y と point2 の x の積
を引きます。

00:03:28.120 --> 00:03:32.600 align:middle
Pharo でできる計算の例です。

00:03:34.560 --> 00:03:38.080 align:middle
オブジェクトを生成するには
特別なメッセージがあります。

00:03:38.240 --> 00:03:39.480 align:middle
ここに例があります。

00:03:39.640 --> 00:03:44.160 align:middle
「@」メッセージを 整数 10 に

00:03:44.320 --> 00:03:46.680 align:middle
引数 20 をつけて送ると

00:03:46.840 --> 00:03:50.240 align:middle
点を生成します。
Point クラスのインスタンスです。

00:03:50.400 --> 00:03:53.320 align:middle
メッセージの名前は @ です。

00:03:53.480 --> 00:03:57.640 align:middle
そのメッセージを受け取る整数は 10 です。

00:03:57.800 --> 00:04:00.200 align:middle
メッセージ名の前にあるものです。

00:04:00.360 --> 00:04:03.840 align:middle
そして引数はメッセージ名の後にあります。
20 です。

00:04:04.000 --> 00:04:06.040 align:middle
ここにもう 1 つ例があります。

00:04:06.200 --> 00:04:10.880 align:middle
ここにあるような文字列を
作りたいとします。

00:04:11.040 --> 00:04:13.200 align:middle
この文字列はどうやって得られるのでしょう？

00:04:13.360 --> 00:04:16.480 align:middle
最初の部分「Pharo」があり

00:04:16.640 --> 00:04:19.800 align:middle
それに「,」メッセージを送ります。

00:04:19.960 --> 00:04:24.120 align:middle
引数として文字列「is Cool」を

00:04:24.360 --> 00:04:26.280 align:middle
ここで与えます。いいですか？

00:04:28.160 --> 00:04:31.880 align:middle
「,」メッセージの意味は文字列の連結です。

00:04:32.040 --> 00:04:35.640 align:middle
2 つの文字列が繋げられて
1 つの文字列を生成します。

00:04:37.000 --> 00:04:40.560 align:middle
new メッセージで直接

00:04:40.720 --> 00:04:42.240 align:middle
オブジェクトを作ることができます。

00:04:42.400 --> 00:04:47.200 align:middle
Monster クラスに new を送ると
そのクラスのインスタンスが得られます。

00:04:47.360 --> 00:04:49.000 align:middle
「aMonster」と表記します。

00:04:49.160 --> 00:04:52.640 align:middle
Array（配列）クラスのインスタンスを

00:04:52.840 --> 00:04:54.360 align:middle
new: メッセージで作ることができます。

00:04:54.520 --> 00:04:57.400 align:middle
引数がくることを「:」が表しています。

00:04:57.560 --> 00:04:59.520 align:middle
そしてここに整数 6 がきます。

00:04:59.680 --> 00:05:02.400 align:middle
すると大きさ 6 の配列が得られます。

00:05:03.000 --> 00:05:05.960 align:middle
オブジェクトを生成する専用のメッセージがあり

00:05:06.120 --> 00:05:09.040 align:middle
クラスに自分のメッセージを定義することができます。

00:05:09.200 --> 00:05:11.360 align:middle
Tomagoshi クラスに

00:05:11.520 --> 00:05:14.080 align:middle
withHunger: メソッドを定義できます。

00:05:14.240 --> 00:05:17.800 align:middle
そしてこのメソッドに整数 10 を与えます。

00:05:17.960 --> 00:05:20.880 align:middle
これで Tomagoshi クラスのインスタンスを

00:05:21.040 --> 00:05:22.800 align:middle
属性値付きで生成できます。

00:05:23.320 --> 00:05:27.520 align:middle
オブジェクト生成に特化したメッセージです。

00:05:28.880 --> 00:05:33.880 align:middle
この講義では、Pharo のオブジェクトモデルの
外観を見てきました。

00:05:34.040 --> 00:05:37.880 align:middle
全てを理解する必要はありません。
これらの概念はまた後でやります。

00:05:38.040 --> 00:05:41.760 align:middle
しかし Pharo にはコンストラクターや

00:05:41.920 --> 00:05:45.320 align:middle
静的（static）メソッドや
型宣言やインターフェイスや

00:05:45.480 --> 00:05:48.040 align:middle
パッケージ、private、protected修飾子がない
ということを覚えておくことは重要です。

00:05:48.200 --> 00:05:51.600 align:middle
他のオブジェクト指向言語でよくある
こういった古典的な修飾子はないのです。

00:05:51.760 --> 00:05:56.040 align:middle
パラメトリックな型やボクシングや
アンボクシングなどもありません。

00:05:56.200 --> 00:05:59.280 align:middle
そして、Pharo が本当に強力な言語だと
いうことがわかるでしょう。

00:06:00.720 --> 00:06:04.120 align:middle
つまり、Pharo では
全てのものがオブジェクトなのです。

00:06:04.280 --> 00:06:07.200 align:middle
計算はオブジェクトに送られた
メッセージによって実行されます。

00:06:07.360 --> 00:06:12.080 align:middle
メソッドは遅延束縛されます。

00:06:12.240 --> 00:06:14.640 align:middle
メソッド探索というアルゴリズムがあり

00:06:14.800 --> 00:06:18.680 align:middle
オブジェクトがメッセージを受け取った時に
正しいメソッドを選択します。

00:06:18.960 --> 00:06:22.640 align:middle
ブロックという概念があります。
匿名メソッドです。

00:06:22.800 --> 00:06:25.000 align:middle
Pharo ではとても重要なものです。

00:06:25.160 --> 00:06:30.040 align:middle
そして、クラスに特定のメッセージを
送ることによって

00:06:30.200 --> 00:06:31.800 align:middle
オブジェクトを生成します。

