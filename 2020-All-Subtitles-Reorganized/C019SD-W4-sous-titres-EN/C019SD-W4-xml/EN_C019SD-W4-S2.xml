<?xml version="1.0" encoding="UTF-8"?>
<tt xml:lang="en" xmlns="http://www.w3.org/ns/ttml" xmlns:ttm="http://www.w3.org/ns/ttml#metadata" xmlns:tts="http://www.w3.org/ns/ttml#styling" xmlns:ttp="http://www.w3.org/ns/ttml#parameter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:smpte="http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt" ttp:timeBase="smpte" ttp:frameRate="25" ttp:dropMode="nonDrop" ttp:frameRateMultiplier="1 1">
    <head>
        <ttm:title>EN_C019SD-W4-S2</ttm:title>
        <ttm:desc>SMPTE Timed Text</ttm:desc>
        <ttm:copyright>Copyright (C) No Author</ttm:copyright>
        <styling>
            <style tts:fontStyle="normal" tts:fontWeight="normal" xml:id="normal" tts:color="black" tts:fontFamily="Verdana" tts:textAlign="center" tts:fontSize="80%"></style>
            <style tts:fontStyle="italic" tts:fontWeight="normal" xml:id="italic" tts:color="black" tts:fontFamily="Verdana" tts:textAlign="center" tts:fontSize="80%"></style>
        </styling>
        <layout>
            <region xml:id="top" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="before" tts:origin="10% 10%" tts:extent="80% 80%"></region>
            <region xml:id="bottom" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="after" tts:origin="10% 10%" tts:extent="80% 80%"></region>
            <region xml:id="center" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="center" tts:origin="10% 10%" tts:extent="80% 80%"></region>
        </layout>
    </head>
    <body>
        <div style="normal" xml:id="d1">
            <p xml:id="p1" begin="00:00:00:15" end="00:00:04:20" region="bottom">Hello, everyone.<br/>This second sequence on inheritance</p>
            <p xml:id="p2" begin="00:00:04:24" end="00:00:08:12" region="bottom">will teach you more<br/>about behavior inheritance</p>
            <p xml:id="p3" begin="00:00:08:16" end="00:00:11:20" region="bottom">and what happens when you<br/>send a message to an object.</p>
            <p xml:id="p4" begin="00:00:12:11" end="00:00:15:08" region="bottom">The goal of this sequence</p>
            <p xml:id="p5" begin="00:00:15:12" end="00:00:18:18" region="bottom">is to understand<br/>the message-sending algorithm</p>
            <p xml:id="p6" begin="00:00:19:18" end="00:00:24:10" region="bottom">that makes it possible<br/>to convert a message</p>
            <p xml:id="p7" begin="00:00:24:14" end="00:00:28:14" region="bottom">sent by a receiver to a method.</p>
            <p xml:id="p8" begin="00:00:28:18" end="00:00:32:18" region="bottom">That is, what method will be run,<br/>in relation to the message sent,</p>
            <p xml:id="p9" begin="00:00:34:08" end="00:00:37:16" region="bottom">and 'self" semantics,<br/>or what self really means.</p>
            <p xml:id="p10" begin="00:00:38:20" end="00:00:40:23" region="bottom">As we saw in sequence 1,</p>
            <p xml:id="p11" begin="00:00:41:10" end="00:00:45:08" region="bottom">inheritance is static, for state.</p>
            <p xml:id="p12" begin="00:00:45:12" end="00:00:48:16" region="bottom">That is, when the subclass is defined,</p>
            <p xml:id="p13" begin="00:00:49:04" end="00:00:51:06" region="bottom">its state is known.</p>
            <p xml:id="p14" begin="00:00:51:10" end="00:00:53:21" region="bottom">But inheritance of behavior is dynamic.</p>
            <p xml:id="p15" begin="00:00:54:00" end="00:00:56:01" region="bottom">When the program is running,</p>
            <p xml:id="p16" begin="00:00:56:10" end="00:00:58:18" region="bottom">when you send a message to an object</p>
            <p xml:id="p17" begin="00:00:58:22" end="00:01:02:00" region="bottom">you look for methods<br/>for class and superclass.</p>
            <p xml:id="p18" begin="00:01:02:10" end="00:01:06:05" region="bottom">Message-sending is a two-step process.</p>
            <p xml:id="p19" begin="00:01:06:23" end="00:01:11:10" region="bottom">First, you look up the method<br/>that matches the message.</p>
            <p xml:id="p20" begin="00:01:11:19" end="00:01:15:03" region="bottom">Step two, you execute the method<br/>on the receiver.</p>
            <p xml:id="p21" begin="00:01:16:19" end="00:01:19:17" region="bottom">So here, we have the Rectangle class,</p>
            <p xml:id="p22" begin="00:01:20:07" end="00:01:22:22" region="bottom">the ColoredRectangle class,</p>
            <p xml:id="p23" begin="00:01:23:23" end="00:01:27:19" region="bottom">and an instance of ColoredRectangle<br/>called aColoredRectangle,</p>
            <p xml:id="p24" begin="00:01:28:07" end="00:01:31:19" region="bottom">We send the message "area"<br/>to this object.</p>
            <p xml:id="p25" begin="00:01:34:11" end="00:01:40:05" region="bottom">Our lookup algorithm looks for a method<br/>matching the "area" message.</p>
            <p xml:id="p26" begin="00:01:41:10" end="00:01:43:17" region="bottom">It finds the method</p>
            <p xml:id="p27" begin="00:01:44:04" end="00:01:46:22" region="bottom">and carries it out</p>
            <p xml:id="p28" begin="00:01:47:22" end="00:01:51:10" region="bottom">in relation to the object<br/>aColoredRectangle.</p>
            <p xml:id="p29" begin="00:01:52:15" end="00:01:54:05" region="bottom">The lookup algorithm</p>
            <p xml:id="p30" begin="00:01:54:16" end="00:01:57:16" region="bottom">identifies the method to be executed</p>
            <p xml:id="p31" begin="00:01:57:22" end="00:02:00:00" region="bottom">when a message is sent to an object.</p>
            <p xml:id="p32" begin="00:02:00:08" end="00:02:04:14" region="bottom">There are clearly two steps:<br/>message sending, and method execution.</p>
            <p xml:id="p33" begin="00:02:04:18" end="00:02:07:23" region="bottom">They are fundamentally different,<br/>in object programming.</p>
            <p xml:id="p34" begin="00:02:08:16" end="00:02:10:19" region="bottom">Even if you use another language,</p>
            <p xml:id="p35" begin="00:02:10:22" end="00:02:15:00" region="bottom">it is important to understand<br/>the difference between the two.</p>
            <p xml:id="p36" begin="00:02:15:08" end="00:02:20:05" region="bottom">If you send the "area" message<br/>to the aColoredRectangle object,</p>
            <p xml:id="p37" begin="00:02:20:10" end="00:02:23:04" region="bottom">the first thing the lookup algorithm<br/>will do</p>
            <p xml:id="p38" begin="00:02:23:08" end="00:02:26:20" region="bottom">is search for the class of the receiver.</p>
            <p xml:id="p39" begin="00:02:27:11" end="00:02:29:21" region="bottom">The receiver of the message "area"</p>
            <p xml:id="p40" begin="00:02:30:00" end="00:02:31:09" region="bottom">is aColoredRectangle.</p>
            <p xml:id="p41" begin="00:02:31:13" end="00:02:34:16" region="bottom">The lookup algorithm<br/>starts searching for a method</p>
            <p xml:id="p42" begin="00:02:34:20" end="00:02:38:18" region="bottom">in the object's class:<br/>ColoredRectangle.</p>
            <p xml:id="p43" begin="00:02:39:02" end="00:02:41:21" region="bottom">It looks for an "area" method<br/>in that class.</p>
            <p xml:id="p44" begin="00:02:42:04" end="00:02:44:04" region="bottom">The lookup algorithm</p>
            <p xml:id="p45" begin="00:02:44:08" end="00:02:48:00" region="bottom">will not find the method "area"<br/>in that subclass.</p>
            <p xml:id="p46" begin="00:02:48:12" end="00:02:51:05" region="bottom">So it will look elsewhere.</p>
            <p xml:id="p47" begin="00:02:51:16" end="00:02:54:24" region="bottom">It looks in the superclass Rectangle.</p>
            <p xml:id="p48" begin="00:02:55:16" end="00:02:57:19" region="bottom">It finds the method "area" there,</p>
            <p xml:id="p49" begin="00:02:58:18" end="00:02:59:23" region="bottom">and returns it.</p>
            <p xml:id="p50" begin="00:03:00:02" end="00:03:03:08" region="bottom">The lookup algorithm is done<br/>when it finds a method.</p>
            <p xml:id="p51" begin="00:03:04:08" end="00:03:09:08" region="bottom">Let's study two cases, and review<br/>the algorithm I just listed on them.</p>
            <p xml:id="p52" begin="00:03:10:16" end="00:03:13:05" region="bottom">We send the message "color"</p>
            <p xml:id="p53" begin="00:03:13:09" end="00:03:14:17" region="bottom">to aColoredRectangle.</p>
            <p xml:id="p54" begin="00:03:14:21" end="00:03:18:09" region="bottom">The algorithm searches<br/>the receiver class</p>
            <p xml:id="p55" begin="00:03:18:17" end="00:03:20:23" region="bottom">for a method called color.</p>
            <p xml:id="p56" begin="00:03:21:11" end="00:03:23:21" region="bottom">It finds it, and returns it.</p>
            <p xml:id="p57" begin="00:03:25:04" end="00:03:29:15" region="bottom">If we now send the message "area"<br/>to aColoredRectangle,</p>
            <p xml:id="p58" begin="00:03:30:08" end="00:03:33:14" region="bottom">the algorithm searches<br/>the receiver's class</p>
            <p xml:id="p59" begin="00:03:33:18" end="00:03:35:04" region="bottom">for the method "area."</p>
            <p xml:id="p60" begin="00:03:35:08" end="00:03:37:23" region="bottom">Not finding it, it searches the superclass.</p>
            <p xml:id="p61" begin="00:03:38:04" end="00:03:40:23" region="bottom">It finds it, and returns the method.</p>
            <p xml:id="p62" begin="00:03:42:07" end="00:03:45:13" region="bottom">"Self" always represents the receiver.</p>
            <p xml:id="p63" begin="00:03:45:24" end="00:03:49:18" region="bottom">The following examples<br/>will make it clear to you</p>
            <p xml:id="p64" begin="00:03:50:08" end="00:03:54:14" region="bottom">that the lookup algorithm always<br/>applies to the receiver self.</p>
            <p xml:id="p65" begin="00:03:54:24" end="00:03:57:20" region="bottom">Here we have an instance of class A.</p>
            <p xml:id="p66" begin="00:04:01:06" end="00:04:02:23" region="bottom">We send the message "foo."</p>
            <p xml:id="p67" begin="00:04:03:19" end="00:04:06:03" region="bottom">The lookup algorithm searches for foo,</p>
            <p xml:id="p68" begin="00:04:06:09" end="00:04:08:03" region="bottom">finds it, and executes it.</p>
            <p xml:id="p69" begin="00:04:10:00" end="00:04:12:17" region="bottom">For B new, we start with aB,</p>
            <p xml:id="p70" begin="00:04:13:00" end="00:04:14:22" region="bottom">the same thing as B new.</p>
            <p xml:id="p71" begin="00:04:15:01" end="00:04:16:24" region="bottom">We search for a method, "foo."</p>
            <p xml:id="p72" begin="00:04:17:11" end="00:04:19:09" region="bottom">The lookup algorithm finds it,</p>
            <p xml:id="p73" begin="00:04:20:05" end="00:04:22:00" region="bottom">executes it, and returns 50.</p>
            <p xml:id="p74" begin="00:04:22:04" end="00:04:23:11" region="bottom">So, here we have 10,</p>
            <p xml:id="p75" begin="00:04:24:13" end="00:04:25:08" region="bottom">and 50.</p>
            <p xml:id="p76" begin="00:04:25:16" end="00:04:30:05" region="bottom">It's important for you to take the time<br/>to think about what "self" means.</p>
            <p xml:id="p77" begin="00:04:30:14" end="00:04:33:01" region="bottom">It is important to describe two points.</p>
            <p xml:id="p78" begin="00:04:33:10" end="00:04:35:03" region="bottom">What does "self" represent?</p>
            <p xml:id="p79" begin="00:04:36:07" end="00:04:40:00" region="bottom">How does message sending behave</p>
            <p xml:id="p80" begin="00:04:40:07" end="00:04:42:16" region="bottom">when a message is sent to "self"?</p>
            <p xml:id="p81" begin="00:04:43:04" end="00:04:47:04" region="bottom">"self" and "this" -<br/>"this" being the term in Java -</p>
            <p xml:id="p82" begin="00:04:47:17" end="00:04:48:22" region="bottom">are the same thing.</p>
            <p xml:id="p83" begin="00:04:49:16" end="00:04:52:14" region="bottom">They always represent the receiver<br/>of the message.</p>
            <p xml:id="p84" begin="00:04:52:22" end="00:04:54:06" region="bottom">So, we saw this example</p>
            <p xml:id="p85" begin="00:04:54:14" end="00:04:58:11" region="bottom">with A new foo and B new foo.</p>
            <p xml:id="p86" begin="00:04:59:01" end="00:05:01:13" region="bottom">Now we'll send the message "bar."</p>
            <p xml:id="p87" begin="00:05:02:12" end="00:05:05:00" region="bottom">Bar is sent to an instance.</p>
            <p xml:id="p88" begin="00:05:05:14" end="00:05:08:13" region="bottom">Bar is found here, and executed.</p>
            <p xml:id="p89" begin="00:05:09:09" end="00:05:12:24" region="bottom">and we send the message foo<br/>to object self.</p>
            <p xml:id="p90" begin="00:05:13:06" end="00:05:15:15" region="bottom">"Self" is this object,</p>
            <p xml:id="p91" begin="00:05:16:20" end="00:05:17:19" region="bottom">A new.</p>
            <p xml:id="p92" begin="00:05:18:20" end="00:05:21:24" region="bottom">So we search this object<br/>for a method "foo."</p>
            <p xml:id="p93" begin="00:05:22:14" end="00:05:24:23" region="bottom">We search the class for the method.</p>
            <p xml:id="p94" begin="00:05:25:12" end="00:05:28:04" region="bottom">We find it, execute it, and return 10.</p>
            <p xml:id="p95" begin="00:05:30:10" end="00:05:33:14" region="bottom">The other case is exactly identical.</p>
            <p xml:id="p96" begin="00:05:33:19" end="00:05:37:12" region="bottom">But pay attention, because many<br/>beginning object programmers</p>
            <p xml:id="p97" begin="00:05:37:16" end="00:05:38:19" region="bottom">get it wrong.</p>
            <p xml:id="p98" begin="00:05:39:07" end="00:05:41:13" region="bottom">But the algorithm is identical.</p>
            <p xml:id="p99" begin="00:05:42:14" end="00:05:45:23" region="bottom">We send "bar" to this object.</p>
            <p xml:id="p100" begin="00:05:46:05" end="00:05:47:15" region="bottom">bar is not found here.</p>
            <p xml:id="p101" begin="00:05:47:19" end="00:05:51:03" region="bottom">It is found here.<br/>So this is the bar that is executed.</p>
            <p xml:id="p102" begin="00:05:51:21" end="00:05:55:13" region="bottom">At that point, the message "foo"<br/>is sent to self, which is...</p>
            <p xml:id="p103" begin="00:05:56:21" end="00:05:58:13" region="bottom">aB, thus B new.</p>
            <p xml:id="p104" begin="00:06:00:09" end="00:06:01:22" region="bottom">We send the message foo,</p>
            <p xml:id="p105" begin="00:06:02:01" end="00:06:05:16" region="bottom">so the algorithm looks for the method<br/>in the object class.</p>
            <p xml:id="p106" begin="00:06:06:07" end="00:06:07:12" region="bottom">It finds it.</p>
            <p xml:id="p107" begin="00:06:07:23" end="00:06:09:04" region="bottom">50 is returned.</p>
            <p xml:id="p108" begin="00:06:09:18" end="00:06:12:05" region="bottom">This is how the algorithm unfolds.</p>
            <p xml:id="p109" begin="00:06:12:12" end="00:06:16:10" region="bottom">Look at each step in the process.<br/>It is what I just told you.</p>
            <p xml:id="p110" begin="00:06:18:01" end="00:06:20:17" region="bottom">This example is also identical</p>
            <p xml:id="p111" begin="00:06:21:02" end="00:06:22:07" region="bottom">to the preceding one.</p>
            <p xml:id="p112" begin="00:06:23:12" end="00:06:26:05" region="bottom">Class B, here, is now empty.</p>
            <p xml:id="p113" begin="00:06:27:09" end="00:06:31:03" region="bottom">A new class, C, is defined<br/>with the method foo return of 50.</p>
            <p xml:id="p114" begin="00:06:31:11" end="00:06:34:19" region="bottom">You go through the algorithm process<br/>I just presented.</p>
            <p xml:id="p115" begin="00:06:34:23" end="00:06:38:09" region="bottom">Here, you will get 10.</p>
            <p xml:id="p116" begin="00:06:38:19" end="00:06:41:19" region="bottom">This is the foo that is executed,<br/>in the end.</p>
            <p xml:id="p117" begin="00:06:42:03" end="00:06:43:13" region="bottom">Here, you get 50.</p>
            <p xml:id="p118" begin="00:06:45:04" end="00:06:45:24" region="bottom">To conclude:</p>
            <p xml:id="p119" begin="00:06:46:13" end="00:06:50:22" region="bottom">"Self," like "this" in Java,<br/>always represents the receiver.</p>
            <p xml:id="p120" begin="00:06:51:14" end="00:06:54:05" region="bottom">Message sending always involves<br/>two steps.</p>
            <p xml:id="p121" begin="00:06:54:17" end="00:06:58:09" region="bottom">First, the lookup algorithm looks<br/>for a match between the method</p>
            <p xml:id="p122" begin="00:06:59:20" end="00:07:01:12" region="bottom">and the message sent.</p>
            <p xml:id="p123" begin="00:07:01:17" end="00:07:05:04" region="bottom">Second step: the method found<br/>is executed on the receiver.</p>
            <p xml:id="p124" begin="00:07:05:20" end="00:07:09:20" region="bottom">The lookup algorithm travels up<br/>from the receiver's class.</p>
            <p xml:id="p125" begin="00:07:10:05" end="00:07:12:21" region="bottom">The goal of the algorithm lookup</p>
            <p xml:id="p126" begin="00:07:13:02" end="00:07:17:13" region="bottom">is to find a method that matches<br/>the message sent to a receiver.</p>
        </div>
    </body>
</tt>