<?xml version="1.0" encoding="UTF-8"?>
<tt xml:lang="en" xmlns="http://www.w3.org/ns/ttml" xmlns:ttm="http://www.w3.org/ns/ttml#metadata" xmlns:tts="http://www.w3.org/ns/ttml#styling" xmlns:ttp="http://www.w3.org/ns/ttml#parameter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:smpte="http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt" ttp:timeBase="smpte" ttp:frameRate="25" ttp:dropMode="nonDrop" ttp:frameRateMultiplier="1 1">
    <head>
        <ttm:title>EN_C019SD-W4-S3</ttm:title>
        <ttm:desc>SMPTE Timed Text</ttm:desc>
        <ttm:copyright>Copyright (C) No Author</ttm:copyright>
        <styling>
            <style tts:fontStyle="normal" tts:fontWeight="normal" xml:id="normal" tts:color="black" tts:fontFamily="Verdana" tts:textAlign="center" tts:fontSize="80%"></style>
            <style tts:fontStyle="italic" tts:fontWeight="normal" xml:id="italic" tts:color="black" tts:fontFamily="Verdana" tts:textAlign="center" tts:fontSize="80%"></style>
        </styling>
        <layout>
            <region xml:id="top" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="before" tts:origin="10% 10%" tts:extent="80% 80%"></region>
            <region xml:id="bottom" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="after" tts:origin="10% 10%" tts:extent="80% 80%"></region>
            <region xml:id="center" tts:backgroundColor="transparent" tts:showBackground="whenActive" tts:displayAlign="center" tts:origin="10% 10%" tts:extent="80% 80%"></region>
        </layout>
    </head>
    <body>
        <div style="normal" xml:id="d1">
            <p xml:id="p1" begin="00:00:00:11" end="00:00:01:12" region="bottom">Hello, everyone.</p>
            <p xml:id="p2" begin="00:00:01:16" end="00:00:03:10" region="bottom">Welcome to sequence 3.</p>
            <p xml:id="p3" begin="00:00:03:14" end="00:00:06:01" region="bottom">Now that we have looked at inheritance,</p>
            <p xml:id="p4" begin="00:00:07:10" end="00:00:10:10" region="bottom">self, and lookup,<br/>we'll examine "super."</p>
            <p xml:id="p5" begin="00:00:10:21" end="00:00:14:07" region="bottom">We'll start by focusing on<br/>sending a message</p>
            <p xml:id="p6" begin="00:00:14:22" end="00:00:17:21" region="bottom">in cases where "super"<br/>is the receiver.</p>
            <p xml:id="p7" begin="00:00:18:09" end="00:00:19:21" region="bottom">What is "super"?</p>
            <p xml:id="p8" begin="00:00:20:03" end="00:00:25:09" region="bottom">Take a few minutes to think of<br/>a definition covering these two points:</p>
            <p xml:id="p9" begin="00:00:26:01" end="00:00:28:05" region="bottom">What does "super" represent?</p>
            <p xml:id="p10" begin="00:00:30:10" end="00:00:32:05" region="bottom">How is a method looked up</p>
            <p xml:id="p11" begin="00:00:32:09" end="00:00:34:06" region="bottom">when a message is sent to "super"?</p>
            <p xml:id="p12" begin="00:00:35:04" end="00:00:36:14" region="bottom">The following principle</p>
            <p xml:id="p13" begin="00:00:36:23" end="00:00:39:05" region="bottom">is the same in both Pharo and Java.</p>
            <p xml:id="p14" begin="00:00:39:14" end="00:00:41:16" region="bottom">The example you see here</p>
            <p xml:id="p15" begin="00:00:42:20" end="00:00:46:06" region="bottom">is similar to the ones we saw<br/>in earlier sequences.</p>
            <p xml:id="p16" begin="00:00:46:17" end="00:00:49:09" region="bottom">"Super" is used in one method.</p>
            <p xml:id="p17" begin="00:00:52:08" end="00:00:55:15" region="bottom">Let's think about what happens.</p>
            <p xml:id="p18" begin="00:00:56:11" end="00:00:57:23" region="bottom">For A new bar,</p>
            <p xml:id="p19" begin="00:00:59:14" end="00:01:00:23" region="bottom">there's no problem.</p>
            <p xml:id="p20" begin="00:01:01:02" end="00:01:03:03" region="bottom">It's the same process as before.</p>
            <p xml:id="p21" begin="00:01:03:08" end="00:01:05:15" region="bottom">The method is run,</p>
            <p xml:id="p22" begin="00:01:06:04" end="00:01:08:02" region="bottom">and foo returns 10.</p>
            <p xml:id="p23" begin="00:01:10:08" end="00:01:13:11" region="bottom">In the case of B new bar,<br/>let's look at each step.</p>
            <p xml:id="p24" begin="00:01:15:14" end="00:01:17:24" region="bottom">We send the message "bar"</p>
            <p xml:id="p25" begin="00:01:18:09" end="00:01:20:18" region="bottom">to the B new object.</p>
            <p xml:id="p26" begin="00:01:22:02" end="00:01:24:21" region="bottom">The lookup algorithm<br/>seeks the method "bar"</p>
            <p xml:id="p27" begin="00:01:25:04" end="00:01:27:04" region="bottom">starting with the object class.</p>
            <p xml:id="p28" begin="00:01:27:08" end="00:01:29:20" region="bottom">It finds the method "bar."</p>
            <p xml:id="p29" begin="00:01:30:22" end="00:01:33:08" region="bottom">It is executed on the receiver.</p>
            <p xml:id="p30" begin="00:01:34:00" end="00:01:38:17" region="bottom">This "bar" method is the one<br/>executed on the receiver.</p>
            <p xml:id="p31" begin="00:01:40:01" end="00:01:43:11" region="bottom">Now I have to compute<br/>"super bar"</p>
            <p xml:id="p32" begin="00:01:44:05" end="00:01:46:16" region="bottom">and "self foo," and add them together.</p>
            <p xml:id="p33" begin="00:01:46:22" end="00:01:48:15" region="bottom">We can do "self foo,"</p>
            <p xml:id="p34" begin="00:01:48:19" end="00:01:53:10" region="bottom">"self foo" sends the message<br/>"foo" to the object "self."</p>
            <p xml:id="p35" begin="00:01:53:20" end="00:01:55:15" region="bottom">"Self" is my B new.</p>
            <p xml:id="p36" begin="00:01:56:16" end="00:02:00:02" region="bottom">The only "foo" possible<br/>is the one in class A.</p>
            <p xml:id="p37" begin="00:02:01:07" end="00:02:03:04" region="bottom">So "self foo" returns 10.</p>
            <p xml:id="p38" begin="00:02:04:21" end="00:02:06:23" region="bottom">In "super bar,"</p>
            <p xml:id="p39" begin="00:02:08:00" end="00:02:09:18" region="bottom">"super" is the receiver.</p>
            <p xml:id="p40" begin="00:02:10:11" end="00:02:12:23" region="bottom">But the lookup algorithm changes</p>
            <p xml:id="p41" begin="00:02:13:03" end="00:02:15:18" region="bottom">in the presence of the receiver "super."</p>
            <p xml:id="p42" begin="00:02:16:17" end="00:02:19:21" region="bottom">It will seek the method "bar"</p>
            <p xml:id="p43" begin="00:02:20:08" end="00:02:24:04" region="bottom">starting with the super class<br/>containing the keyword "super."</p>
            <p xml:id="p44" begin="00:02:25:02" end="00:02:29:05" region="bottom">"Super" is located in the "bar"<br/>method of class B.</p>
            <p xml:id="p45" begin="00:02:29:16" end="00:02:32:24" region="bottom">We'll be looking for method "bar"</p>
            <p xml:id="p46" begin="00:02:33:03" end="00:02:35:17" region="bottom">starting in B's superclass, which is A.</p>
            <p xml:id="p47" begin="00:02:36:06" end="00:02:40:18" region="bottom">So we find this method<br/>and that is the one executed.</p>
            <p xml:id="p48" begin="00:02:41:00" end="00:02:43:05" region="bottom">Foo is sent to self.</p>
            <p xml:id="p49" begin="00:02:43:09" end="00:02:46:12" region="bottom">"Self" is always the receiving object.</p>
            <p xml:id="p50" begin="00:02:46:22" end="00:02:47:22" region="bottom">It is B new.</p>
            <p xml:id="p51" begin="00:02:48:03" end="00:02:51:05" region="bottom">So foo is sent to the initial object.</p>
            <p xml:id="p52" begin="00:02:51:14" end="00:02:54:16" region="bottom">This is the "foo" that is executed,<br/>returning 10.</p>
            <p xml:id="p53" begin="00:02:56:20" end="00:02:58:10" region="bottom">10 + 10 = 20.</p>
            <p xml:id="p54" begin="00:03:00:08" end="00:03:02:12" region="bottom">In the case of C new bar,</p>
            <p xml:id="p55" begin="00:03:02:23" end="00:03:04:20" region="bottom">we note C new, here.</p>
            <p xml:id="p56" begin="00:03:05:03" end="00:03:09:03" region="bottom">It is an instance of class C.<br/>We send it the message "bar."</p>
            <p xml:id="p57" begin="00:03:09:20" end="00:03:14:08" region="bottom">"Bar" is sought in class C new.</p>
            <p xml:id="p58" begin="00:03:14:16" end="00:03:17:02" region="bottom">Not found.<br/>The class above is searched.</p>
            <p xml:id="p59" begin="00:03:17:12" end="00:03:18:16" region="bottom">It is there, in B.</p>
            <p xml:id="p60" begin="00:03:18:20" end="00:03:22:10" region="bottom">So the B new bar will be executed.</p>
            <p xml:id="p61" begin="00:03:23:12" end="00:03:27:24" region="bottom">This bar is the sum<br/>of two message-sendings.</p>
            <p xml:id="p62" begin="00:03:28:16" end="00:03:31:12" region="bottom">We can start with the second.</p>
            <p xml:id="p63" begin="00:03:31:16" end="00:03:34:16" region="bottom">We send the message "foo"<br/>to the object "self."</p>
            <p xml:id="p64" begin="00:03:34:22" end="00:03:39:05" region="bottom">Self is still my C New, here.<br/>I send the message "foo."</p>
            <p xml:id="p65" begin="00:03:40:03" end="00:03:42:19" region="bottom">The method is found, and 50 is returned.</p>
            <p xml:id="p66" begin="00:03:44:07" end="00:03:45:22" region="bottom">I put the value 50 there.</p>
            <p xml:id="p67" begin="00:03:46:11" end="00:03:50:24" region="bottom">Now we need the first part<br/>of the sum, "super bar."</p>
            <p xml:id="p68" begin="00:03:51:06" end="00:03:55:05" region="bottom">I send the message "bar"<br/>to "super," always the receiver.</p>
            <p xml:id="p69" begin="00:03:55:09" end="00:03:58:07" region="bottom">But the lookup algorithm changes.</p>
            <p xml:id="p70" begin="00:03:59:00" end="00:04:04:06" region="bottom">It looks for "bar" in the superclass<br/>for the class containing "super."</p>
            <p xml:id="p71" begin="00:04:05:08" end="00:04:08:18" region="bottom">That is, "bar" method in class B.</p>
            <p xml:id="p72" begin="00:04:09:00" end="00:04:13:06" region="bottom">The algorithm starts looking up "bar"<br/>in B's superclass, which is A.</p>
            <p xml:id="p73" begin="00:04:13:22" end="00:04:15:11" region="bottom">Bar is located here.</p>
            <p xml:id="p74" begin="00:04:15:22" end="00:04:17:09" region="bottom">This "bar" is executed.</p>
            <p xml:id="p75" begin="00:04:17:16" end="00:04:20:23" region="bottom">"Self" is still C new. Still this one.</p>
            <p xml:id="p76" begin="00:04:21:02" end="00:04:22:11" region="bottom">Always the receiver.</p>
            <p xml:id="p77" begin="00:04:22:19" end="00:04:24:11" region="bottom">We send it the message "foo."</p>
            <p xml:id="p78" begin="00:04:24:15" end="00:04:27:24" region="bottom">The result is 50, and I have 50 here.</p>
            <p xml:id="p79" begin="00:04:28:07" end="00:04:30:24" region="bottom">50 + 50 = 100.</p>
            <p xml:id="p80" begin="00:04:31:17" end="00:04:32:23" region="bottom">The next slide</p>
            <p xml:id="p81" begin="00:04:33:09" end="00:04:36:16" region="bottom">reviews the details<br/>of the lookup algorithm process,</p>
            <p xml:id="p82" begin="00:04:36:20" end="00:04:38:17" region="bottom">for further study.</p>
            <p xml:id="p83" begin="00:04:39:17" end="00:04:42:22" region="bottom">"Super" always refers to the receiver.</p>
            <p xml:id="p84" begin="00:04:43:01" end="00:04:45:03" region="bottom">It's exactly like "self,"</p>
            <p xml:id="p85" begin="00:04:45:08" end="00:04:47:05" region="bottom">or "this" in Java.</p>
            <p xml:id="p86" begin="00:04:47:12" end="00:04:52:11" region="bottom">Likewise, "super" in Java is like "this,"<br/>and always refers to the receiver.</p>
            <p xml:id="p87" begin="00:04:53:04" end="00:04:57:13" region="bottom">However, when a message is sent<br/>to "super," the lookup algorithm changes</p>
            <p xml:id="p88" begin="00:04:57:17" end="00:05:01:09" region="bottom">and begins searching for a method<br/>in the superclass</p>
            <p xml:id="p89" begin="00:05:01:20" end="00:05:05:17" region="bottom">of the class containing the method<br/>being executed.</p>
            <p xml:id="p90" begin="00:05:06:01" end="00:05:09:22" region="bottom">"Self" and "super" are therefore<br/>fundamentally different.</p>
            <p xml:id="p91" begin="00:05:10:08" end="00:05:13:16" region="bottom">"Self" is dynamic,<br/>while "super" is static.</p>
            <p xml:id="p92" begin="00:05:13:22" end="00:05:15:13" region="bottom">I'll explain that further.</p>
            <p xml:id="p93" begin="00:05:17:02" end="00:05:19:19" region="bottom">When "foo" is sent to "self,"</p>
            <p xml:id="p94" begin="00:05:20:09" end="00:05:24:06" region="bottom">the developer has no idea<br/>which "foo" method will be executed.</p>
            <p xml:id="p95" begin="00:05:24:22" end="00:05:28:12" region="bottom">It could be the "foo"<br/>located in the same class,</p>
            <p xml:id="p96" begin="00:05:29:03" end="00:05:31:21" region="bottom">or a "foo" in an existing subclass,</p>
            <p xml:id="p97" begin="00:05:32:05" end="00:05:35:16" region="bottom">or a "foo" in a subclass<br/>created by another developer</p>
            <p xml:id="p98" begin="00:05:35:23" end="00:05:38:01" region="bottom">before the program is run.</p>
            <p xml:id="p99" begin="00:05:38:18" end="00:05:42:06" region="bottom">When the "bar" method developer<br/>writes "self foo,"</p>
            <p xml:id="p100" begin="00:05:42:12" end="00:05:45:16" region="bottom">he has no idea which "foo"<br/>will be executed.</p>
            <p xml:id="p101" begin="00:05:46:02" end="00:05:48:04" region="bottom">That's a convenient feature.</p>
            <p xml:id="p102" begin="00:05:48:12" end="00:05:51:07" region="bottom">It means developers<br/>can create a new subclass</p>
            <p xml:id="p103" begin="00:05:51:11" end="00:05:54:08" region="bottom">to change the behavior of class A.</p>
            <p xml:id="p104" begin="00:05:55:11" end="00:05:58:03" region="bottom">Conversely, "super" is static.</p>
            <p xml:id="p105" begin="00:05:58:22" end="00:06:03:10" region="bottom">When the developer writes "super foo,"</p>
            <p xml:id="p106" begin="00:06:04:00" end="00:06:06:23" region="bottom">he knows which "foo" method<br/>will be executed</p>
            <p xml:id="p107" begin="00:06:07:02" end="00:06:09:14" region="bottom">when the program is run.</p>
            <p xml:id="p108" begin="00:06:09:21" end="00:06:13:11" region="bottom">When he writes "super foo" here,<br/>he knows he is referring</p>
            <p xml:id="p109" begin="00:06:14:07" end="00:06:16:09" region="bottom">to "foo" in superclass A.</p>
            <p xml:id="p110" begin="00:06:16:22" end="00:06:18:17" region="bottom">Invariably. Super is static.</p>
            <p xml:id="p111" begin="00:06:18:22" end="00:06:21:16" region="bottom">We know how the program<br/>will be compiled.</p>
            <p xml:id="p112" begin="00:06:22:02" end="00:06:25:09" region="bottom">Unfortunately, certain books</p>
            <p xml:id="p113" begin="00:06:25:18" end="00:06:28:04" region="bottom">define "super" wrong.</p>
            <p xml:id="p114" begin="00:06:28:08" end="00:06:30:14" region="bottom">The definitions make no sense.</p>
            <p xml:id="p115" begin="00:06:30:23" end="00:06:33:20" region="bottom">Here is a definition we found in a book.</p>
            <p xml:id="p116" begin="00:06:34:08" end="00:06:37:12" region="bottom">It says that "super"<br/>looks for the method...</p>
            <p xml:id="p117" begin="00:06:37:23" end="00:06:42:07" region="bottom">In other words,<br/>"super" prompts the lookup algorithm</p>
            <p xml:id="p118" begin="00:06:42:11" end="00:06:47:06" region="bottom">to search for the method in<br/>the superclass of the receiver's class.</p>
            <p xml:id="p119" begin="00:06:48:00" end="00:06:50:12" region="bottom">The superclass of the receiver's class.</p>
            <p xml:id="p120" begin="00:06:50:16" end="00:06:54:09" region="bottom">Actually, this is wrong,<br/>as proved by the example shown.</p>
            <p xml:id="p121" begin="00:06:54:20" end="00:06:58:23" region="bottom">If you take aC as the receiver,<br/>its class is C.</p>
            <p xml:id="p122" begin="00:06:59:18" end="00:07:03:03" region="bottom">The receiver's superclass<br/>is therefore B.</p>
            <p xml:id="p123" begin="00:07:04:01" end="00:07:08:14" region="bottom">If I come down here<br/>and execute the command "super foo,"</p>
            <p xml:id="p124" begin="00:07:08:24" end="00:07:12:24" region="bottom">if the definition given by the book<br/>applied,</p>
            <p xml:id="p125" begin="00:07:13:16" end="00:07:16:09" region="bottom">we would send the message "foo"</p>
            <p xml:id="p126" begin="00:07:17:16" end="00:07:20:13" region="bottom">to "super," and the "foo"<br/>method executed</p>
            <p xml:id="p127" begin="00:07:20:17" end="00:07:24:08" region="bottom">would be the one in the superclass<br/>of the receiver's class.</p>
            <p xml:id="p128" begin="00:07:24:12" end="00:07:27:12" region="bottom">In other words, this one.</p>
            <p xml:id="p129" begin="00:07:27:21" end="00:07:30:13" region="bottom">It would send "foo" to "super"</p>
            <p xml:id="p130" begin="00:07:30:20" end="00:07:34:12" region="bottom">over and over again,<br/>in an infinite loop.</p>
            <p xml:id="p131" begin="00:07:35:17" end="00:07:38:07" region="bottom">So the definition is wrong.</p>
            <p xml:id="p132" begin="00:07:38:11" end="00:07:43:19" region="bottom">In practice, this example functions<br/>perfectly.</p>
            <p xml:id="p133" begin="00:07:44:06" end="00:07:46:16" region="bottom">It's just that this definition is wrong.</p>
            <p xml:id="p134" begin="00:07:47:07" end="00:07:49:12" region="bottom">Here's what to remember:</p>
            <p xml:id="p135" begin="00:07:50:01" end="00:07:52:11" region="bottom">"Self" always represents the receiver.</p>
            <p xml:id="p136" begin="00:07:52:17" end="00:07:53:21" region="bottom">So does "super."</p>
            <p xml:id="p137" begin="00:07:54:00" end="00:07:58:01" region="bottom">It's the same in Java,<br/>with "this" and "super."</p>
            <p xml:id="p138" begin="00:07:58:22" end="00:08:01:04" region="bottom">However, "super" changes the lookup.</p>
            <p xml:id="p139" begin="00:08:01:15" end="00:08:05:00" region="bottom">It will start looking for a match</p>
            <p xml:id="p140" begin="00:08:05:06" end="00:08:07:08" region="bottom">in the superclass</p>
            <p xml:id="p141" begin="00:08:07:14" end="00:08:12:04" region="bottom">of the class containing the method<br/>that contains the keyword "super."</p>
            <p xml:id="p142" begin="00:08:12:18" end="00:08:15:06" region="bottom">"Self" sends are dynamic.</p>
            <p xml:id="p143" begin="00:08:15:16" end="00:08:20:06" region="bottom">The developer can use them to extend<br/>the behavior of an existing class,</p>
            <p xml:id="p144" begin="00:08:20:11" end="00:08:23:11" region="bottom">by creating a subclass<br/>that redefines the method.</p>
        </div>
    </body>
</tt>